<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhinoX-Unity</name>
    </assembly>
    <members>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextTypes">
             \enum XContextTypes
             \brief The parameters of the function, fill in the action_id
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes">
             /////////////////////////////////////////////////////////////////////
             \enum XControllerTypes
              \bref Types defined of Ximmerse Controllers
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerKylo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerDType-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerPickUp-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXController3Dof-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerTag-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes.kXControllerTagLeft-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTrackModels">
             @enum XControllerTrackModels
             @brief Algorithm tracking mode of controller.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates">
             \enum TrackingResult
             \brief Tracking status
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_RotationTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PositionTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PoseTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_RotationEmulated-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XTrackingStates.kXTrackingSt_PositionEmulated-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerButtonMasks">
             @enum XControllerButtonMasks
             @brief Masks of Controller buttons.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates">
             @enum XContextStates
             @brief State of Context.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates.kXContextStStarted-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStates.kXContextStWillRelease-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEvents">
             @enum XButtonEvents
             @brief Button events
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam">
             @struct XButtonEventParam
             @brief Parameters for button event notification
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam.btn">
             Button key value.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XButtonEventParam.evt">
             Event value. see \ref XButtonEvents
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XConnectionStates">
             @enum XConnectionStates
             @brief Connection state of device
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo">
             @struct XAttr6DofInfo
             @brief Structure for gettting 6Dof information
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttr6DofInfo.#ctor(System.UInt64,System.Single[],System.Single[])-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo">
             @struct XAttrImuInfo
             @brief Structure for getting IMU information.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.gyroscope-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.magnetism-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrImuInfo.timestamp-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTrackingInfo">
             @struct XAttrTrackingInfo
             @brief VPU cammera tracking object pose info.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState">
             @struct XAttrControllerState
             @brief Structure for getting controller state informations.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.rotation">
             quaternion 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.position">
             x, y, z
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.button_state">
             bit map indicating button pressed state of controller.
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrControllerState.#ctor(System.UInt64,System.UInt32,System.Single[],System.Single[],System.Single[],System.Single[],System.Single[])-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTouchPadState.x-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTouchPadState.y-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos">
             \struct XAttrPairedInfos
             \bref Structure for getting infomation of paired controllers.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos.bind_id_a-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrPairedInfos.mac_a-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle">
             \brief Input device handle
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.xdev_init-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.AioInit(System.String,System.String,System.String)">
             \fn public static int Init()
             \brief  Initialization of the platform support library for input devices
             \return Return 0 indicates success
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.AioExit">
             \fn public static int Exit()
             \brief  Exit the platform support library for the input device
             \return Return 0 indicates success
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.sLogDelegate">
             \var static XLogDelegate sLogDelegate
             \brief Persistence of logger object.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Aio_SetLogger(Ximmerse.RhinoX.Internal.XDevicePlugin.XLogDelegate,Ximmerse.RhinoX.Internal.XDevicePlugin.XLogLevels)">
             \fn public static void SetLogger(XLogDelegate logger, XLogLevels lv = XLogLevels.kXLogLevel_Debug)
             \brief  Set up the print listener of XLogDelegate
                \param [in] logger The parameter of XLogDelegate type 
             \return no return value
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventStop-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventPaired-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventUnpaired-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEvents.kPairingEventInfoUpdated-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XPowerModes.kXPowerModeBattery-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext">
             \brief Class provides Context APIs and attributions
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.Handle">
             \brief Handle object for communicate with native layer. This variable should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \deprecated, \see XContext(XContextTypes type)
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XContextTypes)">
             \brief Constructer with Context type.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.Release">
             \brief Release resources of XContext object.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.Vpu">
             \brief XVpu object to communicate with VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.Controllers">
             \brief XController array containing XController instance to communicate with controller devices
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.GetControllerAtIndex(System.Int32)">
             \deprecated, use Controllers instead
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.GetControllerOfType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             \deprecated, use Controllers instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.GetControllerByBindId(System.Int32)">
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.RegisterControllerConnectionDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerConnectionDelegate)">
             \brief Register delegate to listen controller device connection changes.
             \param dlgt Delegate to invode while controller device connection changing.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.UnregisterControllerConnectionDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerConnectionDelegate)">
             \brief Unregister registed listening controller device connection delegate.
             \param dlgt Which delegate to unregister.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.ContextType">
             \brief Type of this contex object.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.SdkVersion">
             \brief SDK version string.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.SdkVersionCode">
             \brief SDK version code.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.AlgorithmVersion">
             \brief Tracking algorithm library version code.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.SdkBuildDetail">
             \brief SDK build information.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.ContextState">
             \brief Running state of Context object. \see XContextStates.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.GetContextState">
             \brief Get context running state. 
             \returns Return \see XContextStates
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.RegisterContextStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStateChangeDelegate2)">
             \brief Register delegate to listen context state changes.
             \param dlgt Delegate to invode while context running state changing.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XContext.UnregisterContextStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStateChangeDelegate2)">
             \brief Unregister registered context state listening delegate.
             \param dlgt Which delegate to unregister.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu">
             \brief Class provides VPU APIs and attributions
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Handle">
             \brief Handle object for communicate with native layer. This variable should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief This method should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief This method should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.RegisterControllerPairingDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEventsDelegate)">
             \brief Register delegate to listen controller pairing events.
             \param vpu_handle
             \param dlgt Pairing events delegate.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnregisterControllerPairingDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerPairingEventsDelegate)">
             \brief Unregister pairing event delegate
             \param dlgt Pairing events delegate.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.RegisterVpuConnectStateDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceConnectStateChangeDelegate2)">
             \brief Reigster delegate to listen vpu device connection state changes.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerInfoByType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             \brief Get Paired controller information with specified controller type
             \param type Controller type, \ref XControllerTypes
             \return Return the first found controller informaction.
             \deprecated, \see XController.IsPaired and XController.DeviceType .
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetConnectedControllerNumber">
             \brief Get number of connected controllers.
             \returns Return number of connected controllers.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetControllerConnectableNumber">
             \brief Get connectable controller number.
             \returns
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetConnectedControllerList(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerInfo[]@)">
             \brief Get connected controller information.
             \param vpu_handle
             \param out_info_buffer
             \returns Return number of connected controllers.
             \deprecated Use XController.IsConnected() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ConnectControllerByMacAddr(System.Byte[])">
             \brief Request VPU to connect controller with specified MAC address.
             \param mac_addr MAC address to connect. Little endian byte array.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.ConnectTo(string) instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ConnectControllerByBindId(System.Int32)">
             \brief Request VPU to connect controller with the specified bind ID.
             \param bindid Bind ID indicates which controller
             \returns Return 0 for success, otherwise for error.
             \deprecated 
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectController(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief Request VPU to disconnect controller.
             \param controller_handle Handle of controller.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.ConnectTo() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectControllerByBindId(System.Int32)">
             \brief Request VPU to disconnect controller with specified bind ID.
             \param bindid Bind ID of controller.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.Disconnect() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DisconnectControllerByMacAddr(System.Byte[])">
             \brief Request VPU to disconnect controller with specified MAC address.
             \param mac_addr  MAC address. Little endian byte array.
             \returns  Return 0 for success, otherwise for error.
             \deprecated Use XController.Disconnect() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerNumber">
             \brief Get number of paired controllers.
             \returns Return paired controller number.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetControllerPairableNumber">
             \brief Get the MAX available controller paired number.
             \returns Return MAX number of controller can be paired to VPU.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StartPairingByType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             \brief Request VPU to start pairing to specified type controller.
             \param type Controller type to pairing.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.ConnectTo(XControllerTypes) and XController.ConfirmPair() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StopPairing">
             \brief Request VPU to stop pairing.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.Disconnect() instead
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPairedControllerList(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerInfo[]@)">
             \brief Get paired controller information.
             \param info_buffer XControllerInfo type array for outputing controller information.
             \returns Return count of paired controller info to output.
             \deprecated Use XController.IsPaired() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairController(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief Request VPU to unpair a paired controller.
             \param vpu_handle
             \param controller_handle Controller handle which to unpair.
             \returns Return 0 for success, otherwise for error.
             \de
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairAllControllers">
             \brief Request VPU device to unpair all paired controllers.
             
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairControllerByMacAddress(System.Byte[])">
             \brief Request VPU to unpair controller with specified MAC address.
             \param vpu_handle
             \param mac_addr MAC address of controller, Little endian byte array.
             \returns Return 0 for success, otherwise for error.
             \deprecated Use XController.Unpair() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.UnpairControllerByBindId(System.Int32)">
             \brief Request VPU to unpair controller with specified bind ID.
             \param vpu_handle
             \param bind_id Bind ID indicates which controller.
             \return \return Return 0 for success, otherwise for error.
             \deprecated Use XController.Unpair() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.HoldControllerConnection(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,System.Int32)">
             \brief Request VPU to hold controller connection after SDK deinited.
             \param controller_handle A connected controller handle which to hold connection.
             \param hold_time_in_sec Time interval in seconds for holding connection.
             \return Return 0 for success, otherwise for error.
             \deprecated Use XController.HoldConnection(int) instead.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.HardwareVersion">
             \brief VPU device hardware version.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.McuFirmwareVersion">
             \brief VPU device MCU firmware version.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.BleFirmwareVersion">
             \brief VPU device BLE firmware version.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SerialNumber">
             \brief VPU device serial number.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DeviceName">
             \brief Device name of VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ModelName">
             \brief Model name of VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.FpgaVersion">
             \brief FPGA version of VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ImuAlgVersion">
             \brief IMU algorithm version of VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ConnectionState">
             \brief Connect state of VPU device. \see XConnectionStates.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ImuFps">
             \brief IMU FPS or a negatvie value for error. \see XErrorCodes
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.FpgaFps">
             \brief FPGA FPS. or a negatvie value for error. \see XErrorCodes
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.TrackingPoseFps">
             \brief FPS of tracking pose from tracking algorithm library. or a negatvie value for error. \see XErrorCodes
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.DeviceErrorCode">
             \brief Error code reported from VPU device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.PowerMode">
             \brief Power mode of VPU device. \see XPowerModes
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.BatteryLevel">
             \brief Battery level. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.BatteryTemperature">
             \brief Battery temperature. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.BatteryVoltage">
             \brief Battery voltage. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ButtonStateBits">
             \brief Button state bits.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.PairedControllersNumber">
             \brief Number of paired controllers.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SixDof">
             \brief Six dof data of VPU devices.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Imu">
             \brief IMU data of VPU device.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.LoadTrackingMarkerSettingsFile(System.String)">
             \brief Load tracking marker settings from specified file.
             \param settings_file file path which file to load.
             \returns Return marker recornigze ID if load success.
                 Return 0 for mutilpe IDs exist.
                 Return negative value as error code.
             \deprecated Use LoadTrackingMarkSettingsFile instead
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.LoadTrackingMarkerSettingsFile(System.String,System.Int32[]@)">
             \brief Load tracking algorithm marker settings.
             \param settings_file File to load.
             \param markerIds [out] Output int array for marker IDs defined in specified file.
             \returns Return count of marker IDs, or a negactive value for error. 
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.ResetTrackingMarkerSettings">
             \brief Reset tracking marker settings.
             \returns
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SetTrackingSmooth(System.Int32)">
             \brief Set smooth value for tracking algorithm.
             \param smooth Smooth value to set.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetTracking(System.Int32)">
             \brief Get pose data of tracking object.
             \param track_id Tracking ID.
             \returns Tracking pose data. \see XAttrTrackingInfo.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetTracking(System.Int32,Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTrackingInfo@)">
             \brief Get pose data of tracking object.
             \param track_id Tracking ID.
             \param trackingInfo
             \returns Retrun negative value for error \see XErrorCodes, otherwise return TrackingResult
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.PredictTracking(System.UInt64,System.Int32,Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTrackingInfo@)">
             \brief Predict pose data of tracking object.
             \param predTimestampNano nano boot timestamp to predict. Prediction current time if value is 0.
             \param track_id Tracking ID.
             \param trackingInfo [out] Tracking information to output.
             \returns Retrun negative value for error \see XErrorCodes, otherwise return TrackingResult
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.PredictTracking(System.UInt64)">
             \brief Predict pose data of tracking object.
             \param predTimestampNano nano boot timestamp to predict, Prediction current time if value is 0.
             \returns Retrun native point for Prediction result if predict success, otherwise return null point for failure.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.GetPredictedTracking(System.IntPtr,System.Int32,Ximmerse.RhinoX.Internal.XDevicePlugin.XAttrTrackingInfo@)">
             \brief Get Predicted pose data of tracking object.
             \param predHandle Native Point return from \see PredictTracking method
             \param track_id Tracking ID.
             \param trackingInfo [out] Tracking information to output.
             \returns Retrun negative value for error \see XErrorCodes, otherwise return TrackingResult
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Wakeup">
             \brief Request Device to wakeup.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Sleep">
             \brief Request device to sleep.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SetTrackingIdlePowerSaving(System.Boolean)">
             \brief Enable or disable power saving while not in tracking.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.Equals(System.Object)">
             \}
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.StartVpuUpgrading(Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.XFirmwareProjectTypes,Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.XFirmwareTypes,System.String,System.String,Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceFirmwareUpgradeEventsDelegateFn_t,System.Int32)">
             \brief Start VPU firmware upgrading.
             \param proj_type Project type(VPU type), see \ref XFirmwareProjectTypes
             \param fw_type Firmware type, see \ref XFirmwareTypes
             \param fw_version Firmware version. A string with 4 digits, ex. "0041".
             \param fw_path Path of firmware file.
             \param event_delegate Upgrading events callback delegate. See \ref XDeviceFirmwareUpgradeEventsDelegateFn_t
             \param wait_ms Reserve.
             \return Return kErrCodeNoError for starting success, otherwise for failure and events delegate would never be invoted.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.SetControllerConnectionRssiThreshold(System.Int32)">
             \brief Set RSSI threshold for controller connection.
             \param rssi_val RSSI value range from -100 to 12
             \returns 
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.IsVpuOperationApiBlock">
             \brief VPU operation API block to wait finish.
                 Set True to wait finish while calling 
                 API which need to communicate with VPU device.
                 False to return immedately.
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.VpuCameraWorkModes.kVpuCamModeLightSpot-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpu.VpuCameraWorkModes.kVpuCamModeCameraCalibration-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XController">
             \brief Class init by handle and provides Controller APIs and attributions
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Handle">
             \brief Handle object for communicate with native layer. This variable should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief This method should hide for SDK user.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.#ctor(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \brief This method should hide for SDK user.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectState">
             \brief Get Connect State
             \return See \ref XConnectionStates
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.RegisterConnectStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceConnectStateChangeDelegate2)">
             \brief Register delegate to listen connection state changes.
             \param dlgt delegate to Register.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.UnregisterConnectStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceConnectStateChangeDelegate2)">
             \brief Unregister connection state changes delegate.
             \param dlgt delgate object to unregister.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.IsConnected">
             \brief Whether controller device is connected
             \returns Bool value indicated whether controller device is connected,
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.isPaired">
             \brief Whether controller device is paired.
             \returns Bool value indicated whether controller  device is paired.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ImuFps">
             \brief IMU FPS
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.PowerMode">
             \brief Power mode of controller device. \see XPowerModes
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.BatteryLevel">
             \brief Battery level. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.BatteryTemperature">
             \brief Battery temperature. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.BatteryVoltage">
             \brief Battery voltage. Valid if PowerMode is XPowerModeBattery
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Imu">
             \brief IMU data of controller.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.SixDof">
             \brief Six DOF data of controller.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ButtonStateBits">
             \brief Bits indicated buttons state.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.RegisterButtonStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceButtonStateChangeDelegate2)">
             \brief Register delegate to listen button state changes.
             \param dlgt
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.UnregisterButtonStateChangeDelegate(Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceButtonStateChangeDelegate2)">
             \brief Unregister listen button state delegate.
             \param dlgt Delegate object to unregister.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Trigger">
             \brief Trigger value of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.TouchpadState">
             \brief Touchpad state data containing touchpad data.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ControllerState">
             \brief Data structure containing IMU, 6 DOF, buttons state and so on. \see XAttrControllerState
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.DeviceName">
             \brief Device name of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.TrackID">
             \brief Return track ID if track mode is not \see kXControllerTrackModelNone
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.DeviceType">
             \brief Type of controller device.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.GetDeviceType">
             \brief Get controller device type connected or paired or once connected.
             \returns 
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.MacAddress">
             \brief Get MAC address of a connected or paired controller.
             \returns Return string of MAC address with format 00:11:22:33:44:55.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.FirmwareRevision">
             \brief Firmware revision of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.SoftwareRevision">
             \brief Software revision of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.HardwareRevision">
             \brief Hardware revision of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.SerialNumber">
             \brief Serial number string of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ModelName">
             \brief Model name of controller device.
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ManufactureName">
             \brief Manufacture name of controller device.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectTo">
             \brief Request to connect controller device which paired or once connected.
             \returns Return XErrorCodes
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectTo(System.String,System.Boolean)">
             \brief Connect to Specified MAC address.
             \param macAddress MAC address of device to connect, ex. 00:01:02:03:04:05
             \param force Force to connect, if it's true, disconnect or stop connecting if another connection exists.
             \returns XErrorCodes
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectTo(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes,System.Boolean)">
             \brief Connect to specified type controller device. 
             \param type Controller device type to connect.
             \param force Force to connect, if it's true, disconnect or stop connecting if another connection exists
             \returns XErrorCodes
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectToRfid(System.Int32,System.Boolean)">
             \brief Connect to specified RFID device.
             \param rfid RFID of device to connect. It's a byte value in device's advertisment.
             \param force Force to connect, if it's true, disconnect or stop connecting if another connection exists
             \returns
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConnectToRfidPattern(System.Int32,System.Boolean)-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Disconnect">
             \brief Disconnect Controller device if connected.
             \return XErrorCodes.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.ConfirmPair">
             \brief Confirm a connected controller to paired list.
             \returns
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Unpair">
             \brief Remove a paired controller from paired list if exists.
             \returns
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.HoldConnection(System.Int32)">
             \brief Set hold connection after SDK released.
             \param hold_time_in_sec Time interval (range from -1 to 255) in second to keep connection. Negative value means hold never timeout.
             \returns
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.XController.Vibrate(System.Int32,System.Int32)">
             \brief Request connected device to vibrate
             \param strengh_percentage vibration strengh percentage, from 1 to 100.
             \param duration_ms vibration duration in milliseconds
             \returns 
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes">
             @enum XContextAttributes
             @brief Attributes of Context
             @deprecated Use XContext instead. @see XContext
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_SdkVersion">
             Get the SDK platform support library version 
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_SdkBuildNo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Str_SdkVersion-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_SDKALGVersion-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Int_State-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextAttributes.kXCtxAttr_Str_SdkBuildDetail-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes">
             @enum XVpuAttributes
             @brief Attributes of VPU Device.
             @deprecated Use XVpu to get attributes, @see XVpu
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_HardwareRevision-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_SerialNumber-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_DeviceName-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_ModelName-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_FPGAVersion-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Str_ALGVersion-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ImuFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_FpgaFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_AlgorithmPoseFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ErrorCode-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ConnectionState-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_PowerMode-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_Battery-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_BatteryVoltage-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_BatteryTemperature-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_ImuInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_ImuInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_6DofInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_6DofInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ButtonBits-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_ButtonEvent-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Int_PairedNumber-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_ControllerState-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_TrackingInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_V_TrackingInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XVpuAttributes.kXVpuAttr_Obj_PairedInfos-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes">
             @enum XControllerAttributes
             @brief Attribute types of controller.
             @deprecated Use XController to get attributions. \see XController
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_SoftwareRevision-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_HardwareRevision-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_SerialNumber-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_DeviceName-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_ModelName-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_ManufacturerName-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ImuFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ErrorCode-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ConnectionState-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_PowerMode-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_Battery-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_BatteryVoltage-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_BatteryTemperature-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_ImuInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_V_ImuInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_6DofInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_V_6DofInfo-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ButtonBits-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_ButtonEvent-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_Trigger-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_TouchPadState-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_ControllerState-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_Type-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Obj_Address-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Str_Address-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerAttributes.kXCAttr_Int_BindID-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions">
             \enum XActions
             \brief The parameters of the DoAction method , fill in the action_id
             \deprecated
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_UnpairAllControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_StartPairingController-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_StopPairingController-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByBindID-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectAllPairedControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectControllerByIndex-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectControllerByBindID-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_DisconnectAllControllers-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Vibrate-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Vibrate_V-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Sleep-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Wakeup-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByMacAddr-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_UnpairControllerByBindId-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_CustomBegin-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SlideInActionsBegin-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_LoadMarkerSettingFile-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ResetMarkerSettings-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_LoadCameraCalibrationFile-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetPositionSmooth-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetFpgaMaxFps-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByMacAddrHex-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_ConnectControllerByMatchRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_PairControllerByMacAddrHex-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_PairControllerByRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_PairControllerByMatchRfid-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetAlgorithmMaxRotateAngle-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetAlgorithmMaxTranslationDistance-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Max-->
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxDeviceVersion">
             deprecated
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxSdkVersion">
             \deprecated use \ref XContextAttributes.kXCtxAttr_Int_SdkVersion instead.
             Get the SDK platform support library version 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_CtxSDKALGVersion">
             \deprecated use \ref XContextAttributes.kXCtxAttr_Int_SDKALGVersion instead. 
             Get the SDK algorithm version and the version number returned is hexadecimal
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_FPS">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ImuFps and \ref XControllerAttributes.kXCAttr_Int_ImuFps instead.
             Gets the frame rate of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ErrorCode">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ErrorCode and \ref XControllerAttributes.kXCAttr_Int_ErrorCode instead,
             Get the device error code
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ConnectionState">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_ConnectionState and \ref XControllerAttributes.kXCAttr_Int_ConnectionState instead,
             Gets the device connection status
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BlobID">
             \deprecated
             Gets the ID of the controller marker. Reserved.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_SetBlogID">
             \deprecated 
             Sets the ID of the controller marker. Reserved.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_Battery">
             \deprecated use \ref XVpuAttributes.kXCAttr_Int_Battery and \ref XControllerAttributes.kXCAttr_Int_Battery instead,
             Acquire the battery capacity of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryMode">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_PowerMode and \ref XControllerAttributes.kXCAttr_Int_PowerMode instead.
             Gets the power supply mode of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryVoltage">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_BatteryVoltage and \ref XControllerAttributes.kXCAttr_Int_BatteryVoltage instead.
             Gets the battery voltage of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_BatteryTemperature">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Int_BatteryTemperature and \ref XControllerAttributes.kXCAttr_Int_BatteryTemplarature instead.
             Gets the battery temperature of the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_SoftwareRevision">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_SoftwareRevision and \ref XControllerAttributes.kXCAttr_Str_SoftwareRevision instead.
             Gets firmware version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_HardwareRevision">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_HardwareRevision and \ref XControllerAttributes.kXCAttr_Str_HardwareRevision instead.
             Gets hardware version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_FPGAVersion">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_FPGAVersion instead
             Gets FPGA version and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ModelName">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_ModelName and \ref XControllerAttributes.kXCAttr_Str_ModelName instead.
             Gets model name and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_DisplayName">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_DeviceName and \ref XControllerAttributes.kXCAttr_Str_DeviceName instead.
             Gets display name information and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ALGVersion">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_ALGVersion instead.
             Gets the version of the algorithm on the firmware and returns a string
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_SerialNumber">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Str_SerialNumber and \ref XControllerAttributes.kXCAttr_Str_SerialNumber instead.
             Get the device serial number for production
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_ManufacturerName">
             \deprecated use \ref XControllerAttributes.kXCAttr_Str_ManufacturerName instead.
             Gets the manufacturer of device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetStr_FirmwareRevision">
             \deprecated use \ref XControllerAttributes.kXCAttr_Str_FirmwareRevision instead.
             An extended interface to get firmware version information
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetImuInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_ImuInfo and \ref XControllerAttributes.kXCAttr_Obj_ImuInfo instead.
             Command to get the IMU information and the argument is the structure of ActParam_IMUInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetImuInfo_V">
             \deprecated
             Command to get IMU information with variable parameters. This command is INVALID in Unity.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get6DofInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_6DofInfo and \ref XControllerAttributes.kXCAttr_Obj_6DofInfo instead.
             Command to get 6-Dof information and the argument is the structure of ActParam_6DofInfo
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get6DofInfo_V">
             \deprecated
             Command to get 6-Dof information with variable parameters, this command is INVALID in Unity.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_ButtonBits">
             \deprecated use \ref XVpuAttributes.XVpuAttr_Int_ButtonBits and XCAttributes.XVpuAttr_Int_ButtonBits instead.
             Command to get buttons information 
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_Get_TouchPadState">
             \deprecated use \ref XCAttributes.kXCAttr_Obj_TouchPadState instead.
             Command to get touchPad information. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetInt_PairedNumber">
             \deprecated
             The command to set the VPU reference time. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetPairedList">
             \deprecated
             Gets the ID list of controllers that have been paired. Reserved
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetControllerState">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_ControllerState and XCAttributes.kXCAttr_Obj_ControllerState instead.
             Command to get controller state and the argument is the structure of ActParam_ControllerState
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetMarkerInfo">
             \deprecated use \ref XVpuAttributes.kXVpuAttr_Obj_TrackingInfo instead.
             Get the 6-dof information of Marker
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.XActions.kXAct_GetMarkerInfo_V">
             \deprecated 
             Obtain the 6-dof information of Marker with variable parameters. This command is INVALID in Unity.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XContextStateChangeDelegate">
             \deprecated, @see XContextStateChangeDelegate2
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceConnectStateChangeDelegate">
             \deprecated @see XDeviceConnectStateChangeDelegate2
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XDeviceButtonStateChangeDelegate">
             \deprecated @see XDeviceButtonStateChangeDelegate2
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.NewContext(Ximmerse.RhinoX.Internal.XDevicePlugin.XContextTypes)">
             \fn public static XHandle NewContext(XContextTypes context_type)
             \brief  Create the device context
                \param [in] context_type device type
             \return Return the XHandle of device
             \deprecated Use XContext.XContext(XContextTypes type) instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.ReleaseContext(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \fn public static int ReleaseContext(XHandle context_handle)
             \brief  Destroy the device context
                \param [in] context_handle The device handle
             \return Return 0 indicates success
             \deprecated, use XContext.Release() instead.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetName(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle)">
             \fn public static string GetName(XHandle handle)
             \brief Get Name of the provided handle
             \param [in] handle
             \return return the name.
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetDeviceHandle(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,System.String)">
             \fn public static XHandle GetDeviceHandle(XHandle context_handle, string name)
             \brief  Gets the device handle through the device name
                \param [in] context_handle The device handle
                \param [in] name device name
             \return Return 0 indicates success
             \deprecated
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetBool``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Boolean)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetInt``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetFloat``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Single)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetString``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetObject``2(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,``1@)-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetObject``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Byte[])">
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions)">
             \fn public static int DoAction(XHandle handle, XActions action_id)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
             \returnResult of the command, 0 for success.
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,System.String)">
             \fn public static int DoAction(XHandle handle, XActions action_id, string args)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
                \param [in] args String parameter
             \return Result of the command, 0 for success.
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,System.Int32)">
             \fn public static int DoAction(XHandle handle, XActions action_id, int args)
             \brief  function is used to control input device
                \param [in] handle Handle to the device,
                \param [in] action_id Command name,please see the enum of XActions
                \param [in] args Int parameter
             \return Result of the command, 0 for success.
             \deprecated
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,``0@)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.DoAction``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,Ximmerse.RhinoX.Internal.XDevicePlugin.XActions,``0)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.RegisterObserver``2(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Delegate,``1)-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.UnregisterObserver``1(Ximmerse.RhinoX.Internal.XDevicePlugin.XHandle,``0,System.Delegate)-->
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.mXHawkAttrDic">
             \defgroup Deprecated APIs compat
              \{
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo">
             \struct ActParam_6DofInfo
             \brief Structure for gettting 6-Dof information
             \deprecated use \ref XAttr6DofInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.Obtain-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_6DofInfo.#ctor(System.Single)">
             \brief  constructor
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo">
             \struct ActParam_IMUInfo
             \brief Structure for getting IMU information.        
             \deprecated Use \ref XAttrImuInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.gyroscope-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.magnetism-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_IMUInfo.Obtain-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs">
             \struct ActParam_VibrateArgs
             \brief The structure that sets the vibration parameters is used by the command of kXAct_Get_6DofInfo
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs.duration-->
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_VibrateArgs.#ctor(System.Int32,System.Int32)-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState">
             @struct ActParam_TouchpadState
             @brief Touchpad State structure for \ref kXAct_Get_TouchPadState
             \deprecated Use \ref XAttrTouchPadState
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState.x-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_TouchpadState.y-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo">
             \struct ActParam_MarkerInfo
             \brief The structure is Marker information returned by the calling command of
             \deprecated Use \ref XAttrTrackingInfo 
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.state-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.position-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.rotation-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.timestamp-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_MarkerInfo.recognized_markers_mask-->
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_ControllerState">
             \struct ActParam_ControllerState
             \brief The structure for returning controller state by calling DoAction with kXAct_GetControllerState
             \deprecated Use \ref XAttrControllerState
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.XDevicePlugin.ActParam_ControllerState.axes-->
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Init(System.String,System.String,System.String)">
             \fn public static int Init()
             \brief  Initialization of the platform support library for input devices
             \return Return 0 indicates success
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Exit">
             \fn public static int Exit()
             \brief  Exit the platform support library for the input device
             \return Return 0 indicates success
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.XLogDelegate">
             \brief  Delegate for printing output
                \param [in] level Print level
                \param [in] tag Printed label
                \param [in] log Printed content    
             \return no return value
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.SetLogger(Ximmerse.RhinoX.Internal.XDevicePlugin.XLogDelegate,Ximmerse.RhinoX.Internal.XDevicePlugin.XLogLevels)">
             \fn public static void SetLogger(XLogDelegate logger, XLogLevels lv = XLogLevels.kXLogLevel_Debug)
             \brief  Set up the print listener of XLogDelegate
                \param [in] logger The parameter of XLogDelegate type 
             \return no return value
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.CopyAssetsToPath(System.String,System.String)">
             \fn public static int CopyAssetsToPath(string dest_directory_path, string name_regex = ".*\\.(json|dat)$")
             \brief Copy calibration config files to destination folder from assets. This method only valid on android devices.
                 \param [in] dest_directory_path Dest folder path.
                 \param [in] name_regex Regex string to match file which need to be copy.
             \return Return 0 for sucess, otherwise failure.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.xdev2_sdk_authorize">
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.xdev2_get_authorization_available_time">
             \deprecated
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.xopc_set_message_callback(Ximmerse.RhinoX.Internal.XDevicePlugin.opc_message_handle_callback_t)">
             Set OPCenter message handle callback.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.XDevicePlugin.OpCenterMessagesDelegates">
             Delegates for handling difference messages from OP Center
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.OpCenterMessagesDelegates.OnRequestBeginMission">
             Invoked with mission key string argument while receiving begin mission message from OP Center.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.OpCenterMessagesDelegates.OnRequestEndMission">
             Invoked with mission key string argument while receiving begin mission message from OP Center.
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.XDevicePlugin.OpCenterMessagesDelegates.OnRequestExitApp">
             Invoked with string argument while receiving begin mission message from OP Center.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.SetOpCenterMessageDelegates(Ximmerse.RhinoX.Internal.XDevicePlugin.OpCenterMessagesDelegates)">
             Set delegates to handle OpCenter messages
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.OnMissionBegin">
             \brief developer need to call this method before beginning the game mission, 
                 then start mission or not according the return value;
                 NOTICE: this method may block the thread.
             \returns Return negative value for error, otherwise return seconds for how long time allowed to play;
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.OnMissionEnd">
             \brief Developer need to call this method before ending the game mission.
             \returns Return negative value for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.Authorize">
             \deprecated
             \fn Start Authorization to Web server
             \returns Return positive value for SDK complete functions available time in seconds.
                 Otherwise, a negative value for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetSdkAuthorizationAvailableSeconds">
             \deprecated
             \returns Return positive value for SDK complete functions available time in seconds.
                 Otherwise, a negative value for error.
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetOpServiceVersionCode">
            
            
                    * Get OPService version code
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.IsOpConsoleServerConnected">
            
            
                    * Is Remote OPConsole server connected.
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetOpConsoleServerAddress">
            
            
                    *
                    * \returns Return OPConsole server IP address, return null or empty if not exists.
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.HasBoundGameServer">
            
            
                    * \returns return true if bound game server exists
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.IsBoundGameServerOnline">
            
            
                     * Bound game server is online
                    * \returns return true if bound game server exists and online, otherwise return false.
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetBoundGameServerAddress">
            
            
                    * Get bound game server address(IP or URL)
                    * \returns return null or empty if not exists.
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetBoundGameServerGameID">
            
            
                    * Get bound game server GameID
                    * \returns return null or empty if not exists.
                    </member>
        <member name="M:Ximmerse.RhinoX.Internal.XDevicePlugin.GetBoundGameServerUUID">
            
            
                    * Get bound game server UUID
                    * \returns return null or empty if not exists.
                    </member>
        <member name="T:Ximmerse.RhinoX.RXEventSystem">
             <summary>
             RhinoX event system, should be singleton instance, driver class of RhinoX input event system.
             Note: RXEventSystem need to be the only event system, if your scene has Unity's built in EventSystem instane, RXEventSystem will remove it when starts.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXInput">
             <summary>
             RhinoX helmet input.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInput.builtinButtons">
             <summary>
             The builtin side-bar buttons on RhinoX
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButton(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Is player pressing the RhinoX button ?
             </summary>
             <returns><c>true</c>, if confirm key was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonDown(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             is player pressing down the RhinoX button ?
             </summary>
             <returns><c>true</c>, if confirm key down was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonLongHeldDown(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             is player held down the RhinoX button for a relative long time ?
             </summary>
             <returns><c>true</c>, if confirm key down was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonUp(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             is player pressing up the RhinoX button ?
             </summary>
             <returns><c>true</c>, if button up was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
             <param name="index">Controller Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonTap(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Is player tapping on the RhinoX button ?
             For button = RhinoXButton.ConfirmButton, index is ignored.
             </summary>
             <returns><c>true</c>, if button tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsButtonDoubleTap(Ximmerse.RhinoX.RhinoXButton,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Is player double tapping on the RhinoX button ?
             </summary>
             <returns><c>true</c>, if button tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetTriggerValue(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the linear trigger value of the controller
             </summary>
             <param name="index"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetPairedControllerCount">
             <summary>
             Gets how many controller is paired.
             </summary>
             <returns>The paired controller.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetPairedControllerInfos">
             <summary>
             Gets the paired controller infos.
             Attention : this method allocate runtime memory.
             </summary>
             <returns>The paired controller infos.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetConnectedControllerCount">
             <summary>
             Gets the connected controller count.
             </summary>
             <returns>The connected controller count.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetConnectedControllerInfos">
             <summary>
             Gets the connected controller infos.
             Attention : this method allocate runtime memory.
             </summary>
             <returns>The connected controller infos.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetTouchPadPointer(UnityEngine.Vector2@,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the touch pad pointer, represents finger touch pointer on the touch pad.
             </summary>
             <returns><c>true</c>, if touch pad pointer was gotten, <c>false</c> otherwise.</returns>
             <param name="TouchPadPointer">Touch pad pointer.</param>
             <param name="index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetTouchPadPointer(Ximmerse.RhinoX.TouchPadButtonDirection@,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the touch pad pointer direction, represents finger touch pointer on the touch pad.
             </summary>
             <returns><c>true</c>, if touch pad pointer was gotten, <c>false</c> otherwise.</returns>
             <param name="Direction">Touch pad direction.</param>
             <param name="index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetControllerRotation(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the RhinoX standard controller built-in gyroscope output rotation.
             </summary>
             <returns><c>true</c>, if controller rotation was gotten, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetControllerAcceleration(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the controller acceleration output.
             </summary>
             <returns>The controller acceleration.</returns>
             <param name="index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.GetTouchPadState(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the state of the touch pad.
             </summary>
             <returns>The touch pad state.</returns>
             <param name="index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.Viberate(System.Single,System.Single,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Vibrate the controller at the index.
             Strength should be 0-1.
             VibrateTime is the seconds you want to vibrate.
             </summary>
             <param name="Strength"></param>
             <param name="VibrateTime"></param>
             <param name="index"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsTouchPadButton(Ximmerse.RhinoX.TouchPadButtonDirection,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Check if the touch pad's button direction is currently pressing down ?
             </summary>
             <param name="touchPadButton"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsTouchPadButtonDown(Ximmerse.RhinoX.TouchPadButtonDirection,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Check if the touch pad's button direction is at pressing down frame ?
             </summary>
             <param name="touchPadButton"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsTouchPadButtonUp(Ximmerse.RhinoX.TouchPadButtonDirection,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Check if the touch pad's button direction is at release up frame ?
             </summary>
             <param name="touchPadButton"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsTouchPadButtonTap(Ximmerse.RhinoX.TouchPadButtonDirection,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Check if the touch pad's button direction currently being tap?
             </summary>
             <param name="touchPadButton"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInput.IsTouchPadButtonDoubleTap(Ximmerse.RhinoX.TouchPadButtonDirection,Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Check if the touch pad's button direction currently being double tap?
             </summary>
             <param name="touchPadButton"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.I_PointerStayListener.OnPointerStay(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Event : on pointer stay.
             </summary>
             <param name="pointerEventData"></param>
            </member>
        <member name="T:Ximmerse.RhinoX.XimmerseControllerSystem">
             <summary>
             Script to access Ximmerse controller interfaces.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XimmerseControllerSystem.UseExternalControllerDataSource">
             <summary>
             Should use external controller data source ?
             For editor debugger.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XimmerseControllerSystem.externalControllerSystemDataSource">
             <summary>
             Should use external controller system data source?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.XimmerseControllerSystem.IsInitialized">
             <summary>
             Is the ximmerse controller system initialized ?
             </summary>
             <value><c>true</c> if is initialized; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetController(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the first active connected controller.
             </summary>
             <value>The first active controller.</value>
            </member>
        <member name="E:Ximmerse.RhinoX.XimmerseControllerSystem.OnControllerInitialized">
             <summary>
             Event : on controller of index is initialized.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.XimmerseControllerSystem.OnControllerConnected">
             <summary>
             Event : on controller of index is connected.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.XimmerseControllerSystem.OnControllerDisconnected">
             <summary>
             Event : on controller of index is disconnected.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StaticUpdate">
             <summary>
             Update the input system.
             Should be call one per frame.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StartPairingByRFID">
             <summary>
             Starts pairing by RFID. 
             Used for new framework.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StartParingByCtrlType(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             <summary>
             Starts pairing by controller type, used for old framework.
             </summary>
             <param name="controllerType">Controller type.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetPairedDeviceCount">
             <summary>
             Gets paired device count.
             </summary>
             <param name="PairedNumber">Paired number.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.ConnectAll">
             <summary>
             Connects all paired device.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.ConnectByMAC(System.String)">
             <summary>
             Connect by MAC address directly.
             You should pass literal MAC address , e.g 01:06:00:00:15:28 , internally this method converts literal mac address to hardware format.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Disconnect(System.Int32)">
             <summary>
             Disconnect the controller at the index.
             </summary>
             <param name="Index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.StopPairing">
             <summary>
             Stops pairing.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.UnpairAll">
             <summary>
             Unpairs all.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Unpair(System.Int32)">
             <summary>
             Unpair the specified controllerIndex.
             </summary>
             <param name="controllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsControllerConnected(System.Int32)">
             <summary>
             Check if controller 01/02/03/04 is connected.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.Vibrate(System.Int32,System.Single,System.Int32)">
             <summary>
             Vibrate the controller of index with specified strength, duration.
             If index = -1, will vibrate any connected controller.
             You should pass -1 | 0 | 1 | 2 | 3 only, if Index == 0/1/2/3, vibrate the controller at the index.
             </summary>
             <param name="strength">Strength.</param>
             <param name="duration">Duration.</param>
             <param name="Index">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputRotation(System.Int32)">
             <summary>
             Gets the input controller rotation.
             Passing controller index = -1 to return the first connected controller's rotation.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputGyroscope(System.Int32)">
             <summary>
             Gets the input controller gyroscope.
             Passing controller index = -1 to return the first connected controller's gyroscope.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputAcceleration(System.Int32)">
             <summary>
             Gets the input controller acceleration.
             Passing controller index = -1 to return the first connected controller's acceleration.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns>The input rotation.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputAccelerationDelta(System.Int32)">
             <summary>
             Gets the input acceleration delta.
             </summary>
             <returns>The input acceleration delta.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetInputAccelerationDeltaDistance(System.Int32)">
             <summary>
             Gets the input acceleration delta distance.
             </summary>
             <returns>The input acceleration delta distance.</returns>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKeyDown(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently pressing down at the frame ? 
             Passing controller index = -1 means both controller 01 , 02 , 03 or 04 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKeyLongHeldDown(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently pressing long time held down at the frame ? 
             Passing controller index = -1 means both controller 01 , 02 , 03 or 04 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKey(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently pressing down. 
             Passing controller index = -1 means both controller 01 , 02 , 03 or 04 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 3, passing 3 for controller 4.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsKeyUp(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button is currently loosing up. 
             Passing controller index = -1 means both controller 01 , 02 , 03 or 04 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 03, passing 3 for controller 04.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsTap(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button has been triggering a tap event.
             Passing controller index = -1 means both controller 01 , 02 , 03 or 04 can trigger a key down result.
             If you want to target specific controller index, passing 0 for controller 01, passing 1 for controller 02, passing 2 for controller 03, passing 3 for controller 04.
             </summary>
             <returns><c>true</c> if is key the specified button ControllerIndex; otherwise, <c>false</c>.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.IsDoubleTap(Ximmerse.RhinoX.ControllerButtonCode,System.Int32)">
             <summary>
             Check if the button has been triggering a double-tap event.
             </summary>
             <returns><c>true</c>, if double tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetTouchPad(UnityEngine.Vector2@,System.Int32)">
             <summary>
             Gets the touch-pad.
             Center point = 0. 
             left top = -0.5,
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="TouchPad">Touch pad pointer.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetLatestTouchPad(UnityEngine.Vector2@,System.Int32)">
             <summary>
             Gets the latest touch-pad.
             Center point = 0. 
             left top = -0.5,
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="TouchPad">Touch pad pointer.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetLatestTouchPad(Ximmerse.RhinoX.TouchPadButtonDirection@,System.Int32)">
             <summary>
             Gets the latest touch pad pointer, output the touch point direction.
             Return false when no input on touch pad.
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="direction">Direction.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetTouchPad(Ximmerse.RhinoX.TouchPadButtonDirection@,System.Int32)">
             <summary>
             Gets the touch pad, output the touch point direction.
             Return false when no input on touch pad.
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="direction">Direction.</param>
             <param name="ControllerIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetTouchPadState(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets the finger state of the touch pad.
             </summary>
             <returns>The touch pad state.</returns>
             <param name="Index">Index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.XimmerseControllerSystem.GetTouchPad(UnityEngine.Vector2@,Ximmerse.RhinoX.XDeviceType)">
             <summary>
             Gets the touch-pad.
             Center point = 0. 
             left top = -0.5,
             </summary>
             <returns><c>true</c>, if touch pad was gotten, <c>false</c> otherwise.</returns>
             <param name="TouchPad">Touch pad pointer.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrTextureType">
             <summary>
             Enum used to indicate the type of texture passed in as a render layer for submitFrame
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrLayerFlags">
             <summary>
             Svr layer flags.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.pVector4Int">
             <summary>
             Vector4 int
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Clamp(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Clamps the Vector4Int to the bounds given by min and max.
             </summary>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Max(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Returns a vector that is made from the largest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Min(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Returns a vector that is made from the smallest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Distance(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             return distance between a and b
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.FloorToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector4 to a Vector4Int by doing a Floor to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.RoundToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Round to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.CeilToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Ceiling to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.pVector4Int.Scale(Ximmerse.RhinoX.pVector4Int,Ximmerse.RhinoX.pVector4Int)">
             <summary>
             Multiplies two vectors component-wise.
             Every component in the result is a component of a multiplied by the same component of b.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackingItem">
             <summary>
             Tracking item.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackingItem.JSONConfig">
             <summary>
             Editor only 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackingItem.jsonName">
             <summary>
             The name of the json file.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackingItem.jsonContent">
             <summary>
             The content of the json.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.MarkerConfigInfo">
             <summary>
             Marker config info : a single marker object's config info from JSON.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.MarkerID">
             <summary>
             The marker identifier.
             </summary> 
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.MarkerConfigSize">
             <summary>
             The size of the marker config.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.markerType">
             <summary>
             是 Marker 组还是 单个Marker ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerConfigInfo.GroupType">
             <summary>
             The type of the group : controller | cube | map
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ConfigMarkerType">
             <summary>
             Config marker type.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.SingleMarker">
             <summary>
             The marker is config as a single card
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.MarkerGroup_Submarker">
             <summary>
             The marker is config as a sub-card of the group
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ConfigMarkerType.GroupNode">
             <summary>
             This is a top-group.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.IsLoaded">
             <summary>
             Has the tracking profile loaded by tracking system ?
             </summary>
             <value><c>true</c> if is loaded; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.items">
             <summary>
             Config the tracking items.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.trackingItems">
             <summary>
             Gets the tracking items.
             </summary>
             <value>The tracking items.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.TrackBeacons">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.ObjectTrackingProfile" /> track beacon.
             </summary>
             <value><c>true</c> if track beacon; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ObjectTrackingProfile.m_CustomTrackingCalibrationFiles">
             <summary>
             Customize tracking calibration files.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTrackingProfile.CustomTrackingCalibrationFiles">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.ObjectTrackingProfile" /> customize tracking
             calibration files.
             </summary>
             <value><c>true</c> if custom tracking calibration files; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTrackingProfile.Add(System.String,UnityEngine.Object,System.String)">
             <summary>
             Adds a tracking item.
             </summary>
             <param name="jsonName">Json name : the tracking json profile's name</param>
             <param name="jsonObject">Json object : the tracking json object's reference in your project asset. If you're calling this API at runtime, jsonObject could be null. If you're calling this API at unity editor, jsonObject should not be <see langword="null" />.</param>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerTrackedInfo.confidence">
             <summary>
             置信度.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.FactoryDefault">
             <summary>
             Device default value from factory.
             RhinoX 设备的出厂设计值。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VIO_Shift">
             <summary>
             The shift position from VIO anchor to screen center.
             VIO中心点到屏幕中心点的偏移 XYZ。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VIO_TiltEuler">
             <summary>
             The vio tilt euler from VIO anchor to screen center.
             VIO中心点到屏幕中心点的偏移Euler。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VPU_Shift">
             <summary>
             The VPU shift position from VPU anchor to screen center
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.FactoryDefault.VPU_TiltEuler">
             <summary>
             The VPU tilt euler from VIO anchor to screen center.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.MarkerInfo">
             <summary>
             marker info from LLAPI.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.isTracked">
             <summary>
             Is marker tracked ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Position">
             <summary>
             The tracked position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Rotation">
             <summary>
             The tracked rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Timestamp">
             <summary>
             The timestamp.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.Confidence">
             <summary>
             Marker tracked confidence level.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.MarkerInfo.MarkerDistance">
             <summary>
             Marker tracked confidence level.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RhinoXSystem">
             <summary>
             RhinoX system : access system software and hardware information.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXSystem.SDKVersion">
             <summary>
             The sdk version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXSystem.SDKVersionCode">
             <summary>
             The sdk version code.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXSystem.kVIOVersion">
             <summary>
             The VIO sdk version.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RhinoXSystem.AIO_Event">
             <summary>
             Event for application to catch. By this event, application can response to AIO system event.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.OnSvrEvent(Ximmerse.RhinoX.Internal.SvrEvent)">
             <summary>
             Internal API : expose for application work on listened AIO event.
             </summary>
             <param name="_event">Event.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.HeadsetSerializeNumber">
             <summary>
             Gets the headset's serial number.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.TagTrackingSDKVerison">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.SubModuleVersion">
             <summary>
             Gets the submodule version information.
             </summary>
             <value>The sdk version.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.VIOVersion">
             <summary>
             Gets the VIO library ersion.
             </summary>
             <value>The VIOSDKV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.FPGAVersion">
             <summary>
             Gets the FPGA version.
             </summary>
             <value>The FPGAV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.AlgorithmVersion">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetHeadTrackingSystemTimestamp">
             <summary>
             Gets the head tracking system nano time.
             </summary>
             <returns>The SVRT IME.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.EnableVPUPowerSaving">
             <summary>
             Enables VPU power saving mode. 
             When true, VPU works in lower scanning frequency to save power.
             </summary>
             <value><c>true</c> if enable VPUP ower saving; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.MaxPredictTime">
             <summary>
             Gets or sets the max predict time for low level tracking system.
             </summary>
             <value>The max predict time.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.authenticationImpl">
             <summary>
             Gets or sets the authentication impl.
             </summary>
             <value>The authentication impl.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.LEDController">
             <summary>
             Gets the LED controller.
             </summary>
             <value>The LEDC ontroller.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXSystem.IsInitialized">
             <summary>
             Is the RhinoX system initialized ?
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.InitializeParamsLoader">
             <summary>
             初始化归一化参数加载器。
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetEyeBufferRenderTextureSize(System.Int32@,System.Int32@)">
             <summary>
             输出 Eye Renderer Buffer Texture 的宽高。
             </summary>
             <param name="RenderTextureSizeWidth"></param>
             <param name="RenderTextureSizeHeight"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetConfigedEyeIPD(System.Single@)">
             <summary>
             输出内部归一化参数配置的双目 IPD
             </summary>
             <param name="IPD"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetConfigedEyePitch(System.Single@)">
             <summary>
             输出内部归一化参数配置的前向 Eye Pitch 俯仰角。
             </summary>
             <param name="EyePitchAngle"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetViewFrustum(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             输出内部归一化参数配置的双目 View Frustum
             </summary>
             <param name="near"></param>
             <param name="far"></param>
             <param name="left"></param>
             <param name="right"></param>
             <param name="top"></param>
             <param name="bottom"></param>
             <param name="hFov"></param>
             <param name="vFov"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetEyeMountOffsetToVIOAnchor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
             <summary>
             输出 Eye Mount 到 VIO 锚点的偏移位置和偏移角度。
             </summary>
             <param name="Pos"></param>
             <param name="Euler"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetVPUOffsetToEyeMount(UnityEngine.Vector3@,UnityEngine.Vector3@)">
             <summary>
             输出 VPU 和 EyeMount 的位置偏移和转角偏移。
             </summary>
             <param name="Pos"></param>
             <param name="">Euler</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetConfigedMaxPredictTime(System.Single@)">
             <summary>
             Gets the configed max-predicted time for VIO tracking.
             </summary>
             <param name="maxPredictedTime"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.GetConfigedVIOFallbackTime(System.Single@)">
             <summary>
             Gets the configed value for VIO fallback time queue.
             </summary>
             <param name="fallbacktime"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.ExtractQuaternion(UnityEngine.Matrix4x4)">
             <summary>
             Convert a rotation from matrix4x4. 
             </summary>
             <param name="matrix4x4"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXSystem.RefreshGroundPlanesFusionInfo">
             <summary>
             在Fusion模式下，刷新全局 Ground Plane 设置。
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackedObjectJson">
             <summary>
             Internal object : represents a json file that defines the calibration data path and marker reference.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackedObjectJson.FillDictionary(System.Collections.Generic.Dictionary{System.Int32,Ximmerse.RhinoX.MarkerConfigInfo})">
             <summary>
             Fills the trackable json's content to a dictionary map where key = markerID, value = marker's config info.
             </summary>
             <param name="configurationMap">Configuration map.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RenderEvent">
             <summary>
             Render event : event pass to SVR LLAPI.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.I_ButtonEventTrigger">
             <summary>
             Interface : Button event trigger.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXButtonEventTrigger">
             <summary>
             RhinoX button input event trigger.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXButtonEventTrigger.RxButtonEventTriggerControllerIndex.Left_Controller">
             <summary>
             The controller - left controller.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXButtonEventTrigger.RxButtonEventTriggerControllerIndex.Right_Controller">
             <summary>
             The controller - right controller.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXButtonEventTrigger.OnRhinoXButtonEvent">
             <summary>
             API event : on RhinoX button event of event trigger type.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXButtonEventTrigger.RegisterEvent(Ximmerse.RhinoX.EventTriggerType,UnityEngine.Events.UnityAction{Ximmerse.RhinoX.RhinoXButton})">
             <summary>
             Register a button event.
             </summary>
             <param name="eventTriggerType">Event trigger type.</param>
             <param name="buttonEvent">Button event.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXButtonEventTrigger.UnregisterEvent(Ximmerse.RhinoX.EventTriggerType,UnityEngine.Events.UnityAction{Ximmerse.RhinoX.RhinoXButton})">
             <summary>
             Unregisters the button event.
             </summary>
             <param name="eventTriggerType">Event trigger type.</param>
             <param name="buttonEvent">Button event.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.RXController">
             <summary>
             High level SDK script for developers to access controller data and event, e.g. buttons, gyroscopes, finger point over touch-pad.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.UseExternalControllerUpdater">
             <summary>
             If true, use externalDelegate to update this controller.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.externalDelegate">
             <summary>
             Must not be null when UseExternalControllerUpdater == true.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.controllers">
             <summary>
             All controller instances.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.activeControllers">
             <summary>
             Active controller instances.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.Index">
             <summary>
             Gets or sets the index the controller that this instance pairs to.
             </summary>
             <value>The index.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.m_RaycastOrigin">
             <summary>
             The origin transform for raycasting. Ray starts from this transform's world position, pointing ahead by the forward direction of this transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.m_Raycaster">
             <summary>
             The raycaster component.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsControllerConnected">
             <summary>
             Is the controller of the index connected ?
             </summary>
             <returns><c>true</c>, if controller connected was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsTap(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user taping the specific button ?
             </summary>
             <returns><c>true</c>, if tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsDoubleTap(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user double tapping the button ?
             </summary>
             <returns><c>true</c>, if double tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsButton(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user current pressing the button ?
             </summary>
             <returns><c>true</c>, if press was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsButtonDown(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Returns true during the frame the user starts pressing down the target button.
             </summary>
             <returns><c>true</c>, if press down was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsLongHoldingButton(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Is user long holding the button down ?
             </summary>
             <returns><c>true</c>, if double tap was ised, <c>false</c> otherwise.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsButtonUp(Ximmerse.RhinoX.ControllerButtonCode)">
             <summary>
             Returns true during the frame the user release the target button up.
             </summary>
             <returns>True if the user release the button up.</returns>
             <param name="button">Button.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.GetTouchPadPoint(UnityEngine.Vector2@)">
             <summary>
             Gets the touch pad pointer value, when user's puting finger on touch pad.
             </summary>
             <value>The touch pad point.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.GetTouchPadPoint(Ximmerse.RhinoX.TouchPadButtonDirection@)">
             <summary>
             Gets the touch pad pointer direction value, when user's puting finger on touch pad.
             </summary>
             <value>The touch pad point.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.DebugMode">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXController" /> debug mode.
             If debug mode is on, the RxController's button interaction info would be printed, and the raycaster info will be drawn.
             </summary>
             <value><c>true</c> if debug mode; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.EnableRaycasting">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXController" /> enable raycasting.
             </summary>
             <value><c>true</c> if enable raycasting; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RaycastingType">
             <summary>
             Gets or sets the type of the raycasting.
             </summary>
             <value>The type of the raycasting.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.SphereCastingRadius">
             <summary>
             Gets or sets the sphere casting radius.
             </summary>
             <value>The sphere casting radius.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RaycastCullingMask">
             <summary>
             Gets or sets the raycast culling mask.
             </summary>
             <value>The raycast culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RaycastDistance">
             <summary>
             Gets or sets the raycast distance.
             </summary>
             <value>The raycast distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RenderRay">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXController" /> render ray.
             </summary>
             <value><c>true</c> if render raycasting; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RaycastOrigin">
             <summary>
             Gets or sets the raycast origin transform.
             The origin transform for raycasting. Ray starts from this transform's world position, pointing ahead by the forward direction of this transform.
             </summary>
             <value>The raycast origin.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.raycastResult">
             <summary>
             Gets the raycast result of the frame.
             </summary>
             <value>The raycast result.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.m_RayRenderer">
             <summary>
             The line renderer for rendering the ray.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RayRenderer">
             <summary>
             Gets or sets the line renderer, which is used for rendering the ray.
             </summary>
             <value>The ray renderer.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.RayRendererHitPoint">
             <summary>
             The ray renderer hit point game object.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.IMU_YawAdjust">
             <summary>
             The imu yaw adjust offset error
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.OptimizeTracking">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXController" /> optimize prediciton.
             </summary>
             <value><c>true</c> if optimize prediciton; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.MinTrackedConfidenceUse">
             <summary>
             The minimum tracked confidence use to apply rotation for controller.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.MinTrackedConfidenceRecenterIMU">
             <summary>
             The minimum tracked confidence collect to recenter IMU rotation offset.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.TrackingMode">
             <summary>
             How the controller is being tracked.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXController.eventConnectionStateChange">
             <summary>
             event : on connection state changed
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.PositionOffset">
             <summary>
             The fixed position offset from ARCamera.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.IsRingController">
             <summary>
             Is the Controller currently represents a ring controller ?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.IsTaggedController">
             <summary>
             Is the Controller currently represents a tagged controller ?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.Battery">
             <summary>
             Gets the battery of this controller.
             </summary>
             <value>The battery.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXController.BatteryVoltage">
             <summary>
             Gets the battery voltage of this controller.
             </summary>
             <value>The battery.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.PrintDebugLog">
             <summary>
             Prints the debug log.
             </summary>
             <returns>The debug log.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsActiveControllerPresented">
             <summary>
             Is any active RxController instance presented in current scene.
             </summary>
             <returns><c>true</c>, if active controller presented was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.IsControllerPresented">
             <summary>
             Is any RxController instance presented in current scene ? No matter enable or disable.
             </summary>
             <returns><c>true</c>, if active controller presented was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.GetRay">
             <summary>
             Returns a ray starts from [RaycastOrigin] and points ahead following direction [RaycastOrigin.forward]
             </summary>
             <returns>The ray.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.Viberate(System.Single,System.Single)">
             <summary>
             Vibrate the controller.
             This is the same to RXInput.Vibrate
             Strength should be 0-1.
             VibrateTime is the seconds you want to vibrate.
             </summary>s
             <param name="Strength"></param>
             <param name="VibrateTime"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.GetController(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             Gets scene RxController object by index.
             </summary>
             <param name="Index">If Index.Any, returns the first controller in scene. Else returns by index matching.</param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXController.SimulateInEditor">
             <summary>
             Simulate controller in Editor.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ImageRenderer">
             <summary>
             Image render is normally used for rendering cursor.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.sImagesRenderers">
             <summary>
             All image renderer.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.clipLowerLeft_LeftEye">
             <summary>
             Image display region (camera clip space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.uvLowerLeft_LeftEye">
             <summary>
             Image source region (texture uv space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.clipLowerLeft_RightEye">
             <summary>
             Image display region (camera clip space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.uvLowerLeft_RightEye">
             <summary>
             Image source region (texture uv space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.clipLowerLeft">
             <summary>
             Image display region (camera clip space)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.ImageRenderer.uvLowerLeft">
             <summary>
             Image source region (texture uv space)
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.Image">
             <summary>
             Gets or sets the image.
             </summary>
             <value>The image.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.TexturePtr">
             <summary>
             Gets the texture pointer address.
             </summary>
             <value>The texture ptr.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.ImageRenderer.RenderAt">
             <summary>
             Gets the transform to indicate the render at position , rotation and scale of the image .
             </summary>
             <value>The image local to world matrix.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.List{``0},``0)">
             <summary>
             Adds item if the item not exists in the list.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.HashSet{``0},``0)">
             <summary>
             Adds item if the item not exists in the hashset.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.AddRangeUnduplicate``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Adds items for those not exists in the list.
             </summary>
             <returns>How many items added.</returns>
             <param name="genericList">Generic list.</param>
             <param name="items">Items.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEach``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             Warning: ForEach 中如果传入匿名委托会导致GC !
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachReversed``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a reversed direction (starts from max-index);
             </summary>
             <returns>How many items added.</returns>
             <param name="genericList">Generic list.</param>
             <param name="items">Items.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.Count``1(``0[],``0)">
             <summary>
             Counts how many item exists in genericArray
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.Contains``1(``0[],``0)">
             <summary>
             Contains the specified genericArray and item.
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.FindIndex``1(``0[],``0)">
             <summary>
             Finds the index of item.
             </summary>
             <returns>The index.</returns>
             <param name="array">Array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.Transform,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.GameObject,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PolyEngineLinq.ForEachChildren(UnityEngine.SceneManagement.Scene,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
             <param name="fn">Fn.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.ReticleRaycaster">
             <summary>
             Internal class for reticle raycasting.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRaycaster.IsPointerDown">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer down.
             </summary>
             <value><c>true</c> if is pointer down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRaycaster.IsPointerPressed">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer pressed.
             </summary>
             <value><c>true</c> if is pointer pressed; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRaycaster.IsPointerUp">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer up.
             </summary>
             <value><c>true</c> if is pointer up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRaycaster.IsPointerTap">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.CursorRaycaster" /> is pointer tap.
             </summary>
             <value><c>true</c> if is pointer tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PluginVioFusion">
             <summary>
             Interface for PluginVIO fusion API.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PluginVioFusion.XAttrVIOWorldInBeaconInfo">
             @struct XAttrVIOWorldToBeaconInfo
             @brief 6DOF Information of VIO world-origin in beacon coordinate.
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PluginVioFusion.XAttrTrackingInfo">
             @struct XAttrTrackingInfo
             @brief VPU cammera tracking object pose info.
            </member>
        <member name="T:Ximmerse.RhinoX.I_ExternalControllerSystemDataSource">
             <summary>
             External controller system data provider.
            
             Could be used by Editor Debugger system.
             
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.I_ExternalControllerSystemDataSource.GetButtonState(System.Int32,System.Int32)">
             <summary>
             Gets the button state of the controller index.
             </summary>
             <param name="ControllerIndex"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.I_ExternalControllerSystemDataSource.GetTouchpadState(System.Int32)">
             <summary>
             Gets the touch pad state of the controller index.
             </summary>
             <param name="ControllerIndex"></param>
             <returns></returns>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadState.IsPressing">
             <summary>
             Is user currently pressing the touch pad?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadState.TouchPadPointer">
             <summary>
             The touch pad pointer , if IsPressing == true
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PerfLevel">
             <summary>
             Hardware perforamnce level
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.I_Authentication">
             <summary>
             Interface : authentication.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.I_Authentication.ConfigAppID">
             <summary>
             Gets the config App ID
             </summary>
             <returns>The config app identifier.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.I_Authentication.ConfigDeveloperID">
             <summary>
             Gets the config developer identifier.
             </summary>
             <returns>The config developer identifier.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.I_Authentication.ConfigDeveloperKey">
             <summary>
             Gets the config developer key.
             </summary>
             <returns>The config developer key.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.Pose">
             <summary>
             Structure : position, rotation and time stamp.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PEUtils">
             <summary>
             Polyengine utils.
             PolyEngine 工具类方法。
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UIntFloat.ToDouble(System.UInt64)">
             <summary>
             Converts ulong to double.
             </summary>
             <returns>The double.</returns>
             <param name="value">Value.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.AddToArray``1(``0,``0[])">
             <summary>
             Adds element to an array.
             </summary>
             <returns>The to array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RemoveFromArray``1(System.Int32,``0[])">
             <summary>
             Removes the index from array and return new array
             </summary>
             <returns>The from array.</returns>
             <param name="index">Index.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RemoveFromArray``1(``0,``0[])">
             <summary>
             Removes element from array.
             </summary>
             <returns>The from array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.InsideUnitCircle">
             <summary>
             返回一个 vector3 的 单位元随机向量。
             </summary>
             <returns>The unit circle.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Include``1(``0[],``0)">
             <summary>
             Check if arrays includes the value
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomRange(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get random vector3 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomRange(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Get random vector2 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetPhysicalDistanceOfScreenSpace(System.Single)">
             <summary>
             Gets the distance measured in sreen pixel space. Returned distance is measured in meters.
             </summary>
             <returns>The distance of screen points.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetActualDPI(System.Single@)">
             <summary>
             Gets the actual DPI.
             Always return true if not running on Android.
             When running on android, try getting DPI from native java class, if failed, using Screen.dpi and return false.
             </summary>
             <returns><c>true</c>, if actual DP was gotten, <c>false</c> otherwise.</returns>
             <param name="dpi">Dpi.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetPhysicalScreenSize(System.Single@,System.Single@)">
             <summary>
             Gets the size of the physical screen.
             return false if fail to get current DPI.
             useDensityDpiInAnroid : refer to file:///Applications/Unity/Documentation/en/ScriptReference/Screen-dpi.html
             If useDensityDpiInAnroid = true, use Screen.dpi in calculation, else use native java class interface to get a more precise DPI in calculation.
             </summary>
             <returns><c>true</c>, if physical screen size was gotten, <c>false</c> otherwise.</returns>
             <param name="w">The width.</param>
             <param name="h">The height.</param>
             <param name="useDensityDpiInAnroid">If set to <c>true</c> use density dpi in anroid.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0})">
             <summary>
             Gets a random element from list. 
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ShuffleList``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32})">
             <summary>
             Shuffle a list.
             </summary>
             <param name="list"></param>
             <typeparam name="T"></typeparam>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Boolean)">
             <summary>
             Gets a random element from list.
             if [dropTheIndex] = true, the list will remove the chosen element
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetXZDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetXZSqrDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Sqr Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Exists``1(``0[],``0)">
             <summary>
             Check element exists at array
             </summary>
             <param name="array">Array.</param>
             <param name="element">Element.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.CalculateFacingAngleXZ(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             计算transform.forward到 targetPosition 的夹角。
             只考虑XZ平面的夹角。
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ClampScalar(System.Single,System.Single)">
             <summary>
             Clamps the scalar.
             限制 single 的长度不大于 Scalar， 返回符号 = single 的浮点值.
             </summary>
             <returns>The scalar.</returns>
             <param name="single">Single.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.Clamp(UnityEngine.Rect,UnityEngine.Vector2)">
             <summary>
             Clamps the vect2 in rect bounds.
             </summary>
             <returns>The rect vect2.</returns>
             <param name="rect">Rect.</param>
             <param name="point">Point.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipAngle(System.Single)">
             <summary>
             把一个 0 - 360之间的代表角度的4个长度的float压缩为一个2个长度的 short。
             </summary>
             <returns>The angle.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipDirection(UnityEngine.Vector3)">
             <summary>
             用一个 Vector2 表示一个方向.
             Vector2.x = 方向的Yaw角度。
             Vector2.y = 方向的Pitch角度。
             </summary>
             <returns>The direction.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipDirection(UnityEngine.Quaternion)">
             <summary>
             把 Rotation 压缩成 Vector2. X = Yaw, Y = Pitch, 忽略 Roll
             </summary>
             <returns>The direction.</returns>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UnzipDirection(UnityEngine.Vector2)">
             <summary>
             ZipDirection 的反函数. 把一个压缩过的 Dir 还原.
             只能还原 Yaw 和 Pitch, 不适用于带 Roll 的方向。
             </summary>
             <returns>The direction.</returns>
             <param name="zippedVect">Zipped vect.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ZipXZDirection(UnityEngine.Vector3)">
             <summary>
             压缩一个 Direction : 把Direction投影到XZ面，用一个 Float 表示 XZ 投影向量和 (1,0)的角度
             </summary>
             <returns>The direction flatten.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.UnzipXZDirection(System.Single)">
             <summary>
             ZipXZDirection 的反函数 。 把一个 angle 还原为一个 Vector3 方向.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomExcept``1(``0[],``0)">
             <summary>
             Get a random value from array, the result will exclude %excludeValue% for sure.
             If the array has only one element, then there is no choice - result will be the only element.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.CloneExcept``1(``0[],``0)">
             <summary>
             Clone an array, exclude the "except"
             </summary>
             <param name="array"></param>
             <param name="except"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Component},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest``1(System.Collections.Generic.List{``0},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosestGameObject(System.Collections.Generic.List{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Transform},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindChildByPath(UnityEngine.Transform,System.String,System.Boolean)">
             <summary>
             Finds the child by given path.
             This method supports recursive path .
             </summary>
             <returns>The child path.</returns>
             <param name="parent">Parent.</param>
             <param name="Path">Path. For example: "root/skin/weapon"</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXZDirection(UnityEngine.Vector3,System.Boolean)">
             <summary>
             Convert world direction to xz surface direction.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="direction">Direction.</param>
             <param name="normalized">If set to <c>true</c> normalized.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXYZ(UnityEngine.Vector2,System.Single)">
             <summary>
             Converts XZ vector to XYZ. (Y is pass as parameter, default = 0)
             </summary>
             <returns>The to XY.</returns>
             <param name="xzVector">Xz vector.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXZ(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XZ)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ToXY(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XY)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32,System.Collections.Generic.List{``0}@)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.RandomPointOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
             <summary>
             给出一个 Plane，获取以 Position, Normal 定义的Plane， 半径为radius 的随机点
             </summary>
             <returns>The point on plane.</returns>
             <param name="position">Position.</param>
             <param name="normal">Normal.</param>
             <param name="radius">Radius.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.AlignByChildTransform(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform 和 TargetMatrix 对齐
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.AlignByChildRotation(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Quaternion)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform.rotation 和 TargetRotation 对齐
             此方法只会旋转，不会设置位置。
             </summary>
             <param name="rootTransform"></param>
             <param name="childTransform"></param>
             <param name="TargetRotation"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.TestContain(UnityEngine.Collider,UnityEngine.Vector3)">
             <summary>
             Tests the point is contained inside the collider.
             </summary>
             <returns><c>true</c>, if is contained was tested, <c>false</c> otherwise.</returns>
             <param name="collider">Collider.</param>
             <param name="Position">Position.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteFloat(System.Single,System.Byte[],System.Int32)">
             <summary>
             Writes the float to the buffer from start index, length = 4.
             </summary>
             <param name="floatValue">Float value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadFloat(System.Byte[],System.Int32)">
             <summary>
             Reads the float from buffer at start index, length = 4.
             </summary>
             <returns>The float.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector2(UnityEngine.Vector2,System.Byte[],System.Int32)">
             <summary>
             Writes the vector2 to the buffer from start index, length = 8.
             </summary>
             <param name="vect2">Vector2 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector2(System.Byte[],System.Int32)">
             <summary>
             Reads the vector2 from buffer at start index, length = 8.
             </summary>
             <returns>The vector2.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector3(UnityEngine.Vector3,System.Byte[],System.Int32)">
             <summary>
             Writes the vector3 to the buffer from start index, length = 12.
             </summary>
             <param name="vect3">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector3(System.Byte[],System.Int32)">
             <summary>
             Reads the vector3 from buffer at start index, length = 12
             </summary>
             <returns>The vector3.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteVector4(UnityEngine.Vector4,System.Byte[],System.Int32)">
             <summary>
             Writes the vector4 to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteQuaternion(UnityEngine.Quaternion,System.Byte[],System.Int32)">
             <summary>
             Writes the quaternion to the buffer from start index, length = 16.
             </summary>
             <param name="q">Quaternion value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadVector4(System.Byte[],System.Int32)">
             <summary>
             Reads the vector4 from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadQuaternion(System.Byte[],System.Int32)">
             <summary>
             Reads the quaternion from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteInt(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Writes the int to the buffer from start index, length = 4.
             </summary>
             <param name="intValue">Int value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadInt(System.Byte[],System.Int32)">
             <summary>
             Reads the int from buffer at start index, length = 4
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadUInt64(System.Byte[],System.Int32)">
             <summary>
             Reads a ulong from buffer.
             </summary>
             <returns>The long.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.ReadDouble(System.Byte[],System.Int32)">
             <summary>
             Reads the double from buffer at start index, length = 8
             </summary>
             <returns>The double.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteULong(System.UInt64,System.Byte[],System.Int32)">
             <summary>
             Write the specified ulong value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEUtils.WriteDouble(System.Double,System.Byte[],System.Int32)">
             <summary>
             Writes the double.
             </summary>
             <param name="value">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.InternalControllerIndex">
             <summary>
             Controller Index.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.GroundPlaneAlgorithm">
             <summary>
             定义 Ground plane 定位的算法版本
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlaneAlgorithm.Fusion">
             <summary>
             新的fusion库中的版本
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlaneAlgorithm.Legacy">
             <summary>
             旧的 CSharp 实现版本
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RhinoXGlobalSetting">
             <summary>
             Rhino X SDK global setting. Should be placed in folder: Assets/Plugins/RhinoX/Resources.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Instance">
             <summary>
             Gets the global RhinoX sdk setting instance.
             </summary>
             <value>The instance.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RhinoXGlobalSetting.Initialize">
             <summary>
             Initialize this instance.
             </summary>
             <returns>The initialize.</returns>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.svrPredictMaxTimeMilliSecond">
             <summary>
             svr 头显预测时间。
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.SvrPredictMaxTimeMilliSecond">
             <summary>
             The max prediciton time in milli-seconds.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.groundPlaneAlgorithm">
             <summary>
             The max prediciton time in milli-seconds.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.debugDrawShader">
             <summary>
             Gets the debug draw shader.
             </summary>
             <value>The debug draw shader.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.viewFrustum">
             <summary>
             Gets the view frustum.
             </summary>
             <value>The view frustum.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.DefaultRectileImage">
             <summary>
             Gets the default rectile image.
             </summary>
             <value>The default rectile.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.SingleTapThreshold">
             <summary>
             Gets or sets the threshold time for single tap.
             </summary>
             <value>The single tap threshold.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.DoubleTapThreshold">
             <summary>
             Gets or sets the threshold time for double tap.
             </summary>
             <value>The double tap threshold.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.LongHeldThreshold">
             <summary>
             Gets or sets the threshold time for triggering long held button event.
             </summary>
             <value>The long holding threshold.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.m_TrackingItem_RightController">
             <summary>
             The builtin tracking item of right controller
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.TrackingItem_RightController">
             <summary>
             Gets the default tracking item for right controller.
             </summary>
             <value>The tracking item controller.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.m_TrackingItem_LeftController">
             <summary>
             The builtin tracking item of left controller
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.TrackingItem_LeftController">
             <summary>
             Gets the default tracking item for left controller.
             </summary>
             <value>The tracking item controller.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.m_TrackingItem_Beacons">
             <summary>
             The builtin tracking item of beacons
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.TrackingItem_Beacons">
             <summary>
             Gets the default tracking item beacons.
             </summary>
             <value>The tracking item beacons.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.EyePitch">
             <summary>
             Gets or sets the eye pitch.
             </summary>
             <value>The eye pitch.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.AntiAliasingLevel">
             <summary>
             Gets or sets the anti-aliasing level.
             </summary>
             <value>The anti aliasing.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.ControllerRotationFusionMode">
             <summary>
             Gets or sets the controller rotation fusion mode.
             </summary>
             <value>The controller rotation fusion mode.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Custom_Len_Parameter">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RhinoXGlobalSetting" /> using custom optics parameter.
             </summary>
             <value><c>true</c> if force 2 0 length parameter; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Len_2_0_EyePitch">
             <summary>
             Gets the eye pitch for Len 2.0
             </summary>
             <value>The length 2 0 eye pitch.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Len_2_0_VPUEulerPitch">
             <summary>
             Gets the VPU offset for len 2.0
             </summary>
             <value>The manual VPUO ffset.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.OverrideVIOAnchorOffset">
             <summary>
             Gets the overrided VIO anchor offset.
             </summary>
             <value>The VIOA nchor offset.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.OverrideVPUAlignment">
             <summary>
             If true, override the factory calibrated alignment data  
             </summary>
             <value><c>true</c> if override VPUA lignment; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Drift_recenter_angle_threshold">
             <summary>
             The drift angle threshold of ground plane's recenter algorithm.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Drift_recenter_distance_threshold">
             <summary>
             The drift distance threshold of ground plane's recenter algorithm.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Max_distance_threshold">
             <summary>
             The max tracked distance threshold of ground plane's recenter algorithm.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RhinoXGlobalSetting.Min_distance_threshold">
             <summary>
             The min tracked distance threshold of ground plane's recenter algorithm.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.VersionCheckURL">
             <summary>
             URL for automating checks SDK version 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.SDKRepoURL">
             <summary>
             URL for browsing latest SDK codes.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXGlobalSetting.SDKManualURL">
             <summary>
             URL for browsing latest SDK manual.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.EventTriggerType">
             <summary>
             Event trigger type.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickConfirmButton">
             <summary>
             Event : a single click on confirm button, which is the button on RhinoX's side-bar.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnDoubleClickConfirmButton">
             <summary>
             Event : double click on confirm button, which is the button on RhinoX's side-bar.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyDownConfirmButton">
             <summary>
             Event : key down event on the frame while pressing down confirm button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyUpConfirmButton">
             <summary>
             Event : key up event on the frame while pressing down confirm button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyHeldConfirmButton">
             <summary>
             Event : while confirm button is pressed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyLongHeldConfirmButton">
             <summary>
             Event : key long held down event on the confirm button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTriggerButton">
             <summary>
             Event : a single click on trigger button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnDoubleClickTriggerButton">
             <summary>
             Event : double click on trigger button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyDownTriggerButton">
             <summary>
             Event : key down event on the frame while pressing down trigger button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyUpTriggerButton">
             <summary>
             Event : key up event on the frame while pressing down trigger button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyHeldTriggerButton">
             <summary>
             Event : while trigger button is pressed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyLongHeldTriggerButton">
             <summary>
             Event : key long held down event on the trigger button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTouchPadButton">
             <summary>
             Event : a single click on touch pad button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnDoubleClickTouchPadButton">
             <summary>
             Event : double click on touch pad button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyDownTouchPadButton">
             <summary>
             Event : key down event on the frame while pressing down touch pad button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyUpTouchPadButton">
             <summary>
             Event : key up event on the frame while pressing down touch pad button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyHeldTouchPadButton">
             <summary>
             Event : while touch pad button is pressed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyLongHeldTouchPadButton">
             <summary>
             Event : key long held down event on the touch pad button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickHomeButton">
             <summary>
             Event : a single click on home button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnDoubleClickHomeButton">
             <summary>
             Event : double click on home button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyDownHomeButton">
             <summary>
             Event : key down event on the frame while pressing down home button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyUpHomeButton">
             <summary>
             Event : key up event on the frame while pressing down home button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyHeldHomeButton">
             <summary>
             Event : while home button is pressed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyLongHeldHomeButton">
             <summary>
             Event : key long held down event on the home button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickAppButton">
             <summary>
             Event : a single click on App button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnDoubleClickAppButton">
             <summary>
             Event : double click on App button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyDownAppButton">
             <summary>
             Event : key down event on the frame while pressing down App button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyUpAppButton">
             <summary>
             Event : key up event on the frame while pressing down App button. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyHeldAppButton">
             <summary>
             Event : while App button is pressed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnKeyLongHeldAppButton">
             <summary>
             Event : key long held down event on the App button.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTouchPadAtTop">
             <summary>
             Event : click touch pad and hit the top area.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTouchPadAtRight">
             <summary>
             Event : click touch pad and hit the right area.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTouchPadAtLeft">
             <summary>
             Event : click touch pad and hit the left area.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.EventTriggerType.OnClickTouchPadAtBottom">
             <summary>
             Event : click touch pad and hit the bottom area.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerRawAxis">
             \enum ControllerRawAxis
             \brief Device raw axis definition
             \see https://msdn.microsoft.com/en-us/library/windows/apps/microsoft.directx_sdk.reference.xinput_gamepad
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerRawButton">
             \enum ControllerRawButton
             \brief Device raw button definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerAxis">
             \enum ControllerAxis
             \brief Controller axis definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ControllerButton">
             \enum ControllerButton
             \brief Controller Button definition
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.DeviceConnectionState">
             \enum DeviceConnectionState
             \brief The connection status of the host to the device
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Disconnected">
             <summary>
             Indicates that the device is disconnected.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Scanning">
             <summary>
             Indicates that the host is scanning for devices.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Connecting">
             <summary>
             Indicates that the device is connecting.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Connected">
             <summary>
             Indicates that the device is connected.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceConnectionState.Error">
             <summary>
             Indicates that an error has occurred.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.TrackingResult">
             \enum TrackingResult
             \brief Tracking status
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.RotationTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PositionTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PoseTracked-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.RotationEmulated-->
        <!--FIXME: Invalid documentation markup was found for member F:Ximmerse.RhinoX.Internal.TrackingResult.PositionEmulated-->
        <member name="T:Ximmerse.RhinoX.Internal.XimmerseButton">
             \enum XimmerseButton
             \brief Tracking status
            </member>
        <!--FIXME: Invalid documentation markup was found for member F:SXR.ParamType.Render_EyeBufferWidth_INT-->
        <!--FIXME: Invalid documentation markup was found for member F:SXR.ParamType.Design_VPU_UseFixedRotateDownward_BOOL-->
        <!--FIXME: Invalid documentation markup was found for member F:SXR.ParamType.Track_VIO_MaxPredictTime_FLOAT-->
        <member name="T:Ximmerse.RhinoX.DeviceController">
             <summary>
             RhinoX Device interface controller.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceController.SetColor(UnityEngine.Color)">
             <summary>
             Sets the LED light color.
             </summary>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PoseFrame">
             <summary>
             pose frame data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityTime">
             <summary>
             The unity time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityFrame">
             <summary>
             The unity frame.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.unityDeltaTime">
             <summary>
             The untiy delta time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.isRecenterFrame">
             <summary>
             Is this frame recentering VIO ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headTrackedPredictedPosition">
             <summary>
             The head tracked output predicted position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headTrackedPredictedRotation">
             <summary>
             The head tracked output predicted rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headPredictPosition">
             <summary>
             The head world position at the frame. This is predict value.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.headPredictRotation">
             <summary>
             The head world rotation at the frame
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.trackingAnchorPredictedPosition">
             <summary>
             The tracking anchor world position, base on predict VIO pose
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.PoseFrame.trackingAnchorPredictedRotation">
             <summary>
             The tracking anchor world rotation, base on predict VIO pose
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SearchFrameOutput">
             <summary>
             Output of VIO frame when searching vio frame by time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.Lerp">
             <summary>
             Lerp value between the two frames where the target time falls in
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.FramesAfter">
             <summary>
             Output the cache frame after the search time
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SearchFrameOutput.FrameBefore">
             <summary>
             Output the cache frame before the search time
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PoseQueue">
             <summary>
             This class cache pose data in a queue, provide access to look VIO frames backward.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.PushFrame(Ximmerse.RhinoX.Internal.PoseFrame)">
             <summary>
             Pushs a new frame into the queue at the last index.
             If all of the queue's frames's total time reaches max cache time, the earlies frame will be droped.
             </summary>
             <param name="newFrame">New frame.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.SearchBackwardTime(System.Single,Ximmerse.RhinoX.Internal.PoseFrame@,Ximmerse.RhinoX.Internal.SearchFrameOutput)">
             <summary>
             Searchs historic pose frame from the current time backward N seconds.
             </summary>
             <returns><c>true</c>, if backward time was searched, <c>false</c> otherwise.</returns>
             <param name="backwardSeconds">Backward seconds.</param>
             <param name="frame">Frame.</param>
             <param name="search">Search.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.SearchBackwardFrame(System.Int32,Ximmerse.RhinoX.Internal.PoseFrame@)">
             <summary>
             Searchs pose frame data in N frames backward and calculate delta
             </summary>
             <returns><c>true</c>, if backward frame was searched, <c>false</c> otherwise.</returns>
             <param name="backwardFrame">Backward frame.</param>
             <param name="frame">Frame.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PoseQueue.GetLatest(System.Int32)">
             <summary>
             Gets the latest pose frame.
             </summary>
             <returns>The latest.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOEventType">
             <summary>
             AIO device event type.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOThermalLevel">
             <summary>
             thermal level : which level the thermal event indicates.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOThermalZone">
             <summary>
             For kEventThermal event : which area does the thermal event points to.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AIOEvent">
             <summary>
             AIO event : device status event. Application may catch this event for device management.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SVR_Android">
             <summary>
             Internal class for SVR android runtime interfaces.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.Initialize">
             <summary>
             A local variables to indicate if the SVR android system has been up and running.
             </summary>
             <value><c>true</c> if is svr running; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.IssueEvent(Ximmerse.RhinoX.Internal.RenderEvent)">
             <summary>
             Dispatch GL event to SVR low level API.
             </summary>
             <param name="e">LL Event</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.BeginEye(System.Int32)">
             <summary>
             Notify SVR LLAPI to begin on eye buffer
             </summary>
             <param name="side">Side value, left = 1, right = 2</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetTrackingMode(System.Boolean)">
             <summary>
             Sets the tracking mode.
             </summary>
             <param name="TrackingPosition">true if need positional tracking.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetVSyncCount(System.Int32)">
             <summary>
             Sets the V-sync count.
             </summary>
             <param name="vSyncCount">V-sync count, must be 1 or 2</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.EndEye(System.Int32)">
             <summary>
             Notify SVR LLAPI when eye rendering end-of-frame event.
             </summary>
             <param name="side">Side: left = 1, right = 2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.PollEvent(Ximmerse.RhinoX.Internal.SvrEvent@)">
             <summary>
             Polls LLAPI event to high level codes.
             </summary>
             <returns><c>true</c>, if event was polled, <c>false</c> otherwise.</returns>
             <param name="frameEvent">Frame event.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetTrackingMode">
             <summary>
             Gets the tracking mode.
             </summary>
             <returns>The tracking mode.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetPredictHeadPose(Ximmerse.RhinoX.Pose@,System.Int32)">
             <summary>
             Gets the head pose.
             </summary>
             <returns>The head pose.</returns>
             <param name="headPose">Head pose.</param>
             <param name="frameIndex">Frame index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetHeadPose(Ximmerse.RhinoX.Pose@)">
             <summary>
             Gets the head pose.
             </summary>
             <returns>The head pose.</returns>
             <param name="headPose">Head pose.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetFoveationValues(Ximmerse.RhinoX.Internal.FoveationLevel)">
             <summary>
             Gets the foveation values.
             </summary>
             <returns>The foveation values.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.ApplyFoveation">
             <summary>
             Applies the foveation parameter
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetCustomConfigU(System.Int32)">
             <summary>
             Svr LLAPI : set custom config
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrInitializeEventData(System.IntPtr)">
             <summary>
             Svr LLAPI : initialize android event data
             </summary>
             <param name="activity">Activity.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetRenderEventFunc">
             <summary>
             Svr LLAPI : return native renderer event entrance
             </summary>
             <returns>The render event func.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrIsInitialized">
             <summary>
             Svr : initialize SVR 
             </summary>
             <returns><c>true</c>, if is initialized was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetDeviceInfo(System.Int32@,System.Int32@,System.Single@,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Return native device info.
             </summary>
             <param name="displayWidthPixels">Display width pixels.</param>
             <param name="displayHeightPixels">Display height pixels.</param>
             <param name="displayRefreshRateHz">Display refresh rate hz.</param>
             <param name="targetEyeWidthPixels">Target eye width pixels.</param>
             <param name="targetEyeHeightPixels">Target eye height pixels.</param>
             <param name="targetFovXRad">Target fov XR ad.</param>
             <param name="targetFovYRad">Target fov YR ad.</param>
             <param name="leftFrustumLeft">Left frustum left.</param>
             <param name="leftFrustumRight">Left frustum right.</param>
             <param name="leftFrustumBottom">Left frustum bottom.</param>
             <param name="leftFrustumTop">Left frustum top.</param>
             <param name="leftFrustumNear">Left frustum near.</param>
             <param name="leftEyeFrustumFar">Left eye frustum far.</param>
             <param name="rightFrustumLeft">Right frustum left.</param>
             <param name="rightFrustumRight">Right frustum right.</param>
             <param name="rightFrustumBottom">Right frustum bottom.</param>
             <param name="rightFrustumTop">Right frustum top.</param>
             <param name="rightFrustumNear">Right frustum near.</param>
             <param name="rightFrustumFar">Right frustum far.</param>
             <param name="targetfrustumConvergence">Targetfrustum convergence.</param>
             <param name="targetFrustumPitch">Target frustum pitch.</param>
             <param name="lowFoveationGainX">Low foveation gain x.</param>
             <param name="lowFoveationGainY">Low foveation gain y.</param>
             <param name="lowFoveationArea">Low foveation area.</param>
             <param name="lowFoveationMinimum">Low foveation minimum.</param>
             <param name="medFoveationGainX">Med foveation gain x.</param>
             <param name="medFoveationGainY">Med foveation gain y.</param>
             <param name="medFoveationArea">Med foveation area.</param>
             <param name="medFoveationMinimum">Med foveation minimum.</param>
             <param name="highFoveationGainX">High foveation gain x.</param>
             <param name="highFoveationGainY">High foveation gain y.</param>
             <param name="highFoveationArea">High foveation area.</param>
             <param name="highFoveationMinimum">High foveation minimum.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetupLayerCoords(System.Int32,System.Single[],System.Single[],System.Single[],System.Single[])">
             <summary>
             Svr LLAPI: setup layer mesh's coords
             </summary>
             <param name="layerIndex">Layer index.</param>
             <param name="lowerLeft">Lower left.</param>
             <param name="lowerRight">Lower right.</param>
             <param name="upperLeft">Upper left.</param>
             <param name="upperRight">Upper right.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetupLayerData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Svr LLAPI : setup rendering layer data.
             </summary>
             <param name="layerIndex">Layer index.</param>
             <param name="sideMask">Side mask.</param>
             <param name="textureId">Texture identifier.</param>
             <param name="textureType">Texture type.</param>
             <param name="layerFlags">Layer flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetPerformanceLevelsEventData(System.Int32,System.Int32)">
             <summary>
             Svr set hardware performance level : cpu and gpu.
             </summary>
             <param name="newCpuPerfLevel">New cpu perf level.</param>
             <param name="newGpuPerfLevel">New gpu perf level.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetColorSpace(System.Int32)">
             <summary>
             Svr LLAPI : Set color space . 0 = Gamma, 1 = Linear
             </summary>
             <param name="colorSpace">Color space.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrCanBeginVR">
             <summary>
             Query lower system, can begin VR now ?
             </summary>
             <returns><c>true</c>, if can begin vr was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrIsRunning">
             <summary>
             Native API : Is Svr currently running ?
             </summary>
             <returns><c>true</c>, if is running was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrRecenterTrackingPose(System.Boolean)">
             <summary>
             Native API : Recenter SVR tracking pose
             </summary>
             <returns><c>true</c>, if recenter tracking pose was svred, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrResetVR">
             <summary>
             Reset SVR VIO.
             </summary>
             <returns>The reset vr.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetFoveationParameters(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Native API : Svr set eye foveation parameter.
             </summary>
             <param name="textureId">Texture identifier.</param>
             <param name="previousId">Previous identifier.</param>
             <param name="focalPointX">Focal point x.</param>
             <param name="focalPointY">Focal point y.</param>
             <param name="foveationGainX">Foveation gain x.</param>
             <param name="foveationGainY">Foveation gain y.</param>
             <param name="foveationArea">Foveation area.</param>
             <param name="foveationMinimum">Foveation minimum.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetFrameOffset(System.Single[])">
             <summary>
             Native API : set frame offset.
             </summary>
             <param name="delta">Delta.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetEyeEventData(System.Int32,System.Int32)">
             <summary>
             Native API : set eye event data.
             </summary>
             <param name="sideMask">Side mask.</param>
             <param name="layerMask">Layer mask.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrPollEvent(System.Int32@,System.UInt32@,System.Single@,System.Int32,System.UInt32[])">
             <summary>
             Native API : poll event from LLAPI.
             </summary>
             <returns><c>true</c>, if poll event was svred, <c>false</c> otherwise.</returns>
             <param name="eventType">Event type.</param>
             <param name="deviceId">Device identifier.</param>
             <param name="eventTimeStamp">Event time stamp.</param>
             <param name="eventDataCount">Event data count.</param>
             <param name="eventData">Event data.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetTrackingMode">
             <summary>
             Native API : get tracking mode from LLAPI
             </summary>
             <returns>The get tracking mode.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetPredictedPose(System.UInt64@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32,System.Boolean)">
             <summary>
             Native API : get VIO output pose.
             </summary>
             <returns>The get predicted pose.</returns>
             <param name="timeStampNs">Time stamp ns.</param>
             <param name="rx">Rx.</param>
             <param name="ry">Ry.</param>
             <param name="rz">Rz.</param>
             <param name="rw">Rw.</param>
             <param name="px">Px.</param>
             <param name="py">Py.</param>
             <param name="pz">Pz.</param>
             <param name="frameIndex">Frame index.</param>
             <param name="isMultiThreadedRender">If set to <c>true</c> is multi threaded render.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetHeadPose(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Svrs the get head pose (non predict).
             </summary>
             <returns>The get head pose.</returns>
             <param name="rx">Rx.</param>
             <param name="ry">Ry.</param>
             <param name="rz">Rz.</param>
             <param name="rw">Rw.</param>
             <param name="px">Px.</param>
             <param name="py">Py.</param>
             <param name="pz">Pz.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSubmitFrameEventData(System.Int32,System.Single,System.Int32)">
             <summary>
             Submit frame event data.
             </summary>
             <param name="frameIndex">Frame index.</param>
             <param name="fieldOfView">Field of view.</param>
             <param name="frameType">Frame type.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetTrackingModeEventData(System.Int32)">
             <summary>
             LLAPI : Sets tracking mode.
             </summary>
             <param name="mode">Mode.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetMaxPredictionTime(System.Single)">
             <summary>
             LLAPI : set max prediction time in milli-seconds.
             </summary>
             <param name="MaxPredictionTimeMM">Max prediction time mm.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetMaxPredictionTime">
             <summary>
             LLAPI : get max prediction time in milli-seconds.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrSetVSyncCount(System.Int32)">
             <summary>
             LLAPI : set vsync count.
             </summary>
             <param name="vSyncCount">V sync count.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrGetWarpMeshOffset(System.Single@,System.Single@,System.Single@)">
             <summary>
             LLAPI : get warp mesh offset (X for horizontal offset and Y for vertical offset)
             </summary>
             <param name="offsetXL">Offset x - left.</param>
             <param name="offsetXR">Offset x - right.</param>
             <param name="offsetY">Offset y.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrUpdateWarpMesh(System.Single,System.Single,System.Single)">
             <summary>
             LLAPI : sets warp mesh offset 
             </summary>
             <param name="OffsetX_Left">Offset x.</param>
             <param name="OffsetX_Right">Offset x.</param>
             <param name="OffsetY">Offset y.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetSvrTimeNano">
             <summary>
             LLAPI : gets low level time system.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.GetPredictedDisplayTime">
             <summary>
             LLAPI : gets predicted display time.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.svrGetPredictedDisplayTimePipelined(System.Int32)">
             <summary>
             LLAPI : svr gets predicted display time pipelined.
             </summary>
             <param name="depth"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SetRenderThreadAttributesByType(System.Boolean)">
             <summary>
             LLAPI : sets main thread priority.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.SVR_Android.SvrRecenterOrientation(System.Boolean)">
             <summary>
             LLAPI : recenter orientation.
             </summary>
             <param name="YawOnly">If set to <c>true</c>, only recenter yaw.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackableBehaviour">
             <summary>
             The basic abstract class of trackable beahviour . 
             DynamicTarget and GroundPlane inherits from this script.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ARCamera">
             <summary>
             AR camera is the script that represents virtual camera in AR world.
             Developer may get the position/rotation of current head transform.
             </summary>
             <summary>
             AR camera : rendering
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ARCamera.OnCreateStereoCameras">
             <summary>
             Event is fired after stereo eyes are created.
             Developers can add post effect scripts on this event.
             First camera parameter = left eye camera;
             Second camera parameter = right eye camera;
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ARCamera.PreSubmitFrameImage">
             <summary>
             Event is fired before submitting both frame images to low level ATW renderer.
             Developers can hook up these event for image processing like post-processing images, video recording..etc.
             The 1st parameter is left eye, 2nd is right eye.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ARCamera.OnRhinoXSDKInitialized">
             <summary>
             Event is fired after the RhinoX SDK is initialized.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.EyePitch">
             <summary>
             Gets or sets the eye pitch, this is eye's pitch euler angle around local X axis.
             </summary>
             <value>The eye pitch.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.interPupilDistance">
             <summary>
             IPD : default value is 62mm
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.InterPupilDistance">
             <summary>
             IPD : inter pupil distance.
             Most common value is 0.062 (62mm), developer may customize this value .
             </summary>
             <value>The inter pupil distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackPosition">
             <summary>
             Should track position ? If set to use, position of head would not be updated by SDK.
             </summary>
             <value><c>true</c> if shoud track position; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackRotation">
             <summary>
             Should track rotation ? If set to use, rotation of head would not be updated by SDK.
             </summary>
             <value><c>true</c> if shoud track position; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.IsARBegan">
             <summary>
             Returns true if internal AR engine's began.
             AR begin means: 
             - Head tracking engine starts.
             - Stereo eye rendering and time wrap thread starts.
             - Object tracking engine starts.
             </summary>
             <value><c>true</c> if is ARB egan; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.leftEye">
             <summary>
             Non serialized transforms : eye mount (parent to left and right eye).
             left eye and right eye.
             EyeMount : parent to left and right eye transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.lEyeRenderer">
             <summary>
             Left eye renderer and right eye renderer.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.EyeMount">
             <summary>
             Gets the eye center node.
             </summary>
             <value>The left eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.LeftEyeNode">
             <summary>
             Gets the left eye transform.
             </summary>
             <value>The left eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.RightEyeNode">
             <summary>
             Gets the right eye transform.
             </summary>
             <value>The right eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.LeftOverlayEyeNode">
             <summary>
             Gets the left overlay eye transform.
             </summary>
             <value>The left eye node.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.RightOverlayEyeNode">
             <summary>
             Gets the right overlay eye transform.
             </summary>
             <value>The right eye node.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.trackingAnchor">
             <summary>
             Tracking anchor : Center, left, right.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.reverseEyeCenterP">
             <summary>
             P and Q for getting head world P and Q by tracking anchor (center T)'s global P and Q.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.vioPredictHeadPose">
             <summary>
             Internal field : head pose (predict)
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.HeadPose">
             <summary>
             Head pose (non predict)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.poseQueue">
             <summary>
             pose queue for cache a short time period for backward tracing.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.frameCount">
             <summary>
             The frame count.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.poseStatus">
             <summary>
             The frame pose status.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.IsSupported">
             <summary>
             Is the codes running on supported platform ?
             </summary>
             <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.IsObjectTrackingEnabled">
             <summary>
             Is the object tracking functions up and running ?
             </summary>
             <value><c>true</c> if is object tracking enabled; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.TrackingProfile">
             <summary>
             Gets the currently loaded tag tracking profile.
             Sets this variable will cause the previous profile been unloaded, then the new one will be loaded.
             </summary>
             <value>The tracking profile.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.trackingEngine">
             <summary>
             The ximmerse AIO device config. Config device instance differences.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.DebugView">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.ARCamera" /> debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnApplicationPause(System.Boolean)">
             <summary>
             Application event : on application pause
             </summary>
             <param name="pause">If set to <c>true</c> pause.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnApplicationQuit">
             <summary>
             Application event : on application quit
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.InitializeSVR">
             <summary>
             Initialize the SVR LLSys.
             </summary>
             <returns>The initialize.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.InitializeXDeviceLib">
             <summary>
             Initialize xdevice library.
             </summary>
             <returns>The XD evice.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.BeginAR">
             <summary>
             Begin AR : starts VIO.
             </summary>
             <returns>The ar.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ShutdownSVR">
             <summary>
             Shutdown SVR LLAPI.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.RecenterTracking(System.Boolean)">
             <summary>
             Recenters the tracking.
             </summary>
             <returns><c>true</c>, if tracking was recentered, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ResetTracking">
             <summary>
             Reset 6DOF head tracking.
             Note : this method restart VIO tracking system internally. Head tracking will total lose in 0.5-1 second.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SearchFrameBackward(System.Single,Ximmerse.RhinoX.Internal.PoseFrame@)">
             <summary>
             Searchs a frame in backward time.
             </summary>
             <returns>The frame backward.</returns>
             <param name="backwardTime">Backward time.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SetObjecTrackingProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Changes object tracking profile runtime, the previous tracking profile, if not null, will be unloaded. 
             If object tracking not enabled at the time when called, return false, and tracking profile property not change.
             If change tracking profile successfully, return true, and tracking profile property will be changed.
             </summary>
             <returns><c>true</c>, if objec tracking profile was set, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.LoadTrackingFile(System.String)">
             <summary>
             Loads a json file from file path.
             </summary>
             <param name="jsonFilePath"></param>
             <returns></returns>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.EnableReticle">
             <summary>
             Should enable reticle ? If true, reticle is rendered, and reticle raycaster is enable. 
             If false, rectile is not rendered and reticle raycaster is disable.
             </summary>
             <value><c>true</c> if render reticle; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.ReticleImage">
             <summary>
             Gets or sets the reticle image.
             </summary>
             <value>The reticle image.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.ReticleInteractMask">
             <summary>
             Gets or sets the Reticle raycaster's interactable game object culling mask.
             </summary>
             <value>The interact object mask.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.CreateReticle">
             <summary>
             Creates the reticle component.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.GetReticleRay">
             <summary>
             Gets a ray represents the reticle raycaster's raycasting direction.
             </summary>
             <returns>The reticle ray.</returns>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.event_beginCameraRendering">
             <summary>
             Reflection method info : begin camera rendering event (add/remove)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.requireRenderingPipeline">
             <summary>
             If the current unity version supports rendering pipeline event ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.kLightCenter_X">
             <summary>
             const projection matrix vertical offset (the m02 field of the projection matrix).
             This is the light center offset X
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ARCamera.kLightCenter_Y">
             <summary>
             const projection matrix vertical offset (the m12 field of the projection matrix).
             This is the light center offset Y
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SupportRenderingPipeline">
             <summary>
             Codes for unity scriptable rendering pipeline.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.OnDestroyRendering">
             <summary>
             On destroy for rendering
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.__OnPipelinePreRender(UnityEngine.Camera)">
             <summary>
             Scriptable-Pipeline-Renderer event : on pre-rendering.
             </summary>
             <param name="__camera">Camera.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.CreateEyesAndTrackingAnchors">
             <summary>
             Creates left, right cameras.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.CreateEyeRenderers">
             <summary>
             Create eye renderers
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.UpdateEyesTransform">
             <summary>
             Update eyes position/rotation
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.UpdateEyeFrustum">
             <summary>
             Updates the eye camera's view frustum.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.GetFoveationValues">
             <summary>
             Gets the foveation values.
             </summary>
             <returns>The foveation values.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.hFov">
             <summary>
             Gets the horizontal field of view.
             By default this value = 77.091.
             </summary>
             <value>The h fov.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ARCamera.vFov">
             <summary>
             Gets the vertical field of view.
             By default this value = 77.091.
             </summary>
             <value>The v fov.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SetFov(System.Single,System.Single)">
             <summary>
             Sets the horizontal and vertical fov.
             </summary>
             <returns>The fov.</returns>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.ResetFov">
             <summary>
             Resets the horizontal and vertical fov.
             Default value : hFov = 77.099 , hFov = 77.099
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SetCullingMask(UnityEngine.LayerMask)">
             <summary>
             Sets the left and right eye's culling mask.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ARCamera.SetOverlayCullingMask(UnityEngine.LayerMask)">
             <summary>
             Sets the left and right Overlay eye's culling mask.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXRaycaster">
             <summary>
             Rhino-X raycaster.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.IsControllerRay">
             <summary>
             Is this raycaster a controller ray ?
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.RaycastingType">
             <summary>
             Gets / sets the type of the raycasting.
             </summary>
             <value>The type of the raycasting.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.m_RaycasterOrigin">
             <summary>
             The raycast origin
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.Focus">
             <summary>
             Gets the focus gameobject that this raycaster is current targeting.
             </summary>
             <value>The focus.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.m_LatestHit">
             <summary>
             The latest hit gameObject
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.LatestHit">
             <summary>
             Gets the latest hit gameobject that this raycaster is current targeting.
             </summary>
             <value>The focus.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.CullingMask">
             <summary>
             Culling mask of interaction object. By default, interaction with Ui object.
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.RaycastDistance">
             <summary>
             Raycast distance
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.SphereCastingRadius">
             <summary>
             Gets or sets the sphere casting radius.
             </summary>
             <value>The sphere casting radius.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.ControllerIndex">
             <summary>
             Controller index that this raycaster bounds to .
             </summary>
             <value>The controller identifier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycaster.rayCastHitInfo">
             <summary>
             The raycast hit info.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.AcceptAnyControllerButton">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> accept any controller button.
             </summary>
             <value><c>true</c> if accept any controller button; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerDown">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer down.
             </summary>
             <value><c>true</c> if is pointer down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerUp">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer up.
             </summary>
             <value><c>true</c> if is pointer up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerTap">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer tap.
             </summary>
             <value><c>true</c> if is pointer tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.IsPointerPressed">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.RXRaycaster" /> is pointer pressed.
             </summary>
             <value><c>true</c> if is pointer pressed; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.RaycasterOrigin">
             <summary>
             Gets or sets the raycaster origin transform.
             </summary>
             <value>The raycaster origin.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycaster.RenderRay">
             <summary>
             If true, render the ray with default GL draw method.
             </summary>
             <value><c>true</c> if render default ray; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RXRaycaster.PhysicsCasting(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.LayerMask,Ximmerse.RhinoX.RXRaycastInfo@,System.Single)">
             <summary>
             Do physics casting.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerTrackingMode">
             <summary>
             How the controller is being tracked
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerTrackingMode.DOF_6">
             <summary>
             6Dof tracking, rotation and position of controller will be update
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerTrackingMode.DOF_3">
             <summary>
             3Dof tracking, only rotation of controller will be update, position update with ARCamera + offset
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RxGunInternal">
             <summary>
             RhinoX gun internal.
             Ensure the gun connection.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.Internal.RxGunInternal.OnConnected">
             <summary>
             Event : on gun is connect
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.Internal.RxGunInternal.OnDisconnected">
             <summary>
             Event : on gun is disconnect
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.IMUQuaternionShiftParameter_1">
             <summary>
             IMU rotation shifting parameter.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.imuRotation">
             <summary>
             The shifted IMU rotation.
             代表IMU在现实世界中的朝向。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.fixIMURotation2TrackableRotation">
             <summary>
             将 IMU rotation 补偿到视觉跟踪 Rotation 的补偿值。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.isImuCalibrated">
             <summary>
             Is the IMU calibrated ? if true, fixIMURotation2TrackableRotation is not id.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.ImuRotationDelegate">
             <summary>
             IMU rotation delegate.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.calibrateConfidence">
             <summary>
             Auto calibrate IMU confidence valve.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RxGunInternal.GunDeviceType">
             <summary>
             Gun device type 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.GunDeviceType.HandGun_92">
             <summary>
             Refers to controller slot 03
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxGunInternal.GunDeviceType.Rifle_95">
             <summary>
             Refers to controller slot 04
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.RxGunInternal.gunDeviceType">
             <summary>
             Gun device type.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.RxGunInternal.isConnected">
             <summary>
             Is the device connected ?
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.OnStart">
             <summary>
             On Start the coroutine to auto connect gun.
             </summary>
             <param name="autoConnect">If true, auto connect to gun.</param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.ConnectToDevice">
             <summary>
             Calls this method to explictly connects to device.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsTap(System.Int32)">
             <summary>
             Is the key tapped?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsDoubleTap(System.Int32)">
             <summary>
             Is the key double tapped?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsPress(System.Int32)">
             <summary>
             Is the key currently pressed?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsPressDown(System.Int32)">
             <summary>
             Is the key currently press down?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsReleaseUp(System.Int32)">
             <summary>
             Is the key currently release up?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxGunInternal.IsLongHeldDown(System.Int32)">
             <summary>
             Is the key held down for quit a while time ?
             </summary>
             <param name="Key"></param>
             <returns></returns>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerButtonCode">
             <summary>
             RhinoX controller button enumeration.
             </summary>
             <summary>
             Ximmerse controller button code.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXInputType">
             <summary>
             Internal : controller matches to low level hardware by index (first ,second) or by type (controller, cube, touchpad .. etc)
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerIndex">
             <summary>
             Controller index.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller_Left_Controller">
             <summary>
             The controller - left controller.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller_Right_Controller">
             <summary>
             The controller - right controller.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller03_Preserved">
             <summary>
             The controller 03 (preserved).
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerIndex.Controller04_Preserved">
             <summary>
             The controller 04 (preserved).
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.PlanePlacement">
             <summary>
             Plane placement type : placed at ground (horizontally) or placed at wall (vertically).
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.GroundPlane">
             <summary>
             Ground plane represents static trackable object placed on environment, to reposition head pose according to the relative pose between head and trackable object.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.eventOnCreateGroundPlane">
             <summary>
             Public static event : on create new dynamic target.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.eventOnDeleteGroundPlane">
             <summary>
             Public static event : on delete new dynamic target.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.DecoupleVIO">
             <summary>
             if true, when ground recenters head, will decouple VIO motion logic. Default: false
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.GroundPlane.RecenterMode">
             <summary>
             Recenter behaviour mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.RecenterMode.Automate">
             <summary>
             Tries to recenter head everyframe, as long as the ground plane object is tracked.
             This is the default mode;
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.RecenterMode.Scripting">
             <summary>
             Recenter by script call only. 
             Call GroundPlane.ForceRecenter() .
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.recenterMode">
             <summary>
             Gets or sets the recenter mode.
             </summary>
             <value>The recenter mode.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.Placement">
             <summary>
             Gets or sets the placement, this value indicates how the physics marker is placed, is it placed at ground or at wall.
             </summary>
             <value>The placement.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.GroupID">
             <summary>
             Ground plane's group ID, when using as seperate ground plane, use -1 by default.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_RecenterInterval">
             <summary>
              The recenter interval.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinTrackedDistance">
             <summary>
             The minimum tracking distance.
             可以发生对齐的最小追踪距离
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MaxTrackedDistance">
             <summary>
             The max tracking distance.
             可以发生对齐的最大追踪距离
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MaxRecenterAngularVelocity">
             <summary>
             The max recenter angular velocity.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinTrackedConfidence">
             <summary>
             The minimum tracking confidence.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinErrorHeadDistance">
             <summary>
             The minimum error head distance allow when performing recenter.
             If distance between head and target position less than this value, will not recenter head.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_MinErrorHeadDiffAngle">
             <summary>
             The minimum error head diff angle
             对齐时候允许头部对齐动作的最小误差角度.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.m_RecenterHeadWith3Axis">
             <summary>
             if true, 使用完整的3轴来矫正头部姿态。
             if false, 只使用yaw轴矫正头部姿态。
             默认 : false. 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.GroundPlane.PreviousRecenterTime">
             <summary>
             Static value : previous recenter time.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.RecenterInterval">
             <summary>
             Gets or sets the recenter interval.
             </summary>
             <value>The recenter scanning interval.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.VPUFrameDelay">
             <summary>
             Gets or sets the delay time from rendering to VPU.
             </summary>
             <value>The backward time.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinTrackedDistance">
             <summary>
             Gets or sets the minimum tracking distance to allow recenter.
             可以发生对齐的最小追踪距离.
             </summary>
             <value>The minimum recenter distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MaxTrackedDistance">
             <summary>
             Gets or sets the max tracking distance to allow recenter.
             可以发生对齐的最大追踪距离.
             </summary>
             <value>The max recenter distance.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MaxRecenterAngularVelocity">
             <summary>
             The max angular velocity to allow recenter.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinTrackedConfidence">
             <summary>
             The min tracked confidence to allow recenter.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinErrorHeadDistance">
             <summary>
             The minimum error head distance.
             对齐时候允许头部对齐动作的最小距离.
             </summary>
             <value>The minimum error head span.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.DebugView">
             <summary>
             Activates or deactivate debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinErrorHeadDiffAngle">
             <summary>
             Gets or sets the minimum allow head diff angle to recenter.
             </summary>
             <value>The minimum error head diff angle.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.MinTrackedAngle">
             <summary>
             Gets or sets the minimum tracked angle to repositional head pose.
             </summary>
             <value>The minimum tracked angle.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.DrawColor">
             <summary>
             Gets or sets the color of the debug drawing.
             </summary>
             <value>The color of the draw.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.GroundPlane.CurrentGroundPlane">
             <summary>
             Current ground plane is the latest ground plane object that being used to recenter head.
             </summary>
             <value>The current ground plane.</value>
            </member>
        <member name="E:Ximmerse.RhinoX.GroundPlane.eventOnGroundPlanePosition">
             <summary>
             Event : on ground plane is positioned.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.StaticUpdate">
             <summary>
             Static : update ground planes
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.UpdateGroundPlaneUsingLegacyAlg">
             <summary>
             Update ground planes using legacy algorithm
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.IsAvailableToRecenter">
             <summary>
             Is this ground plane available to recenter head pose?
             </summary>
             <returns><c>true</c>, if available was is true, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.TryRecenterDeoupledWithVIO">
             <summary>
             tries to recenter head pose without coupling to VIO data.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.TryRecenter">
             <summary>
             Tries to recenter head pose.
             Return true for recenter is performed successfully.
             </summary>
             <returns><c>true</c>, if recenter head was framed, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.GroundPlane.GetPoseByHierarchy(UnityEngine.Matrix4x4,UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             获取 child 在 parent 空间下的相对于 parent 的 local space pose.
             并通过 TRS, 获取一个新的全局pose， 此全局pose 和 TRS 的关系 == child 和 parent 的相对关系。
             </summary>
             <param name="TRS"></param>
             <param name="parent"></param>
             <param name="child"></param>
             <returns></returns>
            </member>
        <member name="T:Ximmerse.RhinoX.RXRaycastInfo">
             <summary>
             Internal struct for rx-raycaster info
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.distance">
             <summary>
             The distance of hit info.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.hitOn">
             <summary>
             The gameobject gets hit on.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXRaycastInfo.raycaster">
             <summary>
             The raycaster.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.worldPosition">
             <summary>
             The world position that hits on.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.worldNormal">
             <summary>
             The world normal that hits on surface.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.hitDirection">
             <summary>
             The hit direction of the raycasting.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.isNewHit">
             <summary>
             If hit on any gameobject, is this the first hit info ?
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.lostHit">
             <summary>
             If hit on nothing, this field hints the previous hit on gameobject.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerDown">
             <summary>
             Controller flags: pointer down, up, click.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerStartWorldPosition">
             <summary>
             The pointer start world position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXRaycastInfo.pointerEventData">
             <summary>
             Unity's pointer event data structure.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.DeviceLLAPI">
             <summary>
             Ximmerse Device low level API.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetPairedControllerInfoByTypeRaw(Ximmerse.RhinoX.Internal.XDevicePlugin.XControllerTypes)">
             <summary>
             根据ControllerType获取已配对的ControllerInfo，默认为null
             </summary>
             <param name="type">ControllerType</param>
             <returns>ControllerInfo</returns>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.isInitialized">
             <summary>
             Is low level API initialized.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.IsInitialized">
             <summary>
             Gets a value indicating LLAPI is initialized.
             </summary>
             <value><c>true</c> if is initialized; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.ctrl01">
             <summary>
             low level controller 01 , 02 , 03 , 04.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.HmdHandle">
             <summary>
             HMD device handler, tag : "XHawk-0"
             </summary>
             <value>The hmd hander.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller01Handle">
             <summary>
             Gets the first controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller02Handle">
             <summary>
             Gets the second controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller03Handle">
             <summary>
             Gets the third controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.Controller04Handle">
             <summary>
             Gets the fourth controller device handle.
             </summary>
             <value>The controller01.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.IsVPUConnected">
             <summary>
             Gets a value indicating is VPU connected.
             </summary>
             <value><c>true</c> if is VPU connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnVPUConnectionStateIsChanged">
             <summary>
             Event callback on vpu connection state is changed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.IsVPUFirstConnected">
             <summary>
             The flag to indicate if VPU is connected for the first time.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnVPUInitialized">
             <summary>
             Event : on VPU initialized.
             This event is fired for the first time VPU connect.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnLLAPIStartInitialized">
             <summary>
             Event : on llapi start initialized.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnLLAPIFinishInitialized">
             <summary>
             Event : on llapi finish initialized.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnLLAPIStartDeinitialized">
             <summary>
             Event : on llapi start deinitialized.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnLLAPIFinishDeinitialized">
             <summary>
             Event : on llapi finish deinitialized.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.DeviceLLAPI.OnControllerPairing">
             <summary>
             Event : on any controller pairing.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_RawPositionIndex">
             <summary>
             The index to retrieve the raw positional float[] array from VPU.
             [1,0,2] : for vertical VPU.
             [0,1,2] : for horizontal VPU.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawPositionIndex">
             <summary>
             The index to retrieve raw position.Sign is used to multiple the raw value.
             </summary>
             <value>The index of the raw position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawPositionFieldMultiplier">
             <summary>
             Gets or sets the raw position field multiplier.
             </summary>
             <value>The raw rotation field multiplier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_MarkerPosePreTiltEuler">
             <summary>
             use for pre tilt on the raw rotation of marker.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.MarkerPosePreTilt">
             <summary>
             Gets or sets the marker pose pre tilt.
             </summary>
             <value>The marker pose pre tilt.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_MarkerPosePostTiltEuler">
             <summary>
             use for post tilt on the raw rotation of marker.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.MarkerPosePostTilt">
             <summary>
             Gets or sets the marker pose post tilt.
             </summary>
             <value>The marker pose pre tilt.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawRotationIndex">
             <summary>
             The index to retrieve raw oritentation.
             </summary>
             <value>The index of the raw rotation.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_RawRotationFieldMultiplier">
             <summary>
             The raw rotation field multiplier.
             Should be 1 or -1
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.RawRotationFieldMultiplier">
             <summary>
             Gets or sets the raw rotation field multiplier.
             </summary>
             <value>The raw rotation field multiplier.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.m_LoadedMarkerConfigInfo">
             <summary>
             The VPU loaded marker config info : key = Marker ID or top group ID, value = marker config info.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeLLAPI(System.Boolean)">
             <summary>
             Initializes Ximmerse LLAPI.
             Note: this will initialize both bluetooth module and VPU module.
             If you don't want to copy VPU built-in tracking json, copyVPUProfile should be false.
             </summary>
             <param name="copyVPUProfile">If set to <c>true</c> , copy vpu profiles.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.DeinitializeLLAPI">
             <summary>
             Deinitializes the LLAPI.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.OnVPUConnectionStateChanged(System.Int32,System.IntPtr)">
             <summary>
             Raises the device connect state change event.
             </summary>
             <param name="connect_st">Connect st.</param>
             <param name="ud">Ud.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetVPUSN">
             <summary>
             Gets the vpu serial number
             </summary>
             <returns>The vpusn.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.LoadMarkerTrackingProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Loads the marker tracking profile.
             </summary>
             <returns><c>true</c>, if marker tracking profile was loaded, <c>false</c> otherwise.</returns>
             <param name="profile">Profile.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.LoadSingleJsonCalibration(Ximmerse.RhinoX.TrackingItem)">
             <summary>
             Loads a single json calibration file.
             </summary>
             <returns><c>true</c>, if single json calib was loaded, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.LoadSingleTrackingJsonFile(System.String)">
             <summary>
             Loads a single tracking json file .
             </summary>
             <returns><c>true</c>, if single tracking json was loaded, <c>false</c> otherwise.</returns>
             <param name="JsonFilePath">Json file path.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.ResetTrackingProfile">
             <summary>
             Resets the tracking profile, this operation earse any loaded tracking profile at runtime.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetFusionState(Ximmerse.RhinoX.ControllerWrap,Ximmerse.RhinoX.MarkerInfo@)">
             <summary>
             Get Ring Controller's fusion state.
             </summary>
             <param name="ctrl"></param>
             <param name="markerInfo"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetMarkerState(System.Int32,Ximmerse.RhinoX.MarkerInfo@,System.Boolean)">
             <summary>
             Output the marker tracking info at the ID.
             Return true if the marker is tracked.
             </summary>
             <returns>The marker state.</returns>
             <param name="trackingID">Tracking ID.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.IsMarkerVisible(System.Int32)">
             <summary>
             Is the marker of the ID visible at the frame it's called.
             </summary>
             <returns><c>true</c>, if marker visible was ised, <c>false</c> otherwise.</returns>
             <param name="trackingID">Tracking identifier.</param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Ximmerse.RhinoX.DeviceLLAPI.SetMarkerTrackingLimitation(System.Nullable{System.Int32},System.Nullable{System.Single})-->
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.SetTrackingIdlePowerSavingMode(System.Boolean)">
             <summary>
             Sets tracking idle power saving mode on/off. 
             </summary>
             <param name="EnablePowerSaving">If set to <c>true</c> enable power saving.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.TagTrackingLibVersion">
             <summary>
             Gets the tag tracking version.
             </summary>
             <value>The LLSDKV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.FPGAVersion">
             <summary>
             Gets the FPGA version.
             </summary>
             <value>The FPGAV ersion.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DeviceLLAPI.AlgorithmVersion">
             <summary>
             Gets the algorithm version.
             </summary>
             <value>The algorithm version.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vpuAlignmentAnchorCenterPoint">
             <summary>
             The vpu alignment data : anchor center point.
             标定的vpu 的锚点.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vpuAlignmentAnchorCenterEuler">
             <summary>
             The vpu alignment anchor center euler.
             标定的vpu 锚点 euler.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vioAlignmentAnchorCenterPoint">
             <summary>
             The vio alignment data : anchor center point.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DeviceLLAPI.vioALignmentAnchorCenterEuler">
             <summary>
             The vio alignment data : anchor euler.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeVPUAlignmentData">
             <summary>
             Parse vpu calibration lib files.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.InitializeVIOAlignmentData">
             <summary>
             Initialize VIO alignment data.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.DeviceLLAPI.GetVPULoadedMarkerInfo(System.Int32,Ximmerse.RhinoX.MarkerConfigInfo@)">
             <summary>
             Given a marker ID , output marker config info, if the marker's calibration file is already loaded.
             If not found ,return false.
             </summary>
             <returns><c>true</c>, if VPUL oaded marker info was gotten, <c>false</c> otherwise.</returns>
             <param name="MarkerID">Marker identifier.</param>
             <param name="configInfo">Config info.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.LostTrackingBehaviour">
             <summary>
             定义当丢失跟踪的时候， 应该如何处理此 Dynamic target.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.LostTrackingBehaviour.Stay">
             <summary>
             Stay at the last visible place when lost tracking.
             如果丢失跟踪， 则 dynamic target 停留在原地。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.LostTrackingBehaviour.FollowHead">
             <summary>
             Follow AR camera's movement, when lost tracking.
             如果丢失跟踪， 则 dynamic target 会以最后一帧相对于头部的姿态， 跟随头部运动。
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.DynamicTarget">
             <summary>
             Default trackable behaviour, updates trackable object's transform at the head space per-frame.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DynamicTarget.eventOnCreateNewDynamicTarget">
             <summary>
             Public static event : on create new dynamic target.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.DynamicTarget.eventOnDeleteDynamicTarget">
             <summary>
             Public static event : on delete new dynamic target.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.LostTrackingBehaviour">
             <summary>
             The dynamic target's behaviour when lost tracking.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.trackableIdentity">
             <summary>
             Gets the trackable identity.
             </summary>
             <value>The trackable identity.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.DebugView">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.DynamicTarget" /> debug view.
             </summary>
             <value><c>true</c> if debug view; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.DrawColor">
             <summary>
             Gets or sets the color of the color to draw debug view.
             </summary>
             <value>The color of the debug.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.PrintDetailTrackedData">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.DynamicTarget" /> print detail
             tracked data.
             </summary>
             <value><c>true</c> if print detail tracked data; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.ApplyPrediction">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:Ximmerse.RhinoX.DynamicTarget" /> apply prediction.
             </summary>
             <value><c>true</c> if apply prediction; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.LerpPredicitonPosition">
             <summary>
             Gets or sets the lerp prediciton position.
             </summary>
             <value>The lerp prediciton position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.MarkerWorldPosition">
             <summary>
             Gets the marker position.
             This is the world position.
             </summary>
             <value>The marker position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.MarkerWorldQ">
             <summary>
             Gets the marker world Q
             </summary>
             <value>The marker world q.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.PreviousWorldPosition">
             <summary>
             Gets the previous world position.
             </summary>
             <value>The previous world position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.PreviousWorldQ">
             <summary>
             Gets the previous world Q.
             </summary>
             <value>The previous world position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.DynamicTarget.MarkerPredictedWorldPosition">
             <summary>
             Gets the marker predicted position.
             </summary>
             <value>The marker predicted position.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.DynamicTarget.UpdateDynamicTargetPose">
             <summary>
             updates dynamic target 
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.PositionPrediction">
             <summary>
             Position prediction
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.PositionPrediction.Smooth">
             <summary>
             If we should smooth the prediction due to a pop in tracking.
             </summary>
             <value><c>true</c> if smooth; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.PositionPrediction.SmoothSpeed">
             <summary>
             The speed used when smoothing, lower the faster.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.PositionPrediction.GetPrediction(UnityEngine.Vector3)">
             <summary>
             Gets the position with prediction.
             </summary>
             <returns>The prediction.</returns>
             <param name="position">Position.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PositionPrediction.GetPrediction(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
             <summary>
             Gets the prediction based on rotation.
             </summary>
             <returns>The prediction.</returns>
             <param name="currentRotation">Current rotation.</param>
             <param name="currentPosition">Current position.</param>
             <param name="compassCorrection">Compass correction.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.RotationPrediction">
             <summary>
             Basic Rotation prediction.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RotationPrediction.Update(UnityEngine.Quaternion)">
             <summary>
             Updates the prediction based on the new rotation.
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RotationPrediction.GetRotationPrediction(UnityEngine.Quaternion,System.Int32)">
             <summary>
             Gets the rotation prediction.
             </summary>
             <returns>The rotation prediction.</returns>
             <param name="rotation"></param>
             <param name="frameDelay">Frame delay.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RotationPrediction.GetRotationPredictionOffset(UnityEngine.Quaternion,System.Int32)">
             <summary>
             Gets the rotation prediction offset from the current rotation and the predicted rotation.
             </summary>
             <returns>The rotation prediction offset.</returns>
             <param name="rotation"></param>
             <param name="frameDelay">Frame delay.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.Side">
             <summary>
             Side enum.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventType">
             <summary>
             SVR event type : define the event type of LLAPI.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrThermalZone">
             <summary>
             Svr thermal event : which area does the thermal event points to.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrThermalLevel">
             <summary>
             Svr thermal event : which level the thermal event indicates.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventData_Thermal">
             <summary>
             Svr thermal event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEventData">
             <summary>
             Svr event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrEvent">
             <summary>
             Svr event: define data structure for polling event from LLAPI to HLAPI.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.eventType">
             <summary>
             Event type
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.deviceId">
             <summary>
             An identifier for the device that generated the event (0 == HMD)
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.SvrEvent.eventData">
             <summary>
             Event data.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AntiAliasing">
             <summary>
             Anti aliasing.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.AnchorNode">
             <summary>
             Defines the important transform node exposed by AIO sdk.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.HeadNode">
             <summary>
             The head node transform, equals to ARCamera.Instance.transform
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.LeftEye">
             <summary>
             The left eye transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.RightEye">
             <summary>
             The right eye transform.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.MonoEye">
             <summary>
             The VPU tracking anchor..
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.AnchorNode.EyeCenter">
             <summary>
             The eye center node ,this is a transform parent to left and right eye, but without a camera.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RXInputModule">
             <summary>
             RhinoX controller module, public interface to ximmerse controller input event system.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.kAllEventTriggers">
             <summary>
             Interface ref. list : all event triggers.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.RXInputModule.PointerButton">
             <summary>
             Gets or sets the pointer button. This is the button to trigger pointer event, such as PointerClick, Drag.
             </summary>
             <value>The pointer button.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXInputModule.AcceptAnyControllerButton">
             <summary>
             If true, any controller button can trigger an interaction event .
             </summary>
             <value><c>true</c> if accept any controller button; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.RXInputModule.DisableButtonInput">
             <summary>
             If true ,the controller button event will be disabled, only touching event is thrown.
             In some case, developer might want to temporarily disable button input to disable user's interaction, setting this property to true.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.m_EnterGameObjects">
             <summary>
             Focus game object map : key = game object.  Value = number for raycaster that targets on the game object.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.m_FocusGameObjects">
             <summary>
             Gameobject currently being focus.
             Key = GameObject get focus.
             Raycaster = Raycaster that currently focusing on.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RXInputModule.hitInfoCurrentFrame">
             <summary>
             Hit info of the current frame.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerEnter">
             <summary>
             Event : when user triggre an pointer enter event at any gameObject.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerExit">
             <summary>
             Event : when user triggre an pointer exit event at any gameObject.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerDownAt">
             <summary>
             Event : when user put an pointer down at any gameObject.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerStayAt">
             <summary>
             Event : when pointer stay at any game object.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerUpAt">
             <summary>
             Event : when user put an pointer up at any gameObject.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.RXInputModule.OnPointerClickAt">
             <summary>
             Event : when user put an pointer click at any gameObject.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectEnter(UnityEngine.GameObject)">
             <summary>
             判断一个 GameObject 是否可进入
             </summary>
             <returns><c>true</c>, if game object enter was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectExit(UnityEngine.GameObject)">
             <summary>
             一个 GameObject 是否可被退出
             </summary>
             <returns><c>true</c>, if game object exit was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.AddGameObjectEnter(UnityEngine.GameObject)">
             <summary>
             添加一个 GameObject 到进入列表
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.OnGameObjectExit(UnityEngine.GameObject)">
             <summary>
             从进入列表，移除一个GameObject
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsGameObjectNotFocusBefore(UnityEngine.GameObject)">
             <summary>
             判断一个 GameObject 是否可被聚焦
             </summary>
             <returns><c>true</c>, if game object focus was ised, <c>false</c> otherwise.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.GetFocusByRaycaster(UnityEngine.GameObject)">
             <summary>
             Gets the raycaster which focus on the gameobject.
             </summary>
             <returns>The focus by raycaster.</returns>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.AddGameObjectFocus(UnityEngine.GameObject,Ximmerse.RhinoX.RXRaycaster)">
             <summary>
             Marks the game object focus by raycaster
             添加一个 GameObject 到 Focus 列表。
             </summary>
             <param name="go">Go.</param>
             <param name="raycaster">Raycaster.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.RemoveGameObjectFocus(UnityEngine.GameObject)">
             <summary>
             Removes the game object focus.
             移除一个 GameObject，从 Focus 列表。
             </summary>
             <param name="go">Go.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.RegisterEventTrigger(Ximmerse.RhinoX.I_ButtonEventTrigger)">
             <summary>
             Register event trigger.
             </summary>
             <param name="i_ButtonEventTrigger"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.UnregisterEventTrigger(Ximmerse.RhinoX.I_ButtonEventTrigger)">
             <summary>
             Unregister event trigger.
             </summary>
             <param name="i_ButtonEventTrigger"></param>
            </member>
        <member name="P:Ximmerse.RhinoX.RXInputModule.externalInputProvider">
             <summary>
             Gets or sets the external input provider.
             If external input provider is not null, will access external input provider to overwhelm the default ximmerse input provider.
             </summary>
             <value>The external input provider.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonDown(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button down ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonUp(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button up ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonTap(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button tap ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonHeld(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button held down ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonLongHeld(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button long held down ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.IsPointerButtonDoubleTap(Ximmerse.RhinoX.ControllerIndex)">
             <summary>
             If pointer button double tap ?
             If accept any pointer button = true, then all controller buttons are accept
             </summary>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.RXInputModule.ActivateRaycasterAtGameObject(UnityEngine.GameObject,System.Boolean)">
             <summary>
             Activate/Deactivate RXRaycaster at game object.
             </summary>
             <param name="gameObject"></param>
            </member>
        <member name="T:Ximmerse.RhinoX.XDeviceInfo">
             <summary>
             Ximmerse device information.
             Interface for developers to access the device's infomration such as device type, mac address, is currently paired, connected.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.TypeID">
             <summary>
             Gets or sets the type identifier.
             Access Device type property for readable value.
             </summary>
             <value>The type identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.BindID">
             <summary>
             Gets the bind ID.
             </summary>
             <value>The bind identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.IsPaired">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.XDeviceInfo" /> is paired.
             </summary>
             <value><c>true</c> if is paired; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.IsConnected">
             <summary>
             Gets a value indicating whether this <see cref="T:Ximmerse.RhinoX.XDeviceInfo" /> is connected.
             </summary>
             <value><c>true</c> if is connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.MacAddressBytes">
             <summary>
             Gets the mac address.
             Access GetMacAddrStr() for string property
             </summary>
             <value>The mac address.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.XDeviceInfo.MacAddress">
             <summary>
             Gets the mac address in string.
             </summary>
             <value>The mac address.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.XDeviceInfo.GetDeviceType">
             <summary>
             Gets the type of the device.
             </summary>
             <returns>The device type.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.XDeviceInfo.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:Ximmerse.RhinoX.XDeviceInfo" /> class.
             </summary>
             <param name="rawType">Raw type.</param>
             <param name="rawBindId">Raw bind identifier.</param>
             <param name="rawPaired">If set to <c>true</c> raw paired.</param>
             <param name="rawConnected">If set to <c>true</c> raw connected.</param>
             <param name="rawMacAddr">Raw mac address.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.ObjectTracking">
             <summary>
             Object tracking : access tag tracking interface.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetAnchorNode(Ximmerse.RhinoX.AnchorNode)">
             <summary>
             Gets the transform by AnchorMode.
             </summary>
             <returns>The node.</returns>
             <param name="anchor">Anchor.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.TrackingAnchorPose">
             <summary>
             Gets the get tracking anchor global pose.
             This is the VPU tracking matrix, used to convert tracked raw output data to global world space.
             </summary>
             <value>The get tracking anchor pose.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetTrackableTransform(System.Int32,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
             <summary>
             Gets the trackable object's position and rotation, in the tracking anchor space.
             </summary>
             <returns><c>true</c>, if marker was tracked, <c>false</c> otherwise.</returns>
             <param name="TrackableID">Trackable unique ID.</param>
             <param name="trackingAnchor">Tracking anchor.</param>
             <param name="Position">Position.</param>
             <param name="Rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetTrackableRawData(System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.UInt64@)">
             <summary>
             Gets the raw tracked data from low level tracking system, the coordination system's orign point is the hardware camera's position and rotation. 
             Return false if the object is not being tracked.
             </summary>
             <returns><c>true</c>, if trackable object is currently being tracked, <c>false</c> otherwise.</returns>
             <param name="TrackableID">Trackable ID.</param>
             <param name="Position">Tracked position, based on tracking camera space.</param>
             <param name="Rotation">Tracked rotation, based on tracking camera space.</param>
             <param name="timestamp">Hardware timestamp.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetTrackableWorldSpaceData(System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
             <summary>
             Gets the tracked position and rotation in world space.
             Return false if the object is not being tracked.
             </summary>
             <returns><c>true</c>, if trackable world space data was gotten, <c>false</c> otherwise.</returns>
             <param name="TrackableID">Trackable identifier.</param>
             <param name="WorldPosition">Position.</param>
             <param name="WorldRotation">Rotation.</param>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.VPUTrackingAnchorPosition">
             <summary>
             Gets/Sets the VPU tracking anchor position.
             </summary>
             <value>The update VPUT racking anchor position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.VPUTrackingAnchorEuler">
             <summary>
             Gets/Sets the VPU tracking anchor euler angles..
             </summary>
             <value>The update VPUT racking anchor position.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ObjectTracking.CurrentProfile">
             <summary>
             Sets the current used tracking profile.
             </summary>
             <value>The current profile.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ObjectTracking.GetMarkerConfigInfo(System.Int32,Ximmerse.RhinoX.MarkerConfigInfo@)">
             <summary>
             Gets the marker config info.
             </summary>
             <returns><c>true</c>, if marker config info was gotten, <c>false</c> otherwise.</returns>
             <param name="ObjectID">Marker identifier.</param>
             <param name="configInfo">Config info.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.CustomVPUAlignmentData">
             <summary>
             Custom VPU alignment data.
             Generated by argus. svr
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.CustomVPUAlignmentData.overrideFactory">
             <summary>
             If true, the custom alignment data will override the factory data:
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerRotationFusionMode">
             <summary>
             Controller rotation fusion mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerRotationFusionMode.Semi">
             <summary>
             The semi mode, when tracking output in poor quality , use IMU rotation instead.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerRotationFusionMode.FullGyroscope">
             <summary>
             use controller IMU to override tracking rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerRotationFusionMode.None">
             <summary>
             No fusion, use tracking rotation only .
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RxDraw">
             <summary>
             GL draw helper.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.RxDrawRequest.uiVerts">
             <summary>
             UI Verts : data structure wrap for UI/Text drawing
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.HumanSkeleton">
             <summary>
             Draw a human skeleton, where original model height = 1m.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.HumanSkeletonLine">
             <summary>
             Draw a human skeleton line, where original model height = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.DogSkeleton">
             <summary>
             Draw a human skeleton, where original model width = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.DogSkeletonLine">
             <summary>
             Draw a human skeleton line, where original model width = 1m
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.GUICircle">
             <summary>
             Draws a GUI circle.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.ScreenRect">
             <summary>
             Draws full screen rect.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RxDraw.PEDrawType.TextMesh3D">
             <summary>
             Draws 3d text mesh
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.SetCustomMaterial(UnityEngine.Material,System.Int32)">
             <summary>
             Sets the custom material for previous draw command.
             </summary>
             <param name="CustomMaterial">Custom material.</param>
             <param name="Pass">Pass.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a line.
             </summary>
             <param name="start">Start.</param>
             <param name="end">End.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a line.
             </summary>
             <param name="start">Start.</param>
             <param name="end">End.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a ray.
             </summary>
             <param name="start">Start.</param>
             <param name="direction">Direction.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a ray.
             </summary>
             <param name="start">Start.</param>
             <param name="direction">Direction.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a sphere.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire sphere.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredSphere(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a sphere with wired.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawArrow(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws an arrow.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws mesh directly
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawMeshWireframe(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws mesh wire frame
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCone(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cone.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCone(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire cone.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCylinder(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cylinder.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawPyramid(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a pyramid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredCube(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired cube.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wire Cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredCuboid(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired Cuboid.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a quad.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWireQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a quad of wire.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredQuad(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired and filled quad.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawPlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a plane.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWirePlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,System.Single)">
             <summary>
             Draws a plane of wire.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawWiredPlane(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Color,UnityEngine.Color,System.Single)">
             <summary>
             Draws a wired and filled plane.
             </summary>
             <param name="center">Center.</param>
             <param name="radius">Radius.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawTranslateGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws the translate(positional) gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.Text3D(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.String,UnityEngine.Color,System.Single,UnityEngine.Font,UnityEngine.FontStyle)">
             <summary>
             Draws a 3D text mesh.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="text">Text.</param>
             <param name="Duration">Duration.</param>
             <param name="color">Color.</param>
             <param name="font">Font.If null, the default arial is used.</param>
             <param name="Style">Style.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.UIVerticesToTextMesh(System.Collections.Generic.List{UnityEngine.UIVertex},UnityEngine.Mesh)">
             <summary>
             Convert UI vertices to mesh
             </summary>
             <param name="verticesLst">Vertices lst.</param>
             <param name="TextMesh">Text mesh.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawRotationGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws the rotation gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawGrids(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color,System.Single,Ximmerse.RhinoX.Internal.RxDraw.RxDrawAlignment)">
             <summary>
             Draws the grid gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawHumanSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawHumanSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a human skeleton line.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawGUICircle(UnityEngine.Vector3,System.Single,UnityEngine.Color,UnityEngine.Camera,System.Single)">
             <summary>
             Draws a GUI circle at the screen point.
             If drawSpace = ViewPort, Position and Radius is measured in screen coordination.
             Else If drawSpace = ScreenSpace, Screen point and Radius is measured in pixel coordination.
             Else If drawSpace = WorldSpace, Screen point and Radius is measured in 3D global coordination.
             </summary>
             <param name="ScreenPoint">Screen point.</param>
             <param name="Radius">Radius.</param>
             <param name="color">Color.</param>
             <param name="cameraTarget">Camera target.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawDogSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a dog skeleton.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawDogSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
             <summary>
             Draws a dog skeleton line.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawScaleGizmos(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
             <summary>
             Draws a scale gizmos.
             </summary>
             <param name="position">Position.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.DrawScreenRect(UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Draws a screen rect, when scale = 1, the rect fully covers screen viewport.
             </summary>
             <param name="color">Color.</param>
             <param name="scale">Scale.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.InitializeBehavior">
             <summary>
             Initializes the behavior.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.RxDraw.ConvertPixelSpace(Ximmerse.RhinoX.Internal.RxDraw.RxDrawRequest@)">
             <summary>
             Converts the position from screen normalize space to pixel space.
             </summary>
             <param name="drawRequest">Draw request.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.RhinoXButton">
             <summary>
             Enumeration defines all RhinoX buttons. Includes side-bar button on RhinoX and standard bluetooth controller.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXButton.ConfirmButton">
             <summary>
             The confirm button on RhinoX side bar.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXButton.ControllerTrigger">
             <summary>
             The trigger button on RhinoX standard controller.
             This enumeration item is equated to ControllerButtonCode.Trigger
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXButton.ControllerTouchPadButton">
             <summary>
             The touchpad button on RhinoX standard controller.
             This enumeration item is equated to ControllerButtonCode.TouchPad
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXButton.App">
             <summary>
             The app button on RhinoX standard controller.
             This enumeration item is equated to ControllerButtonCode.App
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RhinoXButton.Home">
             <summary>
             The home button on RhinoX standard controller.
             This enumeration item is equated to ControllerButtonCode.Home
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.TouchPadButtonDirection">
             <summary>
             Touch pad button direction.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.RxRaycastingType">
             <summary>
             Rx raycasting type : raycasting or sphere casting 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RxRaycastingType.Raycasting">
             <summary>
             The default raycasting.
             At this mode, Physics.Raycast is called when raycasting .
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.RxRaycastingType.SphereCasting">
             <summary>
             The overlay sphere casting.
             At this mode, Physics.Overlap is called when raycasting .
             When hitting more than one colliders, the closest collided hit info will be returned.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XDeviceConnectionState.Disconnected">
             <summary>
             已断开连接
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XDeviceConnectionState.Scanning">
             <summary>
             搜索中
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XDeviceConnectionState.Connecting">
             <summary>
             连接中
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.XDeviceConnectionState.Connected">
             <summary>
             已连接
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.TagTrackingEngine">
             <summary>
             VPU tag tracking engine : drives tag tracking function.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.TagTrackingEngine.OnPostHeadUpdate">
             <summary>
             Event : called after head pose is updated.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.TagTrackingEngine.OnTrackingProfileIsLoaded">
             <summary>
             Event : called after a tracking profile has been loaded.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.profile">
             <summary>
             The marker tracking profile that currently being loaded to VPU.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.m_Anchor_Center">
             <summary>
             The VPU tracking anchor : middle , left eye and right eye.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.m_LeftEye">
             <summary>
             The left and right eye transform
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPosePreTilt">
             <summary>
             Marker pose pre tilt.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPositionIndex">
             <summary>
             The index of the marker position.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerPositionSign">
             <summary>
             The marker position sign.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerRotationIndex">
             <summary>
             The index of the marker rotation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.MarkerRotationSign">
             <summary>
             The marker rotation sign.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TagTrackingEngine.IsVpuUpdating">
             <summary>
             For launcher, cant init llapi when the vpu is updating.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TagTrackingEngine.IsSupported">
             <summary>
             Is VPU tracking supported ?
             </summary>
             <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.Initialize">
             <summary>
             Initialize tag tracking engine instance.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.Is_LLAPI_Initialized">
             <summary>
             Indicates if the low level tracking API has been initialized.
             </summary>
             <returns><c>true</c>, if llapi initialized was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.UpdateBeforeHeadPose">
             <summary>
             Update before head pose is fetched from SVR and applied to unity transform.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.UpdateAfterHeadPose">
             <summary>
             Updates the tracking engine objects after VIO head pose has been set.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.FusionVioInit">
             <summary>
             Initialize fusion VIO.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.SetGroundPlaneFusionData(Ximmerse.RhinoX.GroundPlane)">
             <summary>
             Sets inner ground plane parameter by GroundPlane instance.
             </summary>
             <param name="groundPlane"></param>
             <returns></returns>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.SetTrackingProfile(Ximmerse.RhinoX.ObjectTrackingProfile)">
             <summary>
             Sets and loads the tracking profile.
             The previous loaded profile will be unloaded.
             </summary>
             <param name="TrackingProfile">Tracking Profile.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.ClearTrackingProfiles">
             <summary>
             Clears the current loaded tracking profiles. 
             This method will earse all tracking data in hardware, there will be no tracking.
             </summary>
             <returns><c>true</c>, if tracking profiles was cleared, <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.LoadSingleTrackingJson(System.String)">
             <summary>
             Loads a single tracking json file in the path.
             Unlike SetTrackingProfile(), this method will not reset the tracking profiles when loading.
             </summary>
             <returns><c>true</c>, if single tracking json was loaded, <c>false</c> otherwise.</returns>
             <param name="JsonFullPath">Json full path.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.LoadSingleTrackingJson(Ximmerse.RhinoX.TrackingItem)">
             <summary>
             Loads a single tracking item
             Unlike SetTrackingProfile(), this method will not reset the tracking profiles when loading.
             </summary>
             <returns><c>true</c>, if single tracking json was loaded, <c>false</c> otherwise.</returns>
             <param name="trackingItem">Tracking item.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.TagTrackingEngine.IsControllerInstancePresent">
             <summary>
             Is Rx-Controller instance presented ?
             </summary>
             <returns><c>true</c>, if controller instance present was ised, <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.TrackableIdentity">
             <summary>
             Trackable object identity. Constraint by an integral trackable ID , represents a trackable object in real world.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.TrackableID_Beacon01">
             <summary>
             The beacon 01's trackable ID.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.TrackableID_Beacon02">
             <summary>
             The beacon 02's trackable ID.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.TrackableID_Beacon03">
             <summary>
             The beacon 03's trackable ID.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.TrackableID_MainController">
             <summary>
             The default controller's trackable ID
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.TrackableID">
             <summary>
             Gets or sets the trackable identifier.
             Trackable ID changed at runtime will cause the identity bounds to the new trackable object.
             </summary>
             <value>The trackable identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.AcceptedConfidenceLevel">
             <summary>
             The accepted confidence level.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.IsWellTracked">
             <summary>
             The object is well tracked, consider confidence level.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.m_IsVisible">
             <summary>
             Script will activate and deactivate game object when this identity is tracked or not tracked.
             </summary>
             <value><c>true</c> if deactivate game object when not tracked; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.IsVisible">
             <summary>
             Is the marker visible at current frame ?
             </summary>
             <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.TrackedConfidence">
             <summary>
             Tracked confidence level, only available when IsVisible = true.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.OnVisibilityChange">
             <summary>
             Unity event : on object's visibility change.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.TrackableIdentity.InternalVisibleChangeEvent">
             <summary>
             Internal visible change event.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.allTrackableIdentities">
             <summary>
             static list : all trackable identities.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.m_TrackedInfo">
             <summary>
             Tracked info, updated per frame.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.VerboseLog">
             <summary>
             If true, log verbose per frame tracking information.
             </summary>
             <value><c>true</c> if verbose log; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.ConfigInfo">
             <summary>
             Gets the config info.
             </summary>
             <value>The config info.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.MarkerConfigSize">
             <summary>
             Gets the marker config size.
             </summary>
             <value>The size of the marker config.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.TrackableIdentity.Tilt">
             <summary>
             Pre tilt Qoffset to make the rotation right.
             </summary>
             <value>The tilt.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.RefreshTilt">
             <summary>
             Refreshs the tilt value.called when trackable id is changed.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.TrackableIdentity.usingFusionAPI">
             <summary>
             是否使用fusion API 获取数据?
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.UpdateTrackedInfo">
             <summary>
             Tracking engine routine.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.UpdateTrackedInfo_Using_FusionAPI(Ximmerse.RhinoX.ControllerWrap)">
             <summary>
             Update trackable identity info using fusion API for ring controller.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.UpdateTrackedInfoNonFusion">
             <summary>
             Update trackable identity info using normal X-Tag API.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.TrackableIdentity.TagTrackingEngine_OnTrackingProfileIsLoaded">
             <summary>
             Refresh tracking config info, when tracking profile has been loaded or reset.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.TrackingMode">
             <summary>
             Tracking mode.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingOrientation">
             <summary>
             tracking orientation.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingPosition">
             <summary>
             tracking position
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.TrackingMode.kTrackingEye">
             <summary>
             tracking eye (not supported in current SDK)
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.ViewFrustum">
             <summary>
             View frustum : data structure to define a view frustum
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.SvrResult">
             <summary>
             Svr result.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.PEReflectionUtility">
             <summary>
             Polyengine reflection utility 
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetEnumerations``1">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetEnumerationsExcept``1(``0[])">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetFieldValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the field value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SetFieldValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Sets the field value to the _object .
             Return true for setting successfully.
             </summary>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="FieldValue">Field value.</param>
             <param name="bindingAttribute">Binding attribute.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SetPropertyValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bFlag">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchMethodUpwards(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the method in the given type and its base type.
             </summary>
             <returns>The method upwards.</returns>
             <param name="MethodName">Method name.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchProperty(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the property in the given type. If the property is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="propertyName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchField(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the field in the given type. If the field is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="propertyName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.SearchTypeByName(System.String)">
             <summary>
             Finds the type in given fullname, case sensitive..
             </summary>
             <returns>The type.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.FindAllAssignableTypes(System.Type,System.Collections.Generic.List{System.Type})">
             <summary>
             Finds all children types to the target type.
             Return true if found.
             If OnlyProjectScripts = true, search only the scripts presents in this project. 
             Else search for all DLL loaded.
             </summary>
             <param name="">.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetFieldsWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the fields in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:Ximmerse.RhinoX.PEReflectionUtility.GetPropertiesWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the properties in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="T:Ximmerse.RhinoX.I_ExternalInputProvider">
             <summary>
             Interface : external event system input provider.
             Implement this interface and pass to RXInputModule.externalInputTrigger to implement application's input trigger.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.I_ExternalInputProvider.InputDown">
             <summary>
             Has external input trigger provides an input 'key down' ?
             </summary>
             <value><c>true</c> if input down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_ExternalInputProvider.InputUp">
             <summary>
             Has external input trigger provides an input 'key up' ?
             </summary>
             <value><c>true</c> if is pointer up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_ExternalInputProvider.InputClick">
             <summary>
             Has external input trigger provides an input 'tap' ?
             </summary>
             <value><c>true</c> if input click; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_ExternalInputProvider.Input">
             <summary>
             Has external input trigger provides any input ?
             </summary>
             <value><c>true</c> if input; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.I_ExternalInputProvider.UpdateInput">
             <summary>
             Implement your custom input handle logic at this method.
             This method is called by RhinoX event system per frame. 
             The call order is after RhinoX controller's button process and before raycaster process.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.I_TouchPadFingerState">
             <summary>
             Interface : controller's touch pad finger state.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.HasFinger">
             <summary>
             If finger is currently putting on touch pad 
             </summary>
             <value><c>true</c> if has finger; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.FingerPoint">
             <summary>
             Gets the finger point.
             </summary>
             <value>The finger point.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.FingerDownPoint">
             <summary>
             Gets the finger down frame's point.
             </summary>
             <value>The finger down point.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsFingerDown">
             <summary>
             Only true at the frame when finger pressing down touch pad.
             </summary>
             <value><c>true</c> if is finger down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsFingerUp">
             <summary>
             Only true when finger leaves touch pad.
             </summary>
             <value><c>true</c> if is finger up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsTap">
             <summary>
             Only true when finger tap on touch pad.
             </summary>
             <value><c>true</c> if is single tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.PointDelta">
             <summary>
             Delta vector to previous frame, not zero only when HasFinger = true.
             </summary>
             <value>The point delta.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsSlipUp">
             <summary>
             Is the finger slipping up on touch pad?
             </summary>
             <value><c>true</c> if is moving up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsSlipRight">
             <summary>
             Is the finger slipping right on touch pad?
             </summary>
             <value><c>true</c> if swipe right; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsSlipDown">
             <summary>
             Is the finger slipping down on touch pad ?
             </summary>
             <value><c>true</c> if swipe down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.I_TouchPadFingerState.IsSlipLeft">
             <summary>
             Is the finger slipping left on touch pad ?
             </summary>
             <value><c>true</c> if is slip left; otherwise, <c>false</c>.</value>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.PEMathf">
             <summary>
             Polyengine mathf methods library.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector4,UnityEngine.Vector4)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(System.Single)">
             <summary>
             Makes the angle a pretty value between [-180 ... 180]
             </summary>
             <returns>The angle.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(UnityEngine.Vector3)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
             <param name="euler">Euler.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PrettyAngle(UnityEngine.Quaternion)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FlattenXZ(UnityEngine.Quaternion@)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FlattenXZ(UnityEngine.Quaternion)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.DistanceXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ d of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.DotXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ DOT of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ signed angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.FloorStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not bigger than input.
             For example, input value = 0.7, step = 0.5, return = 0.5. Input vlaue = 1.2. step = 0.5, return = 1
             </summary>
             <param name="value">Value.</param>
             <param name="step">Step.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.CeilStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not smaller than input.
             For example, input value = 0.7, step = 0.5, return = 1. Input value = 1.2, step = 0.5, return = 1.5
             </summary>
             <returns>The step.</returns>
             <param name="input">Input.</param>
             <param name="step">Step.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.AngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundSingle(System.Single,System.Int32)">
             <summary>
             Rounds the float.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector2(UnityEngine.Vector2,System.Int32)">
             <summary>
             Rounds the vector2.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector3(UnityEngine.Vector3,System.Int32)">
             <summary>
             Rounds the vector3.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RoundVector4(UnityEngine.Vector4,System.Int32)">
             <summary>
             Rounds the vector4.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngle(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Gets the signed angle of baseDir and dir2
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.SignedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             返回 dir2 到 baseDir 的带符号角度。
             如果在dir2在baseDir右边，返回1.
             否则返回-1.
             如果方向相同，返回0
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.AbsDiff(System.Single,System.Single)">
             <summary>
             计算两个float 的绝对值距离
             </summary>
             <returns>The diff.</returns>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Minimum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Clamp01(UnityEngine.Vector3)">
             <summary>
             把 vect.x,y,z 的值  Clamp 在 [0..1]
             </summary>
             <param name="vect">Vect.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Maximum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.YawByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做Yaw(水平旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PitchByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做 Pitch (以X为轴旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.RollByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             Rolls by angle.
             </summary>
             <returns>The by angle.</returns>
             <param name="rotation">Rotation.</param>
             <param name="roll">Roll.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.ClampVector2(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Clamps the vector2.
             </summary>
             <returns>The vector2.</returns>
             <param name="v2">V2.</param>
             <param name="minV2">Minimum v2.</param>
             <param name="maxV2">Max v2.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Approach(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             给出原数值 single, 和目标值 target, 速度 speed, 令 single 以speed的速度逼近 target。
             </summary>
             <param name="single">Single.</param>
             <param name="target">Target.</param>
             <param name="speed">Speed.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Int2FractionalFloat(System.Int32)">
             <summary>
             转换整形数字为小数点后的浮点值： 12345 --&gt; 0.12345
             </summary>
             <returns>The fractional float.</returns>
             <param name="Int">Int.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.ThreePlaneIntersection(UnityEngine.Plane,UnityEngine.Plane,UnityEngine.Plane)">
             <summary>
             Calculate three plane's intersection position.
             </summary>
             <returns>The plane intersection.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
             <param name="p3">P3.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Calculate two line segment's intersection point.
             Do not calculate the intersection point, faster than another version. 
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
             <param name="intersection">Intersection.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@)">
             <summary>
             Calculate two line segment's intersection point.
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
             <param name="intersection">Intersection.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.PitchNYaw(UnityEngine.Quaternion)">
             <summary>
             Remove roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Pitch(UnityEngine.Quaternion)">
             <summary>
             Remove yaw and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Yaw(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.Roll(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and yaw from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.QDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             Calculate quaternion diff = lhs - rhs
             </summary>
             <returns>The iff.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.QSum(UnityEngine.Quaternion,UnityEngine.Quaternion[])">
             <summary>
             Calculate quaternion sum : lhs + rhs[0] + rhs[1] + rhs[2] ...
             </summary>
             <returns>The plus.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.PEMathf.YawDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             yaw angle diff : lhs.yaw - rhs.yaw
             </summary>
             <returns>The diff.</returns>
             <param name="lhs">lhs.</param>
             <param name="rhs">rhs.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.QuaternionShiftParam">
             <summary>
             Parameters to shift quaternion.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.QuaternionShiftParam.ShiftRotation(UnityEngine.Quaternion)">
             <summary>
             输出一个改变过的四元数.
             </summary>
             <param name="OriginRotation"></param>
             <returns></returns>
            </member>
        <member name="T:Ximmerse.RhinoX.SDKVersion">
             <summary>
             SDK version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.VIOVersion">
             <summary>
             The VIO version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.FPGAVersion">
             <summary>
             The FPGA version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.AlgorithmVersion">
             <summary>
             The object tracking algorithm version.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.SDKVersion.TagTrackingSDKVerison">
             <summary>
             The tag tracking SDK verison.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.ReticleRenderer">
             <summary>
             Cursor : in charge of cursor behaviour.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRenderer.Interactable">
             <summary>
             If the cursor if interactable to event system ? If <see langword="true" />, IPointerEnter, IPointerExit is triggered by unity's event system.
             If <see langword="true" />, IPointerClick is triggered with pointer is entered and player press return button of the RhinoX.
             </summary>
             <value><c>true</c> if interactable; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRenderer.CullingMask">
             <summary>
             Gets or sets the culling mask, this is the interactable object's layermask that this cursor able to interact with.
             </summary>
             <value>The culling mask.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRenderer.RenderAtDistance">
             <summary>
             Gets or sets the rendering distance from eye center.
             </summary>
             <value>The distance from eye center.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRenderer.VerticalOffset">
             <summary>
             Gets or sets the vertical offset of rendering position, origins from eye center.
             </summary>
             <value>The vertical offset.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ReticleRenderer.ReticleRenderVerticalOffset">
             <summary>
             Gets the reticle render vertical offset.
             </summary>
             <value>The reticle render vertical offset.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.I_LEDController.SetColor(UnityEngine.Color)">
             <summary>
             Sets the LED light color.
             </summary>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.ControllerWrap">
             <summary>
             Internal wrapper controller codes represents a controller.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.IMU_Rotation">
             <summary>
             Gets the IMU rotation of the input controller.
             </summary>
             <value>The rotation.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.RawRotation">
             <summary>
             Gets the raw ,uncalibrated rotation of the input controller.
             </summary>
             <value>The rotation.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.Gyroscope">
             <summary>
             Gets the gyroscope (angular speed in degree)
             </summary>
             <value>The gyroscope.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.Acceleration">
             <summary>
             Gets the acceleration value in meter/(sec * sec)
             </summary>
             <value>The acceleration.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.AccelerationDelta">
             <summary>
             Gets the acceleration delta.
             加速度输出值的帧间差值。
             </summary>
             <value>The acceleration delta.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.AccelerationDeltaDistance">
             <summary>
             Gets the acceleration delta distance.
             this is AccelerationDelta.magnitude.
             </summary>
             <value>The acceleration delta distance.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.UseFusionAPI">
             <summary>
             Does the controller supports fusion API to get six dof info ? 
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.xVPU">
             <summary>
             The XVPU interface.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ControllerWrap.OnConnect">
             <summary>
             Event : on controller is connected. Parameter = index.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ControllerWrap.OnConnectionStateChanged">
             <summary>
             Event : on connection state changed.
             </summary>
            </member>
        <member name="E:Ximmerse.RhinoX.ControllerWrap.OnInitState">
             <summary>
             Event : on controller is initialized. Parameter = index.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.LastTouchPadPointer">
             <summary>
             保留记录最后一次手指的位置。 这个vector2是不会被清空的。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.m_Controller_SerialNumber">
             <summary>
             Controller serial number 
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.ControllerSerialNumber">
             <summary>
             Gets the controller serial number , which is hardware property.
             </summary>
             <value>The controller sn.</value>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.GetTriggerValue">
             <summary>
             Gets the trigger value.
             获取板机的压力度。
             </summary>
             <returns>The trigger value.</returns>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.CalibrationDataFilePath">
             <summary>
             Gets the calibration data file path in *.dat pattern.
             The path is the obstained by controller's serial number.
             </summary>
             <value>The calibration data file path.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.CalibrationJsonFilePath">
             <summary>
             Gets the calibration json file path, the path is the obstained by controller's serial number.
             </summary>
             <value>The calibration json file path.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.HasFingerOnTouchPad">
             <summary>
             The has finger on touch pad.
             只要手指坐落在touch pad上， 就为true.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerPointOnTouchPad">
             <summary>
             The finger point on touch pad.
             手指坐标，只有 HasFingerOnTouchPad = true 有指。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerDownPointOnTouchPad">
             <summary>
             The finger down point on touch pad.
             落指坐标.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsFingerUpFrame">
             <summary>
             The is finger up frame.
             是否手指离开帧。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsFingerSingleTapFrame">
             <summary>
             The is finger single tap frame.
             是否单次点击操作.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerUpPointOnTouchPad">
             <summary>
             The finger down point on touch pad.
             离指坐标.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsFingerDownFrame">
             <summary>
             The is finger down frame.
             是否落指帧
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerDownTime">
             <summary>
             The finger down time.
             落指帧时间
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.MovingDeltaPerFrame">
             <summary>
             对上一帧的delta.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.SlipDelta">
             <summary>
             1/3秒内的finger 移动距离
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.MovingDeltaDirectionMask">
             <summary>
             The moving delta direction.
             只有在 HasFingerOnTouchPad = true 有值。
             如果 TouchPadButtonDirection.Center 代表手指没有移动.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.LastMovingDeltaCheckTime">
             <summary>
             上一次检验 moving delta 的起点时间， 一般 1/3秒检验一次moving delta。
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.TouchPadState.LastMovingDeltaCheckPointer">
             <summary>
             上一次 moving delta 校验发生时候的距离.
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.HasFinger">
             <summary>
             If finger is currently putting on touch pad 
             </summary>
             <value><c>true</c> if has finger; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerPoint">
             <summary>
             Gets the finger point.
             </summary>
             <value>The finger point.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.FingerDownPoint">
             <summary>
             Gets the finger down frame's point.
             </summary>
             <value>The finger down point.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsFingerDown">
             <summary>
             Only true at the frame when finger pressing down touch pad.
             </summary>
             <value><c>true</c> if is finger down; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsFingerUp">
             <summary>
             Only true when finger leaves touch pad.
             </summary>
             <value><c>true</c> if is finger up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsTap">
             <summary>
             Only true when finger tap on touch pad.
             </summary>
             <value><c>true</c> if is single tap; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.PointDelta">
             <summary>
             Delta vector to previous frame, not zero only when HasFinger = true.
             </summary>
             <value>The point delta.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsSlipUp">
             <summary>
             Is the finger slipping up on touch pad?
             </summary>
             <value><c>true</c> if is moving up; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsSlipRight">
             <summary>
              Is the finger slipping right on touch pad?
             </summary>
             <value><c>true</c> if is slip right; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsSlipDown">
             <summary>
              Is the finger slipping down on touch pad?
             </summary>
             <value><c>true</c> if is slip right; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.ControllerWrap.TouchPadState.IsSlipLeft">
             <summary>
              Is the finger slipping left on touch pad?
             </summary>
             <value><c>true</c> if is slip right; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.calibrateControllerIMURotationParameter">
             <summary>
             For tag controller only.
             Params to calibrate controller imu rotation to align to controller model.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.ControllerWrap.touchPadState">
             <summary>
             The state of the touch pad.
             触屏区域数据.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.#ctor(Ximmerse.RhinoX.InternalControllerIndex)">
             <summary>
             Initializes a new instance of the <see cref="T:Ximmerse.AIOSDK.ControllerWrap" /> class.
             </summary>
             <param name="ctrlIndex">Controller index.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.TagTrackingEngine_OnTrackingProfileIsLoaded">
             <summary>
             Event callback : when tag tracking engine loads a new profile, 
             the controller needs to make sure the correct SN-bound tracking profile is always loaded.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.LLAPIConnectionStateChange(System.Int32,System.IntPtr)">
             <summary>
             此方法在控制器连接/断连的时候触发。
             </summary>
             <param name="connect_st"></param>
             <param name="ud"></param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.Vibrate(System.Int32,System.Single)">
             <summary>
             Vibrate the controller of index with specified strength, duration is seconds.
             Strength should be value between 0 and 100.
             </summary>
             <param name="strength">Strength.</param>
             <param name="duration">Duration.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.RecenterControllerRotation(System.Single)">
             <summary>
             Recenter the controller's IMU rotation by given yaw.
             </summary>
             <param name="Yaw">Yaw.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.Update">
             <summary>
             Update this controller.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.ControllerWrap.SerialNumberToCalibFilePath(System.String,System.String@,System.String@)">
             <summary>
             Converts serial number to json and dat file.
             Return true when the serial number match any calibration data, which should be downloaded already by launcher.
             Return false when no calibration data is found.
             </summary>
             <param name="SerialNumber">Serial number.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.CameraExtension">
             <summary>
             Camera extension.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.SetCameraFov(UnityEngine.Camera,System.Single,System.Single)">
             <summary>
             Set camera's horizontal fov and vertical fov , this will break the built in fov which depends on screen's aspect.
             To restore the original fov based on Unity setting, call ResetProjectionMatrix().
             </summary>
             <param name="camera">Camera.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="viewportScale">Viewport scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrix(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a projection matrix where near, far, hFov and vFov is defined.
             </summary>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="projectionMatrix">Projection matrix.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixByCorners(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
             <summary>
             Gets the camera projection matrix by corners.
             </summary>
             <returns>The camera projection matrix by corners.</returns>
             <param name="bottomLeft">Bottom left.</param>
             <param name="bottomRight">Bottom right.</param>
             <param name="topLeft">Top left.</param>
             <param name="topRight">Top right.</param>
             <param name="cameraPosition">Camera position.</param>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrix2(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a projection matrix where near, far, nearW and nearH is defined.
             </summary>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
             <param name="projectionMatrix">Projection matrix.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.SetCameraFovWithScale(UnityEngine.Camera,System.Single,System.Single,System.Single)">
             <summary>
             Sets the camera's vFov and hFov with a scale factor.
             </summary>
             <param name="camera">Camera.</param>
             <param name="viewportScale">Viewport scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumRay(UnityEngine.Camera,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@)">
             <summary>
             Output 4 rays, 4 rays denotes to:
             [0] = frustum's bottom-left corner at near plane to far plane.
             [1] = frustum's bottom-right corner at near plane to far plane.
             [2] = frustum's top-left corner at near plane to far plane.
             [3] = frustum's top-right corner at near plane to far plane.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumRay(UnityEngine.Camera,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,UnityEngine.Ray@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Output 4 rays and distance from near corner to far corner. 4 rays denotes to:
             [0] = frustum's bottom-left corner at near plane to far plane.
             [1] = frustum's bottom-right corner at near plane to far plane.
             [2] = frustum's top-left corner at near plane to far plane.
             [3] = frustum's top-right corner at near plane to far plane.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraFrustumCorners(UnityEngine.Camera,UnityEngine.Vector3[],UnityEngine.Vector3[])">
             <summary>
             Output 2 4-dimemsional arrays which represents the near and far plane of view frustum. 
             
             The vertice order is [0]=bottom left, [1]=bottom right, [2] = top left, [3] = top right
             </summary>
             <param name="camera">Camera.</param>
             <param name="nearPlaneCorners">Near plane corners.</param>
             <param name="farPlaneCorners">Far plane corners.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraViewPortCornersAtDistance(UnityEngine.Camera,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single,UnityEngine.Space)">
             <summary>
             Gets the camera view port corners at distance.
             Scale controls the scale relative to corners center. 
             Passing scale larger than 1 you will get corners composite a rect that largers than the original view port rect, vice versa.
             By passing space = Space.Self, output the local camera space position instead of world space position.
             </summary>
             <param name="camera">Camera.</param>
             <param name="distance">Distance.</param>
             <param name="leftBottom">Left bottom.</param>
             <param name="leftTop">Left top.</param>
             <param name="rightTop">Right top.</param>
             <param name="rightBottom">Right bottom.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Camera,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info.
             </summary>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Camera,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info.
             </summary>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetCameraProjectionMatrixViewPortInfo(UnityEngine.Matrix4x4,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Gets the camera projection matrix view port info directly from projection matrix.
             </summary>
             <param name="projectionMatrix">Projection matrix.</param>
             <param name="nearViewPortW">Near view port w.</param>
             <param name="nearViewPortH">Near view port h.</param>
             <param name="farViewPortW">Far view port w.</param>
             <param name="farViewPortH">Far view port h.</param>
             <param name="near">Near.</param>
             <param name="far">Far.</param>
             <param name="hFov">H fov.</param>
             <param name="vFov">V fov.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.GetOrthographicCameraBounds(UnityEngine.Matrix4x4,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Output the orthographic camera's 2D projection rect bounds info.
             </summary>
             <param name="matrix">Matrix.</param>
             <param name="w">The width.</param>
             <param name="h">The height.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.AlignToPhysicsScreen(UnityEngine.Camera,System.Single)">
             <summary>
             Sets the camera FOV , the near view port will ends up matching the current displaying screen's physical size.
             If viewPortScale not equal to 1, the near view port's final scale will be displaying screen's physical scalee multiple the viewPortScale parameter.
             </summary>
             <param name="viewPortScale">View port scale.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.CameraExtension.TestPositionAABB(UnityEngine.Camera,UnityEngine.Vector3,System.Boolean)">
             <summary>
             Tests if the world position insides the camera's view frustum.
             If zTest = true, the z axis is considered (must within near-far plane), else only X-Y coordinate is considered.
             </summary>
             <returns><c>true</c>, if position AAB was tested, <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Ximmerse.RhinoX.RxEventRouter">
             <summary>
             Route event to other game object
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.UltiDrawExt.serializeTransform">
             <summary>
             Serialize transform represent a full hierarchy transform node.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.humanBonesTransformData">
             <summary>
             The human bones transform data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.dogBoneTransformData">
             <summary>
             The dog bones transform data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.UltiDrawExt.humanBonesArrayTransform">
             <summary>
             a constant string represent human bone array transform, in the format of serializeTransform format.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawHumanSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawMeshWireFrame(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Mesh,UnityEngine.Color)">
             <summary>
             Draws the mesh wire frame.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="mesh">Mesh.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawHumanSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a human skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawDogSkeletonLine(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a dog skeleton line.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDrawExt.DrawDogSkeleton(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Color)">
             <summary>
             Draws a dog skeleton.
             </summary>
             <param name="point">Point.</param>
             <param name="rotation">Rotation.</param>
             <param name="scale">Scale.</param>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.FoveationLevel">
             <summary>
             Enum : foveation level.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.Foveation">
             <summary>
             Foveation : data structure of foveation data.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Gain">
             <summary>
             Foveation Gain Rate [1, ...]
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Area">
             <summary>
             Foveation Area Size [0, ...]
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.Foveation.Minimum">
             <summary>
             Foveation Minimum Resolution [1, 1/2, 1/4, ..., 1/16, 0]
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.Begin">
             <summary>
             Should be called each time before actual drawing.
             Return false for fail drawing.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.DrawGridLBOrigin(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color)">
             <summary>
             Draws the grid from origin point, where center, rotation is the left bottom point of the grid.
             </summary>
             <param name="center">Center.</param>
             <param name="rotation">Rotation.</param>
             <param name="cellsX">Cells x.</param>
             <param name="cellsY">Cells y.</param>
             <param name="sizeX">Size x.</param>
             <param name="sizeY">Size y.</param>
             <param name="color">Color.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.UltiDraw.DrawGridRTOrigin(UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Single,System.Single,UnityEngine.Color)">
             <summary>
             Draws the grid from origin point, where center, rotation is the right top point of the grid.
             </summary>
             <param name="center">Center.</param>
             <param name="rotation">Rotation.</param>
             <param name="cellsX">Cells x.</param>
             <param name="cellsY">Cells y.</param>
             <param name="sizeX">Size x.</param>
             <param name="sizeY">Size y.</param>
             <param name="color">Color.</param>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.DeviceInfo">
             <summary>
             Device info : data structure to define device information configurd on this AIO device.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadX">
             <summary>
             The VIO head X offset.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadY">
             <summary>
             The VIO head Y offset
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadZ">
             <summary>
             The VIO head Z offset.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.VIO_HeadPitch">
             <summary>
             The VIO head pitch.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPX">
             <summary>
             The tracking position offset X.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPY">
             <summary>
             The tracking position offset Y.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingPZ">
             <summary>
             The tracking position offset Z.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQX">
             <summary>
             The tracking euler offset X.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQY">
             <summary>
             The tracking euler offset Y.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.DeviceInfo.TrackingQZ">
             <summary>
             The tracking euler offset Z.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.EyeRenderer">
             <summary>
             Eye renderer script : internal class, render image per eye.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.bufferCount">
             <summary>
             Buffer count of eye textures array.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.side">
             <summary>
             Side.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.m_EyeTextures">
             <summary>
             The eye texture buffers for HLAPI-LLAPI transimiting
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.m_EyeTextureIds">
             <summary>
             The eye texture identifiers.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.EyeRenderer.IsRunning">
             <summary>
             Internal status indcate if eye renderer is running;
             </summary>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.EyeRenderer.TextureId">
             <summary>
             Gets texture pointer ID.
             </summary>
             <value>The texture identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.EyeRenderer.PreviousId">
             <summary>
             Gets the previous texture pointer ID.
             </summary>
             <value>The previous identifier.</value>
            </member>
        <member name="P:Ximmerse.RhinoX.Internal.EyeRenderer.currentTexture">
             <summary>
             Gets the current rendering target texture.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.InitializeBuffers(Ximmerse.RhinoX.AntiAliasing)">
             <summary>
             Initializes the eye view render image.
             </summary>
             <param name="AntiAliasing">Anti aliasing.</param>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.InitializeCoords">
             <summary>
             Initializes the image coordinates (normalized view rect)
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.OnPreRender">
             <summary>
             Unity pre camera rendering event.
             </summary>
            </member>
        <member name="M:Ximmerse.RhinoX.Internal.EyeRenderer.OnPostRender">
             <summary>
             Unity post camera rendering event.
             </summary>
            </member>
        <member name="T:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter">
             <summary>
             Recenter head pose parameter.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.TargetPosition">
             <summary>
             Target world position
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.TargetRotation">
             <summary>
             Target world rotation
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.BackwardTime">
             <summary>
             The backward time.
             </summary>
            </member>
        <member name="F:Ximmerse.RhinoX.Internal.RecenterHeadPoseParameter.AcceptableErrorMinimumDistance">
             <summary>
             The acceptable error distance limitation. 
             If distance between [current head position] and [TargetPosition] less then the [AcceptableErrorMinimumDistance], will not recenter.
             </summary>
            </member>
    </members>
</doc>
