<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhinoXDebugger</name>
    </assembly>
    <members>
        <member name="T:RhinoXDebugger.UnityNetworking.SyncARObjectRigMessage">
             <summary>
             Sync AR Camera's local pose to Editor Debugger.
             Sync left and right controller pose to editor debugger.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetMessage">
             <summary>
             Ti-network message.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetMessage.StartIndex">
             <summary>
             Start index of the message buffer inside the total buffer block. Will be reset each time before sent.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetMessage.CurrentIndex">
             <summary>
             Current index of the message operation cursor.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetMessage.TotalPassBufferLength">
             <summary>
             The total pass read/write buffer count.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetMessage.IsSent">
             <summary>
             Is the tinet message sent ?
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.Serialize(System.Byte[],System.Int32)">
             <summary>
             Serialize message content to buffer, starts at StartIndex.
             Return the total write byte count.
             </summary>
             <param name="buffer"></param>
             <param name="StartIndex"></param>
             <returns>总共写出的数据长度.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.Deserialize(System.Byte[],System.Int32)">
             <summary>
             Deserialize the message, starts at StartIndex.
             Return the total read byte count.
             </summary>
             <param name="buffer"></param>
             <param name="StartIndex"></param>
             <returns>总共读取的数据长度.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.OnSerialize">
             <summary>
             Implment on serialized in child class.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.OnDeserialize">
             <summary>
             Implment on deserialized in child class.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.Reset">
             <summary>
             Resets this message instance.
             Reset is called when the message is returned to pool.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteBool(System.Boolean)">
             <summary>
             Writes a bool into message buffer
             </summary>
             <param name="Bool"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteByte(System.Byte)">
             <summary>
             Writes a byte into message buffer.
             </summary>
             <param name="Byte"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteSbyte(System.SByte)">
             <summary>
             Writes a signed byte into message buffer.
             </summary>
             <param name="Byte"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteUShort(System.UInt16)">
             <summary>
             Writes a ushort into message buffer.
             </summary>
             <param name="UShort"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteShort(System.Int16)">
             <summary>
             Writes a short into message buffer.
             </summary>
             <param name="Short"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteInt(System.Int32)">
             <summary>
             Writes an interger into message buffer.
             </summary>
             <param name="Interger"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteUInt(System.UInt32)">
             <summary>
             Writes an unsigned interger into message buffer.
             </summary>
             <param name="Interger"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteFloat(System.Single)">
             <summary>
             Writes a float into message buffer.
             </summary>
             <param name="Single"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteLong(System.Int64)">
             <summary>
             Writes a long into message buffer
             </summary>
             <param name="Long"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteULong(System.UInt64)">
             <summary>
             Writes a ulong into message buffer
             </summary>
             <param name="uLong"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteDouble(System.Double)">
             <summary>
             Writes a double
             </summary>
             <param name="Double"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteDecimal(System.Decimal)">
             <summary>
             Writes a decimal into message buffer
             </summary>
             <param name="Decimal"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector2(UnityEngine.Vector2)">
             <summary>
             Writes a vector2 into message buffer
             </summary>
             <param name="vector2"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector3(UnityEngine.Vector3)">
             <summary>
             Writes a vector3 into message buffer
             </summary>
             <param name="vector3"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector4(UnityEngine.Vector4)">
             <summary>
             Writes a vector4 into message buffer
             </summary>
             <param name="vector4"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteQuaternion(UnityEngine.Quaternion)">
             <summary>
             Writes a vector4 into message buffer
             </summary>
             <param name="quaternion"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector2Int(UnityEngine.Vector2Int)">
             <summary>
             Writes a vector2int into message buffer
             </summary>
             <param name="vector2int"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector3Int(UnityEngine.Vector3Int)">
             <summary>
             Writes a vector2int into message buffer
             </summary>
             <param name="vector3int"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector4Int(RhinoXDebugger.pVector4Int)">
             <summary>
             Writes a vector4int into message buffer
             </summary>
             <param name="vector4int"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteString(System.String)">
             <summary>
             Writes a string into message buffer
             </summary>
             <param name="text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteBytes(System.Byte[])">
             <summary>
             Writes a buffer into message buffer
             </summary>
             <param name="buffer"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteBytes(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes a buffer into message buffer
             </summary>
             <param name="buffer"></param>
             <param name="length"></param>
             <param name="startIndex"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteByteArray(System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes a buffer into message buffer
             </summary>
             <param name="buffer"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteBoolArray(System.Boolean[])">
             <summary>
             Writes a bool list into message buffer
             </summary>
             <param name="boolList"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteBoolList(System.Collections.Generic.List{System.Boolean})">
             <summary>
             Writes a bool list into message buffer
             </summary>
             <param name="boolList"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteShortArray(System.Int16[])">
             <summary>
             Writes a short array into message buffer
             </summary>
             <param name="shortArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteShortList(System.Collections.Generic.List{System.Int16})">
             <summary>
             Writes a short array into message buffer
             </summary>
             <param name="shortList"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteIntArray(System.Int32[])">
             <summary>
             Writes a int array into message buffer
             </summary>
             <param name="intArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteIntList(System.Collections.Generic.List{System.Int32})">
             <summary>
             Writes a int list into message buffer
             </summary>
             <param name="intList"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteFloatArray(System.Single[])">
             <summary>
             Writes a float array into message buffer
             </summary>
             <param name="floatArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteFloatList(System.Collections.Generic.List{System.Single})">
             <summary>
             Writes a int list into message buffer
             </summary>
             <param name="floatList"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteLongArray(System.Int64[])">
             <summary>
             Writes a long array into message buffer
             </summary>
             <param name="longArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteVector3Array(UnityEngine.Vector3[])">
             <summary>
             Writes a vector3 array into message buffer
             </summary>
             <param name="vector3Array"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteQuaternionArray(UnityEngine.Quaternion[])">
             <summary>
             Writes a quaternion array into message buffer
             </summary>
             <param name="quaternionArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.WriteStringArray(System.String[])">
             <summary>
             Writes a string array into message buffer
             </summary>
             <param name="stringArray"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadBool">
             <summary>
             Reads a boolean value from message buffer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadByte">
             <summary>
             Reads byte from message buffer.
             </summary>
             <param name="Byte"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadSbyte">
             <summary>
             Reads sbyte from message buffer.
             </summary>
             <param name="Byte"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadUShort">
             <summary>
             Reads a ushort from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadShort">
             <summary>
             Writes a short from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadInt">
             <summary>
             Reads an interger from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadUInt">
             <summary>
             Reads an unsigned interger from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadFloat">
             <summary>
             Reads a float from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadLong">
             <summary>
             Reads a long from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadUlong">
             <summary>
             Reads an ulong from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadDouble">
             <summary>
             Reads a double from message buffer
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadDecimal">
             <summary>
             Reads a decimal from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector2">
             <summary>
             Reads a vector2 from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector3">
             <summary>
             Reads a vector3 from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector4">
             <summary>
             Reads a vector4 from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadQuaternion">
             <summary>
             Reads a quaternion from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector2Int">
             <summary>
             Reads a vector2int from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector3Int">
             <summary>
             Reads a vector3int from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector4Int">
             <summary>
             Reads a vector4int from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadString">
             <summary>
             Reads a string from message buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadBytes">
             <summary>
             Reads a buffer from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadBytes(System.Byte[])">
             <summary>
             Reads a buffer from message buffer
             </summary>
             <param name="buffer"></param>
             <returns>the return buffer count.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadBools(System.Collections.Generic.List{System.Boolean})">
             <summary>
             Reads a bool list from message buffer.
             </summary>
             <param name="boolList">The bool list</param>
             <returns>Read count.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadShorts">
             <summary>
             Reads a short array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadShorts(System.Collections.Generic.List{System.Int16})">
             <summary>
             Reads a short list from message buffer.
             </summary>
             <param name="shortList">The short list</param>
             <returns>Read count.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadInts">
             <summary>
             Reads a int array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadInts(System.Collections.Generic.List{System.Int32})">
             <summary>
             Reads a int list from message buffer.
             </summary>
             <param name="intList">The int list</param>
             <returns>Read count.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadFloats">
             <summary>
             Reads a float array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadFloats(System.Collections.Generic.List{System.Single})">
             <summary>
             Reads a float list from message buffer.
             </summary>
             <param name="floatList">The float list</param>
             <returns>Read count.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadLongs">
             <summary>
             Reads a long array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector2s">
             <summary>
             Reads a vector2 array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadVector3s">
             <summary>
             Reads a vector3 array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadQuaternions">
             <summary>
             Reads a quaternion array from message buffer
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetMessage.ReadStrings">
             <summary>
             Reads a string array from message buffer
             </summary>
            </member>
        <member name="T:RhinoXDebugger.EditorDebugger">
             <summary>
             Editor debugger input system.
             </summary>
             <summary>
             Unity editor debugger host.
             </summary>
             <summary>
             EditorDebugger_GroundPlaneSync.cs.
             用于同步editor的 ground plane 对象。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EditorDebugger.kButtonCode">
             <summary>
             All button codes.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.EditorDebugger.EditorDebuggerButtonState">
             <summary>
             Button state of editor debugger.
             Sync from remote rhino X.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.EditorDebuggerButtonState.OnFrameEndUpdate">
             <summary>
             Clear button state at frame end
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.InitializeEditorRemoteInputSystem">
             <summary>
             Initialize button input system.
             Called at Awake();
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.OnSyncControllerButtonEventMessage(RhinoXDebugger.UnityNetworking.TiNetMessage,System.Net.IPEndPoint)">
             <summary>
             On sync ARCamera's local pose
             </summary>
             <param name="message"></param>
             <param name="endPoint"></param>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.Disconnect">
             <summary>
             Disconnect the debugger.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.ConnectsTo(System.Int32)">
             <summary>
             Connects to device (index by the peer node list)
             </summary>
             <param name="PeerNodeIndex"></param>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.ConnectsTo(System.String)">
             <summary>
             Connects to device (index by the peer node list)
             </summary>
             <param name="PeerNodeIndex"></param>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.SubmitFrame">
             <summary>
             At editor to submit eye buffer texture frame to device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.SubmitNetworkFrame">
             <summary>
             Routine : 循环提交帧图像到网络。
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.Perspective(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a perspective matrix.
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <param name="bottom"></param>
             <param name="top"></param>
             <param name="near"></param>
             <param name="far"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.OnSyncARObjectRigMessage(RhinoXDebugger.UnityNetworking.TiNetMessage,System.Net.IPEndPoint)">
             <summary>
             On sync AR Object Rig message
             </summary>
             <param name="message"></param>
             <param name="endPoint"></param>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.OnSyncARCameraRigWorldPose(RhinoXDebugger.UnityNetworking.TiNetMessage,System.Net.IPEndPoint)">
             <summary>
             On sync ARCameraRig's world pose
             </summary>
             <param name="message"></param>
             <param name="endPoint"></param>
            </member>
        <member name="T:RhinoXDebugger.EditorDebugger.GroundPlaneState">
             <summary>
             Ground plane state.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EditorDebugger.groundPlaneStateMap">
             <summary>
             Sync ground plane state map.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EditorDebugger.SubmitGroundPlaneProperty">
             <summary>
             提交同步 Ground Plane 的消息
             </summary>
            </member>
        <member name="T:RhinoXDebugger.Reflection.PEReflectionUtility">
             <summary>
             Polyengine reflection utility 
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.CopyAndPasteSerializableFields(System.Object,System.Object)">
             <summary>
             Copy src object's serializable fields to target object.
             </summary>
             <param name="srcObj"></param>
             <param name="targetObj"></param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetMethodInfoText(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Get the debug string of the method info of the type.
             </summary>
             <param name="type"></param>
             <param name="binding"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetPropertiesInfoText(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Get the debug string of the property info of the type.
             </summary>
             <param name="type"></param>
             <param name="binding"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetFieldsInfoText(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Get the debug string of the field info of the type.
             </summary>
             <param name="type"></param>
             <param name="binding"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetEnumerations``1">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetEnumerationsExcept``1(``0[])">
             <summary>
             Return enumerations in array
             </summary>
             <returns>The enumerations.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetFieldValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the field value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="bindingAttribute">binding flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SetFieldValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Sets the field value to the _object .
             Return true for setting successfully.
             </summary>
             <param name="_object">Object.</param>
             <param name="FieldName">Field name.</param>
             <param name="FieldValue">Field value.</param>
             <param name="bindingAttribute">Binding attribute.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="PropertyName">Field name.</param>
             <param name="bindingAttribute">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.InvokeMethod``1(System.Reflection.MethodInfo,System.String,System.Object[])">
             <summary>
             Invoke a method with parameters and cast to type then return.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="target"></param>
             <param name="param"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.InvokeMethod(System.Reflection.MethodInfo,System.String,System.Object[])">
             <summary>
             Invoke a method with parameters.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="target"></param>
             <param name="param"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.IsPropertyStatic(System.Reflection.PropertyInfo)">
             <summary>
             Is the property info declared as static ?
             </summary>
             <param name="propertyInfo"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SetPropertyValue``1(System.Object,System.String,``0,System.Reflection.BindingFlags,System.Boolean)">
             <summary>
             Gets the property value.
             </summary>
             <returns>The field value.</returns>
             <param name="_object">Object.</param>
             <param name="PropertyName">Field name.</param>
             <param name="bindingAttribute">B flag.</param>
             <param name="SearchUpwards">If set to <c>true</c> search upwards.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchMethodUpwards(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the method in the given type and its base type.
             </summary>
             <returns>The method upwards.</returns>
             <param name="MethodName">Method name.</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchProperty(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the property in the given type. If the property is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="propertyName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchField(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             Searchs the field in the given type. If the field is not found ,will try searching upwards along base type.
             </summary>
             <returns>The property.</returns>
             <param name="type">Type.</param>
             <param name="fieldName">Property name.</param>
             <param name="bindingFlags">Binding flags.</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchFieldsOfType``1(System.Type,System.Collections.Generic.List{System.Reflection.FieldInfo},System.Boolean,System.Func{System.Reflection.FieldInfo,System.Boolean},System.Reflection.BindingFlags)">
             <summary>
             给出 type, 查找所有类型等于（或者是 isAssignableFrom) 目标类型的字段。
             </summary>
             <param name="type"></param>
             <param name="fields"></param>
             <param name="restrictMatch">要求字段类型严格匹配， 否则就是使用 IsAssignableFrom </param>
             <param name="FilterFunc">过滤方法， 返回true代表此field info被保留， 返回false 代表抛弃。</param>
             <param name="bindingFlags"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchForTypesWithAttribute``1(System.Collections.Generic.List{System.Type})">
             <summary>
             Search for types that state with attribute
             </summary>
             <typeparam name="T"></typeparam>
             <param name="typeList"></param>
             <returns>The search result count.</returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchForMembersWithAttribute``1(System.Type,System.Collections.Generic.List{System.Reflection.MemberInfo},System.Boolean,System.Reflection.BindingFlags)">
             <summary>
             Search for member info with custom attribute attached.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="type"></param>
             <param name="memberInfos">用于接收输出的对象。</param>
             <param name="inherit">是否搜索基类型的成员.</param>
             <returns>The search result count.</returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.HasAttribute``1(System.Reflection.FieldInfo)">
             <summary>
             判断 field info 是否有自定义属性标签
             </summary>
             <returns><c>true</c> if has attribute the specified field info; otherwise, <c>false</c>.</returns>
             <param name="fieldInfo">Field info.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.HasAttribute``1(System.Reflection.MemberInfo,``0@)">
             <summary>
             判断 field info 是否有自定义属性标签
             </summary>
             <returns><c>true</c> if has attribute the specified field info; otherwise, <c>false</c>.</returns>
             <param name="memberInfo">Field info.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.HasAttribute``1(System.Reflection.MemberInfo)">
             <summary>
             判断 member info 是否有自定义属性标签
             </summary>
             <returns><c>true</c> if has attribute the specified memeberInfo; otherwise, <c>false</c>.</returns>
             <param name="memeberInfo">Memeber info.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.HasAttribute``1(System.Type)">
             <summary>
             判断 member info 是否有自定义属性标签
             </summary>
             <returns><c>true</c> if has attribute the specified memeberInfo; otherwise, <c>false</c>.</returns>
             <param name="type">Type info.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.HasAttribute``1(System.Type,``0@)">
             <summary>
             判断 member info 是否有自定义属性标签
             </summary>
             <returns><c>true</c> if has attribute the specified memeberInfo; otherwise, <c>false</c>.</returns>
             <param name="type">Type info.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetAllFields(System.Type,System.Collections.Generic.List{System.Reflection.FieldInfo},System.Reflection.BindingFlags)">
             <summary>
             Gets all fields - include base type.
             获取所有的字段 （包括BaseType)
             </summary>
             <param name="type"></param>
             <param name="fields"></param>
             <returns>Field count</returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchTypeByName(System.String)">
             <summary>
             Finds the type in given fullname, case sensitive..
             </summary>
             <returns>The type.</returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchTypeByName(System.String,System.String)">
             <summary>
             Finds the type in given full name and full assembly name, case sensitive.
             </summary>
             <param name="fullTypeName"></param>
             <param name="fullAssemblyName"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.SearchForChildrenTypes(System.Type,System.Collections.Generic.List{System.Type})">
             <summary>
             查找所有继承了 baseType 的子类型。
             </summary>
             <param name="baseType"></param>
             <param name="subTypes"></param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.FindAllAssignableTypes(System.Type,System.Collections.Generic.List{System.Type})">
             <summary>
             Finds all children types to the target type.
             Return true if found.
             If OnlyProjectScripts = true, search only the scripts presents in this project. 
             Else search for all DLL loaded.
             </summary>
             <param name="baseType">基础类</param>
             <param name="typeList">输出类型列表</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetAttribute``1(System.Type,System.Boolean)">
             <summary>
             Get attribute of type from class type
             </summary>
             <typeparam name="T"></typeparam>
             <param name="type"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetAttribute``1(System.Reflection.FieldInfo,System.Boolean)">
             <summary>
             Get attribute of type from class type
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetFieldsWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the fields in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetPropertiesWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Return the properties in array which has target attribute attach to.
             </summary>
             <returns>The fields with attribute.</returns>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetAllSerializableFields(System.Type)">
             <summary>
             Gets all serializable fields.
             </summary>
             <returns>The all serializable fields.</returns>
             <param name="type">Target type.</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.GetAllSerializableFields(System.Type,System.Collections.Generic.List{System.Reflection.FieldInfo})">
             <summary>
             Gets all serializable fields.
             </summary>
             <returns>The all serializable fields.</returns>
             <param name="type">Target type.</param>
            </member>
        <member name="M:RhinoXDebugger.Reflection.PEReflectionUtility.IsFieldSerializable(System.Reflection.FieldInfo)">
             <summary>
             Is the field serializable.
             </summary>
             <returns><c>true</c>, if field serializable was ised, <c>false</c> otherwise.</returns>
             <param name="field">Field.</param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UDPConnection">
             <summary>
             UDP connection wrapper.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.ipEndpoint">
             <summary>
             The ip endpoint of the peer
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.asyncEventArgs">
             <summary>
             The async event arguments.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.ConnectionTime">
             <summary>
             Gets the connection time.
             </summary>
             <value>The connection time.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.IsPendingAsyncSend">
             <summary>
             Is any async-sending action currently pend ?
             </summary>
             <value><c>true</c> if is pending action; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.lastAsyncSendResult">
             <summary>
             Gets the last async send result.
             </summary>
             <value>The last async send result.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPConnection.UnityObject">
             <summary>
             Unity object context.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPConnection.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:RhinoXDebugger.UnityNetworking.UDPConnection" /> class.
             </summary>
             <param name="remoteEndPoint">Remote end point.</param>
             <param name="connectionTime">Connection time.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPConnection.AsyncEventArgs_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
             <summary>
             On socket async operation complete.
             </summary>
             <param name="sender">Sender.</param>
             <param name="e">E.</param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.NetworkChannel">
             <summary>
             network channel represents a network behaviour that can receive data.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetworkChannel.OnFlushData">
             <summary>
             Event : on receive data and flush all the data at one call
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetworkChannel.OnReceiveData">
             <summary>
             The on receive data callback.
             Note : if socket receive more than one packet, this callback could be invoked multiple time in one frame.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetworkChannel.InvokeOnFlushData(System.Collections.Generic.IEnumerable{RhinoXDebugger.UnityNetworking.NetworkDataPacket})">
             <summary>
             Invoke on client flush received data.
             </summary>
             <param name="packets"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetworkChannel.InvokeOnReceiveData(RhinoXDebugger.UnityNetworking.NetworkDataPacket)">
             <summary>
             Invoke on client receive a data packet.
             This event is call for every data packet received.
             </summary>
             <param name="packet"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper">
             <summary>
             UdpSocketListenerWrapper.cs
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.kBufferSize">
             <summary>
             Default receive buffer size: 512KB
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.UnityObject">
             <summary>
             a unity engine object as a context to engine operation, like log, coroutine, etc.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.IsBound">
             <summary>
             Is the UDP socket bound to port ?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.mutex">
             <summary>
             Threading mutex.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.BindToLocalAddress(System.Int32)">
             <summary>
             Binds the UDP socket listener to port at local IP address.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.BindToBroadcastAddress(System.Int32)">
             <summary>
             Binds the UDP socket listener to LAN broadcasting address.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.Unbind">
             <summary>
             对一个已经绑定了的Socket wrapper解绑定
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketListenerWrapper.PopReceivePacket(System.Collections.Generic.List{RhinoXDebugger.UnityNetworking.TiNetworkPacket})">
             <summary>
             Pop received packets to list.
             Internal packet list will be clear after called.
             </summary>
             <param name="packets"></param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetworkPacketPool">
             <summary>
             TiNetwork packet pool.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetworkPacketPool.kInitBufferSizePerPacket">
             <summary>
             Buffer size count for each network packet.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkPacketPool.Init">
             <summary>
             Init the pool
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkPacketPool.GetNetworkPacket">
             <summary>
             Gets network packet from pool.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkPacketPool.Return(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             Returns the network data packet to pooled list.
             </summary>
             <param name="packet"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TcpConnection">
             <summary>
             Tcp Connection 
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpConnection.ServerID">
             <summary>
             在服务器上的Server，由服务器初始化ID,客户端没有服务器的ID
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpConnection.Port">
             <summary>
             链接的客户端的端口
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpConnection.ClientIP">
             <summary>
             链接的客户端的ip
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpConnection.ConnectionSocket">
             <summary>
             链接的客户端的TcpClient
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpConnection.#ctor(System.Net.Sockets.Socket,System.Int32)">
             <summary>
             初始化
             </summary>
             <param name="Accept"></param>
             <param name="AcceptID"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpConnection.#ctor(System.Net.Sockets.Socket)">
             <summary>
             初始化
             </summary>
             <param name="Accept"></param>
             <param name="AcceptID"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.I_Connection">
             <summary>
             Interface : UDP Connection.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_Connection.ipEndpoint">
             <summary>
             The remote endpoint
             </summary>
             <value>The ip endpoint.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_Connection.ConnectionTime">
             <summary>
             Gets the connection setup time.
             </summary>
             <value>The connection time.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_Connection.UnityObject">
             <summary>
             Unity object context.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.I_TiNetNode">
             <summary>
             Interface : Ti Net node.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.IsLocalNode">
             <summary>
             是否本地网络节点?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.Address">
             <summary>
             The node's address.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.NodeName">
             <summary>
             Gets the node unique name.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.NodeID">
             <summary>
             Gets the node id
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.CustomTag">
             <summary>
             The node's custom tag.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.NodeStartTime">
             <summary>
             The node's start time in reality.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.I_TiNetNode.UserData">
             <summary>
             The user data allows application script to extent TiNetNode instance.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool">
             <summary>
             TiNet message instance pool.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.MessageKeyCodeMap">
             <summary>
             Message type - key map
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.MessageKeyTypeMap">
             <summary>
             Message key - type map.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.GetMessage(System.Int16)">
             <summary>
             Gets a pooled TiNetMessage instance.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="MessageKeyCode"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.GetMessage``1(System.Int16)">
             <summary>
             Gets a pooled TiNetMessage instance.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="MessageKeyCode"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.GetMessage``1">
             <summary>
             Gets a pooled TiNetMessage instance.
             </summary>
             <typeparam name="T"></typeparam>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.ReturnMessage``1(System.Int16,``0)">
             <summary>
             Returns a message to pool.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="MessageKeyCode"></param>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetworkMessagePool.GetAttribute(System.Type)">
             <summary>
             Gets TiNetwork message attribute.
             </summary>
             <param name="msgType"></param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.pVector4Int">
             <summary>
             Vector4 int
             </summary>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.Clamp(RhinoXDebugger.pVector4Int,RhinoXDebugger.pVector4Int)">
             <summary>
             Clamps the Vector4Int to the bounds given by min and max.
             </summary>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.Max(RhinoXDebugger.pVector4Int,RhinoXDebugger.pVector4Int)">
             <summary>
             Returns a vector that is made from the largest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.Min(RhinoXDebugger.pVector4Int,RhinoXDebugger.pVector4Int)">
             <summary>
             Returns a vector that is made from the smallest components of two vectors.
             </summary>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.Distance(RhinoXDebugger.pVector4Int,RhinoXDebugger.pVector4Int)">
             <summary>
             return distance between a and b
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.FloorToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector4 to a Vector4Int by doing a Floor to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.RoundToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Round to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.CeilToInt(UnityEngine.Vector4)">
             <summary>
             Converts a Vector3 to a Vector3Int by doing a Ceiling to each value.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="M:RhinoXDebugger.pVector4Int.Scale(RhinoXDebugger.pVector4Int,RhinoXDebugger.pVector4Int)">
             <summary>
             Multiplies two vectors component-wise.
             Every component in the result is a component of a multiplied by the same component of b.
             </summary>
             <returns>The to int.</returns>
             <param name="v4">V4.</param>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.SimpleBytesMessage.length">
             <summary>
             The write length;
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.MessageAttribute">
             <summary>
             Message channel attribute
             </summary>
            </member>
        <member name="T:RhinoXDebugger.GenericCollectionUtils">
             <summary>
             Generic collection utils .
             </summary>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.AddElement``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
             <summary>
             Adds an element to IDictionary[T1, List[T2]] .
             Will create a list object if the key doesn't exist.
             Return element count.
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.GetLastElement``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,System.Boolean)">
             <summary>
             查询列表型字典元素，返回最后一个元素。
             如果 remove 为true， 则在返回之前从列表中删除。
             此方法可高效的用于池字典。
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <param name="remove">如果remove为true，则在返回元素之前删除列表。</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveElement``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1,System.Boolean)">
             <summary>
             Remove element value from list retrieved by dictionary[key].
             Return element count.
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <param name="value"></param>
             <param name="RemoveEmptyList">If true, remove the key from dictionary when the retrieved list is empty. </param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.AddElements``1(System.Collections.Generic.IList{``0},System.Int32)">
             <summary>
             Add default elements to list.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="addCount">The element count to be added.</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},``0[],System.Int32,System.Int32)">
             <summary>
             Adds array start from offset , in size.
             if offset + size &gt;= Array length, tries to add as many element as possible.
             Return added element count.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="Array"></param>
             <param name="offset"></param>
             <param name="size"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.AddOrSetDictionary``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
             <summary>
             给字典内容赋值.如果key不存在则添加key，否则直接赋值。
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <param name="value"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.GetOrAddDictionary``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
             <summary>
             Given a dictonary, gets or add an value at the key.
             The value is instantiated with default new() constructor.
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
             <summary>
             Given a dictonary, gets by key if key exists, or return default value.
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.GetOrAddDictionary``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
             <summary>
             Given a dictonary, gets or add a element at the key, if the ket did not exists, adds the default value.
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.GetOrAddDictionaryListElement``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0)">
             <summary>
             对于列表元素类型, 获取或者创建一个 list 对象。
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
             <param name="key"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ClearNull``1(System.Collections.Generic.List{``0})">
             <summary>
             Clears null element from list.
             Returns the element count which is removed.
             Call this method for UnityEngine object list.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ClearNullElement``1(System.Collections.Generic.List{``0})">
             <summary>
             Clears null element from list.
             Returns the element count which is removed.
             For unity object list, call [ClearNull], call this method for non-unity object list.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ClearDictionaryListValues``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
             <summary>
             Clear all list values inside the [T1, List[T2]] dictionary.
             This method do not clear the dictionary entry. So the key-value persist.
             此方法不会销毁字典的键值索引记录。
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ClearAndDestroyDictionaryListValues``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Single,System.Boolean)">
             <summary>
             Clear and all list values inside the [T1, List[T2]] dictionary, and destroy all unity objects inside those lists.
             This method do not clear the dictionary entry. So the key-value persist.
             此方法不会销毁字典的键值索引记录
             </summary>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <param name="dict"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.CollectionMaterials(System.Collections.Generic.IEnumerable{UnityEngine.Renderer},System.Collections.Generic.List{UnityEngine.Material})">
             <summary>
             Collect material from renderers.
             </summary>
             <param name="renderers"></param>
             <param name="materials"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
             <summary>
             Is the list null or empty ?
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.IsNullOrEmpty``1(``0[])">
             <summary>
             Is the list null or empty ?
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyAll``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Destroy and clear the unity object list.
             删除并且清空list中的所有的unity object。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyAndRemoveAt``1(System.Collections.Generic.IList{``0},System.Int32,System.Single,System.Boolean)">
             <summary>
             Destroy the list[Index] and remove from the list.
             删除并销毁 list 中 element index 所指向的 Unity object.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="index"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyGameObjectAndRemoveAt``1(System.Collections.Generic.IList{``0},System.Int32,System.Single,System.Boolean)">
             <summary>
             Destroy the list[Index] and remove from the list, this method also destroy the game object of the component.
             删除并销毁 list 中 element index 所指向的 Unity component  和 它的 game object.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="index"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyAllGameObjects``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Destroy and clear the components game object.
             删除并且清空list中的所有的unity object。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DeleteFirst``1(System.Collections.Generic.IList{``0})">
             <summary>
             Delete the first element from the list.
             If you want to delete and destroy the unity object list element, call DestroyFirst() instead.
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DeleteLast``1(System.Collections.Generic.IList{``0})">
             <summary>
             Delete the last element from the list.
             If you want to delete and destroy the unity object list element, call DestroyLast() instead.
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyFirst``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Delete and destroy the first element from the unity object list.
             If you want to destroy the game object too, call DestroyFirstWithGameObject()
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyLast``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Delete and destroy the last element from the unity object list.
             If you want to destroy the game object too, call DestroyGameObjectLast()
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyFirstWithGameObject``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Delete and destroy the first element and its game object from the unity object list.
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.DestroyLastWithGameObject``1(System.Collections.Generic.IList{``0},System.Single,System.Boolean)">
             <summary>
             Delete and destroy the last element and its game object from the unity object list.
             Return true if deleted, else return false - if the list are null, or empty.
             </summary>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.SetEnable``1(``0[],System.Boolean)">
             <summary>
             sets the monobehaviours enable / disable
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
             <param name="enabled"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.SetEnable``1(System.Collections.Generic.IList{``0},System.Boolean)">
             <summary>
             sets the monobehaviours enable / disable
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="enabled"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.For``2(``0[],System.Func{``0,System.Int32,``1})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             With a return value.
             </summary>
             <param name="array">Generic list.</param>
             <param name="func">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ForReverse2``2(``0[],System.Func{``0,System.Int32,``1})">
             <summary>
             Loops on each element on a negative direction (starts from last);
             With a return value.
             </summary>
             <param name="array">Generic list.</param>
             <param name="func">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.For2``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             With a return value.
             </summary>
             <param name="list">Generic list.</param>
             <param name="func">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ForReverse``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
             <summary>
             Loops on each element on a negative direction (starts from last);
             </summary>
             <param name="list">Generic list.</param>
             <param name="func">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.Last``1(System.Collections.Generic.IList{``0})">
             <summary>
             Return the last element from the list, return default(T) if list is empty.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveFirst``1(System.Collections.Generic.IList{``0})">
             <summary>
             Remove and return the first element from the list
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveLast``1(System.Collections.Generic.IList{``0})">
             <summary>
             Remove and return the last element from the list
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveFromTail``1(System.Collections.Generic.IList{``0},System.Int32)">
             <summary>
             从尾部开始删除[Count]个元素。
             如果[Count]大于list的元素个数，则会清空 list.
             返回删除的元素个数.
             </summary>
             <param name="list"></param>
             <param name="Count"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveFromList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
             <summary>
             从 list 中删除 otherList 中的元素.
             </summary>
             <param name="list"></param>
             <param name="otherList"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveFromList``1(System.Collections.Generic.IList{``0},``0[])">
             <summary>
             从 list 中删除 others 中的元素.
             </summary>
             <param name="list"></param>
             <param name="others"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.RemoveFromHead``1(System.Collections.Generic.IList{``0},System.Int32)">
             <summary>
             从头部开始删除[Count]个元素。
             如果[Count]大于list的元素个数，则会清空 list.
             返回删除的元素个数.
             </summary>
             <param name="list"></param>
             <param name="Count"></param>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.ShuffleList``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32})">
             <summary>
             Shuffle a list.
             </summary>
             <param name="list"></param>
             <typeparam name="T"></typeparam>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.SafeGet``1(``0[],System.Int32)">
             <summary>
             此方法自动处理数组越界问题， 将index限定在 array 数组范围内。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
             <param name="index"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.SafeGet``1(System.Collections.Generic.IList{``0},System.Int32)">
             <summary>
             此方法自动处理数组越界问题， 将index限定在 array 数组范围内。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="index"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.SetElementAtIndex``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
             <summary>
             在 List 上设置第 Index 位置的元素 = element.
             如果List的capacity 不够，会自动扩容。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="list"></param>
             <param name="element"></param>
             <param name="Index"></param>
             <returns>是否对list执行了扩容操作。</returns>
            </member>
        <member name="M:RhinoXDebugger.GenericCollectionUtils.WaitAll``1(System.Collections.Generic.IList{``0})">
             <summary>
             Wait for all tasks in the list.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="tasks"></param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TCPClient">
             <summary>
             Tcp client wrapper
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TCPClient.ConnectingState">
             <summary>
             For async connecting state data.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.ConnectionTimeout">
             <summary>
             Timeout for establishing connection
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.m_DropTimeout">
             <summary>
             Timeout for dropping connection
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.DropTimeout">
             <summary>
             超时断连时间 - 默认6秒。
             在这个时间内，如没有收到任何信息， 则连接自动断开.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.m_UsingRawSocket">
             <summary>
             使用原始 Socket 通信， 不会附加 MessageHeader， 不会使用结构化的通信方式。
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.UsingRawSocket">
             <summary>
             使用原始 Socket 通信， 不会附加 MessageHeader， 不会使用结构化的通信方式。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.KeepAlive">
             <summary>
             Sets the socket option to keep it alive ?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.m_SendBufferSize">
             <summary>
             Send buffer size, default value = 8192 (8Kb)
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.SendBufferSize">
             <summary>
             Send buffer size, default value = 8192 (8Kb)
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.TcpClient">
             <summary>
             Raw tcp client object.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.RecvDataPackets">
             <summary>
             所有收到的数据包.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPClient.RecvRawMsg">
             <summary>
             Received raw byte[]
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.IsClientConnected">
             <summary>
             Is the client currently connected ?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.IsClientConnecting">
             <summary>
             Is the client connecting?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.IsClientDisconnected">
             <summary>
             Is the connect disconnected ?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.clientState">
             <summary>
             TcpClient 的状态， 无连接/连接中/已经连接
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPClient.ConnectionStartTime">
             <summary>
             Connection setup time.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.StartClient">
             <summary>
             Start client.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.StopClient">
             <summary>
             Stops client.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.Send(System.Byte[])">
             <summary>
             Sends message to remote.
             The client must be connected prior to sending.
             </summary>
             <param name="Message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.Send(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Send byte[] start at offset and write length = length;
             </summary>
             <param name="data"></param>
             <param name="offset"></param>
             <param name="length"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.Send(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             Sends network packet.
             </summary>
             <param name="networkPacket"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.SendText(System.String)">
             <summary>
             Send string 
             </summary>
             <param name="Text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.Ping">
             <summary>
             Ping by sending an empty message
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPClient.Poll(System.Single,System.Net.Sockets.SelectMode)">
             <summary>
             异步 Poll.
             </summary>
             <param name="time"></param>
             <param name="mode"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.IList{``0},``0)">
             <summary>
             Adds item if the item not exists in the list.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddUnduplicate``1(System.Collections.Generic.HashSet{``0},``0)">
             <summary>
             Adds item if the item not exists in the hashset.
             </summary>
             <returns>The if not exists.</returns>
             <param name="genericList">Generic list.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddRange``1(System.Collections.Generic.HashSet{``0},``0[])">
             <summary>
             Add array to hash set.
             Return failed (already exists) count.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="hashSet"></param>
             <param name="items"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IList{``0})">
             <summary>
             Add list to hash set.
             Return failed (already exists) count.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="hashSet"></param>
             <param name="items"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IReadOnlyList{``0})">
             <summary>
             Add list to hash set.
             Return failed (already exists) count.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="hashSet"></param>
             <param name="readonlyList"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.HashSet{``0})">
             <summary>
             Add other hashset to hash set.
             Return failed (already exists) count.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="hashSet"></param>
             <param name="otherHashset"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.AddRangeUnduplicate``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Adds items for those not exists in the list.
             </summary>
             <returns>How many items added.</returns>
             <param name="genericList">Generic list.</param>
             <param name="items">Items.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEach``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             Warning: ForEach 中如果传入匿名委托会导致GC !
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.For``1(System.Collections.Generic.List{``0},System.Action{``0,System.Int32})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             </summary>
             <param name="list">Generic list.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForReverse``1(System.Collections.Generic.List{``0},System.Action{``0,System.Int32})">
             <summary>
             Loops on each element on a negative direction (starts from last);
             </summary>
             <param name="list">Generic list.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.For``1(``0[],System.Action{``0,System.Int32})">
             <summary>
             Loops on each element on a postive direction (starts from zero);
             </summary>
             <param name="array">Generic list.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForReverse``1(``0[],System.Action{``0,System.Int32})">
             <summary>
             Loops on each element on a negative direction (starts from last);
             </summary>
             <param name="array">Generic list.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachReversed``1(``0[],System.Action{``0})">
             <summary>
             Loops on each element on a reversed direction (starts from max-index);
             </summary>
             <returns>How many items added.</returns>
             <param name="genericArray">Generic list.</param>
             <param name="action">Action.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.Count``1(``0[],``0)">
             <summary>
             Counts how many item exists in genericArray
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.Contains``1(``0[],``0)">
             <summary>
             Contains the specified genericArray and item.
             </summary>
             <param name="genericArray">Generic array.</param>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.FindIndex``1(``0[],``0)">
             <summary>
             Finds the index of item.
             </summary>
             <returns>The index.</returns>
             <param name="item">Item.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachChildren(UnityEngine.Transform,System.Action{UnityEngine.Transform},System.Boolean,System.Boolean)">
             <summary>
             对每一个 transform的子对象调用一次action， 如果 deepHierarchy = true，还会包含深层级的子对象。
             如果 includeSelf = true，会对 transform 自身调用。
             </summary>
             <param name="transform"></param>
             <param name="function"></param>
             <param name="deepHierarchy"></param>
             <param name="includeSelf"></param>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachChildren``1(UnityEngine.GameObject,System.Action{``0},System.Boolean)">
             <summary>
             Actions on each children which has target component. 
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForChild(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32})">
             <summary>
             Call a for(i=0; i LE count; i++)
             {
              action(child)
             }
            
             on the transform parent
             
             </summary>
             <param name="transform"></param>
             <param name="action">child transform and the index</param>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForReversedChild(UnityEngine.Transform,System.Action{UnityEngine.Transform,System.Int32})">
             <summary>
             Call a for(i=count-1; i GE 0; i--)
             {
              action(child)
             }
            
             on the transform parent
             
             </summary>
             <param name="transform"></param>
             <param name="action">child transform and the index</param>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachChildren(UnityEngine.GameObject,System.Action{UnityEngine.Transform},System.Boolean,System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachChildren(UnityEngine.SceneManagement.Scene,System.Action{UnityEngine.Transform},System.Boolean)">
             <summary>
             Actions on each children. In deepHierarchy = false, function run on direct children, else if true, actions is guaranteed to run on each sub children.
             function's parameter is the children gameobject at the loop.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PolyEngineLinq.ForEachParent(UnityEngine.Transform,System.Action{UnityEngine.Transform})">
             <summary>
             For each action on transform node.
             </summary>
             <param name="node"></param>
             <param name="function"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.NetClient">
             <summary>
             Net client.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetClient.OnClientDisconnected">
             <summary>
             当 当前客户端断开的事件
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetClient.OnClientConnected">
             <summary>
             当当前客链接的服务器主动断开的事件
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetClient.OnClientStateChanged">
             <summary>
             Call when client state is change from connect to connecting / connecting to connected / connected to disconnect
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.IsClientConnected">
             <summary>
             Is the client connected ?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.IsClientConnecting">
             <summary>
             Is the client connecting?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.IsClientDisconnected">
             <summary>
             Is the connect disconnected ?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.ServerAddress">
             <summary>
             Server address
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.ServerPort">
             <summary>
             Server port
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetClient.AutoReconnect">
             <summary>
             When being disconnected, should the client auto reconnect to previous address and port.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.StartClient">
             <summary>
             Start net client.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.StopClient">
             <summary>
             Stop net client.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.Send(System.Byte[])">
             <summary>
             Sends message to remote.
             The client must be connected prior to sending.
             </summary>
             <param name="Message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.InvokeOnClientDisconnect">
             <summary>
             Invoke on client disconnected.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.InvokeOnClientConnected">
             <summary>
             Invoke on client connected.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetClient.InvokeOnClientConnecting">
             <summary>
             Invoke on client start connecting.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UdpSender">
             <summary>
             The UDP sender - a simple UDP sender.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSender.SendText(System.String,System.Int32,System.String)">
             <summary>
             Send text to specific ip and port
             </summary>
             <param name="message"></param>
             <param name="address"></param>
             <param name="port"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSender.SendBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Send bytes to specific ip and port
             </summary>
             <param name="message"></param>
             <param name="address"></param>
             <param name="port"></param>
            </member>
        <member name="T:RhinoXDebugger.PEUtils">
             <summary>
             Polyengine utils.
             PolyEngine 工具类方法。
             </summary>
             <summary>
             PEUtils2.cs.
             Partial class to PEUtils
             </summary>
             <summary>
             PEUtilsIO.cs - 和I/O相关的方法在这里。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.UIntFloat.ToDouble(System.UInt64)">
             <summary>
             Converts ulong to double.
             </summary>
             <returns>The double.</returns>
             <param name="value">Value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AddChildGameObject(UnityEngine.GameObject,System.String,System.Type[])">
             <summary>
             Creates and adds a child game object to gameObject's hierarchy.
             The child is set to identity point of game object's space.
             </summary>
             <param name="gameObject"></param>
             <param name="childName"></param>
             <param name="types"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AddChildGameObject(UnityEngine.GameObject,System.String)">
             <summary>
             Creates and adds a child game object to gameObject's hierarchy.
             The child is set to identity point of game object's space.
             </summary>
             <param name="gameObject"></param>
             <param name="childName"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AddChildGameObject``1(UnityEngine.GameObject,System.String)">
             <summary>
             Creates and adds a child game object to gameObject's hierarchy, then adds a component and return the added component.
             The child is set to identity point of game object's space.
             </summary>
             <typeparam name="T">The component.</typeparam>
             <param name="gameObject"></param>
             <param name="childName"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AddToArray``1(``0,``0[])">
             <summary>
             Adds element to an array.
             </summary>
             <returns>The to array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AppendFormattedLine(System.Text.StringBuilder,System.String,System.Object[])">
             <summary>
             Appends a format line.
             </summary>
             <param name="buffer"></param>
             <param name="format"></param>
             <param name="args"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.MoveToPosition(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
             <summary>
             Transform approach to target position, at maxium speed, there is no need to multiple Time.deltaTime to speed,
             the method internally applys Time.deltaTime.
             Call this method per frame.
             Return true for totally position approaching.
             </summary>
             <param name="thisTransform"></param>
             <param name="TargetPosition"></param>
             <param name="Speed"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.MoveToPosition(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single)">
             <summary>
             Transform approach to target position, at maxium speed, there is no need to multiple Time.deltaTime to speed at delta time.
             the method internally applys Time.deltaTime.
             Call this method per frame.
             Return true for totally position approaching.
             </summary>
             <param name="thisTransform"></param>
             <param name="TargetPosition"></param>
             <param name="Speed"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.MoveToPosition(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
             <summary>
             Transform approach to target position, at maxium speed, there is no need to multiple Time.deltaTime to speed,
             the method internally applys Time.deltaTime.
             Call this method per frame.
             Return true for totally position approaching.
             </summary>
             <param name="thisTransform"></param>
             <param name="Target"></param>
             <param name="Speed"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RotateTo(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)">
             <summary>
             This transform rotate its world rotation to target quaternion, at angular speed.
             Return true when reaches target quaternion.
             Commonly this method will be called per frame
             </summary>
             <param name="thisTransform"></param>
             <param name="TargetQ"></param>
             <param name="AngularSpeed">Will be multiple with Time.delta</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RotateTo(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
             <summary>
             This transform rotate its world rotation to target transform's world-uaternion, at angular speed.
             Return true when reaches target quaternion.
             Commonly this method will be called per frame
             </summary>
             <param name="thisTransform"></param>
             <param name="TargetT">target transform</param>
             <param name="AngularSpeed">Will be multiple with Time.delta</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RotateTo(UnityEngine.Transform,UnityEngine.Transform,System.Single,System.Single)">
             <summary>
             This transform rotate its world rotation to target transform's world-uaternion, at angular speed of delta time
             Return true when reaches target quaternion.
             Commonly this method will be called per frame
             </summary>
             <param name="thisTransform"></param>
             <param name="TargetT">target transform</param>
             <param name="AngularSpeed">Will be multiple with Time.delta</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CopyComponentToGameObject(UnityEngine.Component,UnityEngine.GameObject)">
             <summary>
             Copies the component to game object.
             </summary>
             <param name="original">Source.</param>
             <param name="destination">Target game object.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CreateFileDirectory(System.String)">
             <summary>
             Creates the file path's parent directory.
             Return true for directory created or already exists.
             </summary>
             <returns><c>true</c>, if file directory was created, <c>false</c> otherwise.</returns>
             <param name="FileFullPath">File full path.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Destroy(UnityEngine.Object,System.Single,System.Boolean)">
             <summary>
             Smart destroy self unity object - in editor , call destroy immediately.
             In runtime, call destroy with delay.
             </summary>
             <param name="unityObj"></param>
             <param name="delayed">Used in runtime only. In editor, always call destroyImmediately</param>
             <param name="allowDestoryAsset"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.EqualsTo``1(``0[],``0[])">
             <summary>
             Compares two unity object, check if both elements and array length are same.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array01"></param>
             <param name="array02"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetDirty(UnityEngine.Object)">
             <summary>
             Sets the game object dirty at UnityEditor.
             This method do nothing at non-Editor.
             </summary>
             <param name="unityObj"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RemoveFromArray``1(System.Int32,``0[])">
             <summary>
             Removes the index from array and return new array
             </summary>
             <returns>The from array.</returns>
             <param name="index">Index.</param>
             <param name="Array">Array.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RemoveFromArray``1(``0,``0[])">
             <summary>
             Removes element from array.
             </summary>
             <returns>The from array.</returns>
             <param name="element">Element.</param>
             <param name="Array">Array.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.InsideUnitCircle">
             <summary>
             返回一个 vector3 的 单位元随机向量。
             </summary>
             <returns>The unit circle.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetPose(UnityEngine.Transform,UnityEngine.Pose,UnityEngine.Space)">
             <summary>
             Sets transforms pose, can be local or global.
             </summary>
             <param name="transform"></param>
             <param name="targetPose"></param>
             <param name="space"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetPositions(UnityEngine.LineRenderer,UnityEngine.Transform[])">
             <summary>
             Set position to line renderer.
             </summary>
             <param name="lineRenderer"></param>
             <param name="transforms"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetPositions(UnityEngine.LineRenderer,System.Collections.Generic.IList{UnityEngine.Transform})">
             <summary>
             Set position to line renderer
             </summary>
             <param name="lineRenderer"></param>
             <param name="transforms"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetPositions(UnityEngine.LineRenderer,System.Collections.Generic.IList{UnityEngine.Vector3})">
             <summary>
             Set position to line renderer
             </summary>
             <param name="lineRenderer"></param>
             <param name="Points"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetPositions(UnityEngine.LineRenderer,UnityEngine.Vector3[])">
             <summary>
             Set position to line renderer.
             </summary>
             <param name="lineRenderer"></param>
             <param name="Points"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SmoothPoints(UnityEngine.LineRenderer,System.Single,System.Single)">
             <summary>
             Smooth line renderer's points.
             </summary>
             <param name="lineRenderer"></param>
             <param name="segment"></param>
             <param name="smoothLength"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SearchFileByExtension(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.String[])">
             <summary>
             按照文件后缀名输出被找到的所有文件。
             返回文件的数量.
             </summary>
             <param name="path"></param>
             <param name="files"></param>
             <param name="ignoreCase"></param>
             <param name="extensions">extension of the file: .txt, .mp3, .fbx</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetPose(UnityEngine.Transform,UnityEngine.Space)">
             <summary>
             Gets transforms pose, can be local or global.
             </summary>
             <param name="transform"></param>
             <param name="space"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
             <summary>
             Sort the array by comparer.
             </summary>
             <param name="array">Array.</param>
             <param name="comparer">Comparer.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Sort``1(``0[],System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
             <summary>
             Sort the array by comparer.
             </summary>
             <param name="array">Array.</param>
             <param name="comparer">Comparer.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Include``1(``0[],``0)">
             <summary>
             Check if arrays includes the value
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RandomRange(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get random vector3 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RandomRange(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Get random vector2 between [min] .. [max]
             </summary>
             <returns>The range.</returns>
             <param name="min">Minimum.</param>
             <param name="max">Max.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetOrAddComponent``1(UnityEngine.GameObject)">
             <summary>
             Gets the or add component.
             </summary>
             <returns>The or add component.</returns>
             <param name="self">Self.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetOrAddChild(UnityEngine.GameObject,System.String)">
             <summary>
             Gets or add a child gameObject of the name.
             If the child gameObject is created, it is created at the identity point to its parent space.
             </summary>
             <param name="gameObject"></param>
             <param name="childName"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetOrAddChild(UnityEngine.Component,System.String)">
             <summary>
             Gets or add a child gameObject of the name.
             If the child gameObject is created, it is created at the identity point to its parent space.
             </summary>
             <param name="component"></param>
             <param name="childName"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetOrAddComponent``1(UnityEngine.MonoBehaviour)">
             <summary>
             Gets the or add component.
             </summary>
             <returns>The or add component.</returns>
             <param name="self">Self.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetNotNull``1(``0[])">
             <summary>
             Get first not null reference from the objects array.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="objects"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetPhysicalDistanceOfScreenSpace(System.Single)">
             <summary>
             Gets the distance measured in sreen pixel space. Returned distance is measured in meters.
             </summary>
             <returns>The distance of screen points.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.IsSceneInBuildList(System.String)">
             <summary>
             If the name of the scene exists in the build scene list ?
             The first parameter is the unity scene name without extension.
             </summary>
             <returns>The scene by name.</returns>
             <param name="Name">Name.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetSceneBuildIndex(System.String)">
             <summary>
             Gets the index of the builtin scene that matches that name.
             </summary>
             <returns><c>true</c>, if scene build index was gotten, <c>false</c> otherwise.</returns>
             <param name="Name">Name.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetActualDPI(System.Single@)">
             <summary>
             Gets the actual DPI.
             Always return true if not running on Android.
             When running on android, try getting DPI from native java class, if failed, using Screen.dpi and return false.
             </summary>
             <returns><c>true</c>, if actual DP was gotten, <c>false</c> otherwise.</returns>
             <param name="dpi">Dpi.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetPhysicalScreenSize(System.Single@,System.Single@)">
             <summary>
             Gets the size of the physical screen.
             return false if fail to get current DPI.
             useDensityDpiInAnroid : refer to file:///Applications/Unity/Documentation/en/ScriptReference/Screen-dpi.html
             If useDensityDpiInAnroid = true, use Screen.dpi in calculation, else use native java class interface to get a more precise DPI in calculation.
             </summary>
             <returns><c>true</c>, if physical screen size was gotten, <c>false</c> otherwise.</returns>
             <param name="w">The width.</param>
             <param name="h">The height.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandom``1(System.Collections.Generic.List{``0})">
             <summary>
             Gets a random element from list. 
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandomFromReadOnlyList``1(System.Collections.Generic.IReadOnlyList{``0})">
             <summary>
             Gets a random element from read-only list. 
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Boolean)">
             <summary>
             Gets a random element from list.
             if [dropTheIndex] = true, the list will remove the chosen element
             </summary>
             <returns><c>true</c>, if random was gotten, <c>false</c> otherwise.</returns>
             <param name="list">List.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandom``1(``0[])">
             <summary>
             Gets random element.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetXZDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetXZSqrDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             获得p1,p2两点在XZ平面上的Sqr Distance
             </summary>
             <returns>The XZ sqr distance.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Exists``1(``0[],``0)">
             <summary>
             Check element exists at array
             </summary>
             <param name="array">Array.</param>
             <param name="element">Element.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CalculateFacingAngleXZ(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             计算transform.forward到 targetPosition 的夹角。
             只考虑XZ平面的夹角。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Clear``1(``0[])">
             <summary>
             Clear the array , set all elements to be null.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Clear``1(``0[],System.Int32,System.Int32)">
             <summary>
             Clear the array , set elements at the range to be null.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ClampScalar(System.Single,System.Single)">
             <summary>
             Clamps the scalar.
             限制 single 的长度不大于 Scalar， 返回符号 = single 的浮点值.
             </summary>
             <returns>The scalar.</returns>
             <param name="single">Single.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Clamp(UnityEngine.Rect,UnityEngine.Vector2)">
             <summary>
             Clamps the vect2 in rect bounds.
             </summary>
             <returns>The rect vect2.</returns>
             <param name="rect">Rect.</param>
             <param name="point">Point.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Clamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Clamps a vector3 into min and max range.
             </summary>
             <param name="vector3"></param>
             <param name="min"></param>
             <param name="max"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ZipAngle(System.Single)">
             <summary>
             把一个 0 - 360之间的代表角度的4个长度的float压缩为一个2个长度的 short。
             </summary>
             <returns>The angle.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ZipDirection(UnityEngine.Vector3)">
             <summary>
             用一个 Vector2 表示一个方向.
             Vector2.x = 方向的Yaw角度。
             Vector2.y = 方向的Pitch角度。
             </summary>
             <returns>The direction.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ZipDirection(UnityEngine.Quaternion)">
             <summary>
             把 Rotation 压缩成 Vector2. X = Yaw, Y = Pitch, 忽略 Roll
             </summary>
             <returns>The direction.</returns>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.UnzipDirection(UnityEngine.Vector2)">
             <summary>
             ZipDirection 的反函数. 把一个压缩过的 Dir 还原.
             只能还原 Yaw 和 Pitch, 不适用于带 Roll 的方向。
             </summary>
             <returns>The direction.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ZipXZDirection(UnityEngine.Vector3)">
             <summary>
             压缩一个 Direction : 把Direction投影到XZ面，用一个 Float 表示 XZ 投影向量和 (1,0)的角度
             </summary>
             <returns>The direction flatten.</returns>
             <param name="Direction">Direction.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.UnzipXZDirection(System.Single)">
             <summary>
             ZipXZDirection 的反函数 。 把一个 angle 还原为一个 Vector3 方向.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.position(UnityEngine.Component)">
             <summary>
             Gets the world position of the component
             </summary>
             <returns>The position.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.rotation(UnityEngine.Component)">
             <summary>
             Gets the world rotation of the component
             </summary>
             <returns>The rotation.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.eulerAngles(UnityEngine.Component)">
             <summary>
             Gets the world euler of the component
             </summary>
             <returns>The position.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.localPosition(UnityEngine.Component)">
             <summary>
             Gets the local position of the component
             </summary>
             <returns>The position.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.localRotation(UnityEngine.Component)">
             <summary>
             Gets the local rotation of the component
             </summary>
             <returns>The rotation.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.LerpPose(UnityEngine.Pose,UnityEngine.Pose,System.Single)">
             <summary>
             Lerp pose between this pose and target pose.
             </summary>
             <param name="thisPose"></param>
             <param name="targetPose"></param>
             <param name="lerpT"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SlerpPose(UnityEngine.Pose,UnityEngine.Pose,System.Single)">
             <summary>
             Slerp pose between this pose and target pose.
             </summary>
             <param name="thisPose"></param>
             <param name="targetPose"></param>
             <param name="lerpT"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.localEulerAngles(UnityEngine.Component)">
             <summary>
             Gets the local euler of the component
             </summary>
             <returns>The position.</returns>
             <param name="component">Component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RaycastOnCameraFrustum(UnityEngine.Ray,UnityEngine.Camera,System.Single@)">
             <summary>
             Using a ray to raycast the camera's frustum planes.
             Returns the raycast distance.
             Return false for not hit any point of the frustum planes.
             </summary>
             <param name="ray"></param>
             <param name="camera"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RandomExcept``1(``0[],``0)">
             <summary>
             Get a random value from array, the result will exclude %excludeValue% for sure.
             If the array has only one element, then there is no choice - result will be the only element.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CloneExcept``1(``0[],``0)">
             <summary>
             Clone an array, exclude the "except"
             </summary>
             <param name="array"></param>
             <param name="except"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CloneArray``1(``0[])">
             <summary>
             把 array 克隆一份同样size的数组.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CloneArray``1(``0[],System.Int32,System.Int32)">
             <summary>
             把 array 克隆一份同样size的数组, 以 offset 为起点, 长度为length
             </summary>
             <typeparam name="T"></typeparam>
             <param name="array"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Component},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindClosest``1(System.Collections.Generic.List{``0},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindClosestGameObject(System.Collections.Generic.List{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Transform},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
             <param name="transforms">Transforms.</param>
             <param name="center">Center.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindOrAddObjectOfType``1(UnityEngine.GameObject)">
             <summary>
             Find object of type, if none, add the component to gameObject
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindOrAddObjectOfType``1(System.String)">
             <summary>
             Find object of type, if none, create a new GameObject of the Name and add the component.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="newCreatedGameObjectName">If component not found, the new created gameObject's name</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindChildByPath(UnityEngine.Transform,System.String,System.Boolean)">
             <summary>
             Finds the child by given path.
             This method supports recursive path .
             </summary>
             <returns>The child path.</returns>
             <param name="parent">Parent.</param>
             <param name="Path">Path. For example: "root/skin/weapon"</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindClosest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the closest transform to the center point.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindFarest(System.Collections.Generic.IEnumerable{UnityEngine.Vector3},UnityEngine.Vector3,System.Single@)">
             <summary>
             Finds the farest transform to the center point.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXZDirection(UnityEngine.Vector3,System.Boolean)">
             <summary>
             Convert world direction to xz surface direction.
             </summary>
             <returns>The XZ direction.</returns>
             <param name="direction">Direction.</param>
             <param name="normalized">If set to <c>true</c> normalized.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXZDirection(UnityEngine.Quaternion)">
             <summary>
             Convert quaternion to vector3 direction at XZ surface
             </summary>
             <param name="rotation"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXYDirection(UnityEngine.Vector3,System.Boolean)">
             <summary>
             Convert world direction to xy surface direction.
             </summary>
             <returns>The XY direction.</returns>
             <param name="direction">Direction.</param>
             <param name="normalized">If set to <c>true</c> normalized.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXYDirection(UnityEngine.Quaternion)">
             <summary>
             Convert quaternion to vector3 direction at XY surface
             </summary>
             <param name="rotation"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToYZDirection(UnityEngine.Vector3,System.Boolean)">
             <summary>
             Convert world direction to yz surface direction.
             </summary>
             <returns>The YZ direction.</returns>
             <param name="direction">Direction.</param>
             <param name="normalized">If set to <c>true</c> normalized.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToYZDirection(UnityEngine.Quaternion)">
             <summary>
             Convert quaternion to vector3 direction at YZ surface
             </summary>
             <param name="rotation"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXYZ(UnityEngine.Vector2,System.Single)">
             <summary>
             Converts XZ vector to XYZ. (Y is pass as parameter, default = 0)
             </summary>
             <returns>The to XY.</returns>
             <param name="xzVector">Xz vector.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXZ(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XZ)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToZY(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (ZY)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToZYDirection(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (ZY)方向。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.DriftDirection(UnityEngine.Vector3,System.Single,System.Single,System.Single)">
             <summary>
             Make the direction drift by given angle of pitch, yaw, roll.
             Internally this method equals to :
             return Quaternion.Euler(Pitch, Yaw, Roll) * direction;
             </summary>
             <param name="Pitch">Pitch 仰角, 正数为向下， 正数为向下</param>
             <param name="Yaw">Yaw 水平旋转角, 正数向右， 负数向左.</param>
             <param name="Roll">前向旋角，正数逆时针， 负数顺时针</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Add(UnityEngine.Vector3Int,System.Int32,System.Int32,System.Int32)">
             <summary>
             Add offset to vector3Int
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Add(UnityEngine.Vector2Int,System.Int32,System.Int32)">
             <summary>
             Add offset to vector2Int
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Add(UnityEngine.Vector3,System.Single,System.Single,System.Single)">
             <summary>
             Add offset to vector3
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetX(UnityEngine.Vector3,System.Single)">
             <summary>
             Set X of the vector3
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetY(UnityEngine.Vector3,System.Single)">
             <summary>
             Set Y of the vector3
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SetZ(UnityEngine.Vector3,System.Single)">
             <summary>
             Set Z of the vector3
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Add(UnityEngine.Vector2,System.Single,System.Single)">
             <summary>
             Add offset to vector2
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Add(UnityEngine.Vector4,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Add offset to vector4
             </summary>
             <returns>The X.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToXY(UnityEngine.Vector3)">
             <summary>
             把3D坐标转换为2D (XY)坐标。
             </summary>
             <returns>The X.</returns>
             <param name="pos3D">Pos3 d.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToRotation(UnityEngine.Vector3)">
             <summary>
             Equals to Quaternion.LookRotation(direction, Vector3.up);
             </summary>
             <param name="direction"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Equals to Quaternion.LookRotation(direction, up);
             </summary>
             <param name="direction"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRandom``1(System.Collections.Generic.List{``0},System.Int32,System.Collections.Generic.List{``0}@)">
             <summary>
             从 list 列表中，随机抽取 count 个元素组成一个新的列表返回.
             </summary>
             <returns>The pick.</returns>
             <param name="list">List.</param>
             <param name="count">Count.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.RandomPointOnPlane(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
             <summary>
             给出一个 Plane，获取以 Position, Normal 定义的Plane， 半径为radius 的随机点
             </summary>
             <returns>The point on plane.</returns>
             <param name="position">Position.</param>
             <param name="normal">Normal.</param>
             <param name="radius">Radius.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignByChildRotation(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Quaternion)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform.rotation 和 TargetRotation 对齐
             此方法只会旋转，不会设置位置。
             </summary>
             <param name="rootTransform"></param>
             <param name="childTransform"></param>
             <param name="TargetRotation"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignByChildPosition(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform.position 和 TargetPosition 对齐
             此方法只会设置位置。
             </summary>
             <param name="rootTransform"></param>
             <param name="childTransform"></param>
             <param name="TargetPos"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignByChildTransform(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform, 得出的结果是 childTransform 和 TargetMatrix 对齐
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignByChildTransform(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
             <summary>
             给出 RootTransform 和 其下的一个 childTransform, 放置rootTransform,
             得出的结果是 childTransform 和 TargetMatrix 对齐。
             此方法输出 新的RootPosition，和新的RootRotation。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignPoseTo(UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             Aligns world position and world rotation of this transform to other transform.
             </summary>
             <param name="thisTransform">This transform.</param>
             <param name="otherTransform">Other transform.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignWorldPositionTo(UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             Aligns the world position to.
             </summary>
             <param name="thisTransform">This transform.</param>
             <param name="otherTransform">Other transform.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.AlignWorldRotationTo(UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             Aligns the world rotation to.
             </summary>
             <param name="thisTransform">This transform.</param>
             <param name="otherTransform">Other transform.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.TestContain(UnityEngine.Collider,UnityEngine.Vector3)">
             <summary>
             Tests the point is contained inside the collider.
             </summary>
             <returns><c>true</c>, if is contained was tested, <c>false</c> otherwise.</returns>
             <param name="collider">Collider.</param>
             <param name="Position">Position.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteFloat(System.Single,System.Byte[],System.Int32)">
             <summary>
             Writes the float to the buffer from start index, length = 4.
             </summary>
             <param name="floatValue">Float value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFloat(System.Byte[],System.Int32)">
             <summary>
             Reads the float from buffer at start index, length = 4.
             </summary>
             <returns>The float.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CompareArray``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
             <summary>
             Compares two array T1 and T2, starts from index, at length.
             </summary>
             <returns><c>true</c>, if array was compared, <c>false</c> otherwise.</returns>
             <param name="array01">Array01.</param>
             <param name="startIndex01">Start index01.</param>
             <param name="array02">Array02.</param>
             <param name="startIndex02">Start index02.</param>
             <param name="length">Length.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CompareArray``1(``0[],System.Int32,System.Collections.Generic.List{``0},System.Int32,System.Int32)">
             <summary>
             Compares two array T1 and T2, starts from index, at length.
             </summary>
             <returns><c>true</c>, if array was compared, <c>false</c> otherwise.</returns>
             <param name="array01">Array01.</param>
             <param name="startIndex01">Start index01.</param>
             <param name="list02">List 02.</param>
             <param name="startIndex02">Start index02.</param>
             <param name="length">Length.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CompareArray``1(System.Collections.Generic.List{``0},System.Int32,System.Collections.Generic.List{``0},System.Int32,System.Int32)">
             <summary>
             Compares two array T1 and T2, starts from index, at length.
             </summary>
             <returns><c>true</c>, if array was compared, <c>false</c> otherwise.</returns>
             <param name="list01">List 01.</param>
             <param name="startIndex01">Start index01.</param>
             <param name="list02">List 02.</param>
             <param name="startIndex02">Start index02.</param>
             <param name="length">Length.</param>
             <typeparam name="T">The 1st type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector2(UnityEngine.Vector2,System.Byte[],System.Int32)">
             <summary>
             Writes the vector2 to the buffer from start index, length = 8.
             </summary>
             <param name="vect2">Vector2 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector2(System.Byte[],System.Int32)">
             <summary>
             Reads the vector2 from buffer at start index, length = 8.
             </summary>
             <returns>The vector2.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector3(UnityEngine.Vector3,System.Byte[],System.Int32)">
             <summary>
             Writes the vector3 to the buffer from start index, length = 12.
             </summary>
             <param name="vect3">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector2Int(UnityEngine.Vector2Int,System.Byte[],System.Int32)">
             <summary>
             Writes the vector2int to the buffer from start index, length = 12.
             </summary>
             <param name="vect2Int">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector3Int(UnityEngine.Vector3Int,System.Byte[],System.Int32)">
             <summary>
             Writes the vector3int to the buffer from start index, length = 12.
             </summary>
             <param name="vect3Int">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector3(System.Byte[],System.Int32)">
             <summary>
             Reads the vector3 from buffer at start index, length = 12
             </summary>
             <returns>The vector3.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector3Int(System.Byte[],System.Int32)">
             <summary>
             Reads the vector3int from buffer at start index, length = 12
             </summary>
             <returns>The vector3int.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector2Int(System.Byte[],System.Int32)">
             <summary>
             Reads the vector2int from buffer at start index, length = 12
             </summary>
             <returns>The vector2 int.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector4(UnityEngine.Vector4,System.Byte[],System.Int32)">
             <summary>
             Writes the vector4 to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteQuaternion(UnityEngine.Quaternion,System.Byte[],System.Int32)">
             <summary>
             Writes the quaternion to the buffer from start index, length = 16.
             </summary>
             <param name="q">Quaternion value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector4(System.Byte[],System.Int32)">
             <summary>
             Reads the vector4 from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadQuaternion(System.Byte[],System.Int32)">
             <summary>
             Reads the quaternion from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteInt(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Writes the int to the buffer from start index, length = 4.
             Return interger indicates the returned buffer index = startIndex + 4
             </summary>
             <param name="intValue">Int value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteByte(System.Byte,System.Byte[],System.Int32)">
             <summary>
             Write byte into buffer
             </summary>
             <param name="byteValue"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Write byte array into another byte array.
             </summary>
             <param name="source"></param>
             <param name="sourceOffset"></param>
             <param name="length">The write data length</param>
             <param name="destBuffer"></param>
             <param name="destStartIndex">Dest start index.</param>
             <returns>The new index.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteShort(System.Int16,System.Byte[],System.Int32)">
             <summary>
             Writes the short to the buffer from start index, length = 2
             Return interger indicates the returned buffer index = startIndex + 2
             </summary>
             <param name="shortValue">Short value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadShort(System.Byte[],System.Int32)">
             <summary>
             Read short
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadShort(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read short
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadInt(System.Byte[],System.Int32)">
             <summary>
             Reads the int from buffer at start index, length = 4
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadUInt64(System.Byte[],System.Int32)">
             <summary>
             Reads a ulong from buffer.
             </summary>
             <returns>The long.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadByteArray(System.Byte[],System.Int32,System.Int32@,System.Byte[],System.Int32)">
             <summary>
             从 sourceBuffer 中读取一段指定长度的数组并填充到 destBuffer 中。
             </summary>
             <param name="sourceBuffer">原数组。</param>
             <param name="sourceIndex">原数组的数据起点</param>
             <param name="length">输出的目标数组的长度。</param>
             <param name="destBuffer">目标数组接收容器。</param>
             <param name="destBufferOffset">目标数组接收数据的起点索引。</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadByteArray(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             从 sourceBuffer 中读取一个数组。
             此方法存在动态内存分配。
             </summary>
             <param name="sourceBuffer">原数组。</param>
             <param name="sourceIndex">原数组的数据起点</param>
             <param name="length">输出的目标数组的长度。</param>
             <param name="destBuffer">目标数组接收容器。</param>
             <param name="destBufferOffset">目标数组接收数据的起点索引。</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadByteArray(System.Byte[],System.Int32)">
             <summary>
             从 sourceBuffer 中读取一个数组。
             此方法存在动态内存分配。
             </summary>
             <param name="sourceBuffer"></param>
             <param name="sourceIndex"></param>
             <returns>The read byte[]</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadDouble(System.Byte[],System.Int32)">
             <summary>
             Reads the double from buffer at start index, length = 8
             </summary>
             <returns>The double.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteULong(System.UInt64,System.Byte[],System.Int32)">
             <summary>
             Write the specified ulong value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteDecimal(System.Decimal,System.Byte[],System.Int32)">
             <summary>
             Write the specified decimal value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteDouble(System.Double,System.Byte[],System.Int32)">
             <summary>
             Writes the double.
             </summary>
             <param name="value">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteString(System.String,System.Byte[],System.Int32)">
             <summary>
             Writes a text into buffer, starts at startIndex.
             First 2 bytes = string length. (Assume string within 65535 length
             Encoded in UTF8.
             Return : end index.
             </summary>
             <param name="text"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadString(System.Byte[],System.Int32@,System.Int32)">
             <summary>
             Reads string from buffer, starts at startIndex.
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <param name="endIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteMatrix4x4(UnityEngine.Matrix4x4,System.Byte[],System.Int32)">
             <summary>
             Writes the matrix 4x4.
             </summary>
             <param name="mtx">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadMatrix4x4(System.Byte[],System.Int32)">
             <summary>
             Reads matrix 4x4. The total read length = 4 * 16 = 64
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRaycastPoint(UnityEngine.Plane,UnityEngine.Ray,UnityEngine.Vector3@)">
             <summary>
             Gets the raycast hit point of the plane and the ray.
             </summary>
             <returns><c>true</c>, if raycast point was gotten, <c>false</c> otherwise.</returns>
             <param name="plane">Plane.</param>
             <param name="hitPoint">Raycast hit point.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetRaycastPoint(UnityEngine.Plane,UnityEngine.Ray,UnityEngine.Vector3@,System.Single@)">
             <summary>
             Gets the raycast hit point of the plane and the ray.
             </summary>
             <returns><c>true</c>, if raycast point was gotten, <c>false</c> otherwise.</returns>
             <param name="plane">Plane.</param>
             <param name="hitPoint">Raycast hit point.</param>
             <param name="distance">distance.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.CopyTo``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
             <summary>
             Copies the directionary from src to dst.
             </summary>
             <param name="src">Source.</param>
             <param name="dst">Dst.</param>
             <typeparam name="K">The 1st type parameter.</typeparam>
             <typeparam name="V">The 2nd type parameter.</typeparam>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Contains(System.String,System.Char)">
             <summary>
             If text contains char.
             </summary>
             <param name="text"></param>
             <param name="Char"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FadeOutAudio(UnityEngine.AudioSource,System.Single,System.Single)">
             <summary>
             Fades out audio source.
             After fading , the volume will be restored to orginal value and the audio source will be stopped.
             </summary>
             <param name="audioSource"></param>
             <param name="fadeOutTime"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FadeInAudio(UnityEngine.AudioSource,System.Single,System.Single,System.Single)">
             <summary>
             Fades in audio source. The audio volume will be fade from 0 to targetVolume.
             </summary>
             <param name="audioSource"></param>
             <param name="fadeInTime"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.FindOrCreateGameObjectWithTag(System.String,System.String)">
             <summary>
             Finds a game object with tag, if not exists, create one.
             </summary>
             <param name="Tag"></param>
             <param name="Name">对象名字。如果对象不存在，则创建此名字的对象。</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponent``1(UnityEngine.GameObject)">
             <summary>
             If the game object has component.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponent``1(UnityEngine.GameObject,``0@)">
             <summary>
             If the game object has component.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInChildren``1(UnityEngine.GameObject)">
             <summary>
             If the game object has component in children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInChildren``1(UnityEngine.GameObject,``0@)">
             <summary>
             If the game object has component in children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInParent``1(UnityEngine.GameObject,System.Boolean)">
             <summary>
             If the game object has component in parent
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <param name="IncludeSelf">是否从自身还是从parent开始查找组件</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInParent``1(UnityEngine.GameObject,``0@,System.Boolean)">
             <summary>
             If the game object has component in parent.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <param name="component"></param>
             <param name="IncludeSelf">是否从自身还是从parent开始查找组件</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInHierarchy``1(UnityEngine.GameObject)">
             <summary>
             If the game object has component in parent and children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponent``1(UnityEngine.Component)">
             <summary>
             If the game object has component.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponent``1(UnityEngine.Component,``0@)">
             <summary>
             If the game object has component.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInChildren``1(UnityEngine.Component)">
             <summary>
             If the game object has component in children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInParent``1(UnityEngine.Component,System.Boolean)">
             <summary>
             If the game object has component in parent
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <param name="includeSelf">是否包含自身?如果false，会忽略自身而只查找parent层级以上的对象。</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInChildren``1(UnityEngine.Component,``0@)">
             <summary>
             If the game object has component in children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInParent``1(UnityEngine.Component,``0@,System.Boolean)">
             <summary>
             If the game object has component in parent
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInHierarchy``1(UnityEngine.Component)">
             <summary>
             If the game object has component in parent and children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInHierarchy``1(UnityEngine.Component,``0@)">
             <summary>
             If the game object has component in parent and children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="comp"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.HasComponentInHierarchy``1(UnityEngine.GameObject,``0@)">
             <summary>
             If the game object has component in parent and children
             </summary>
             <typeparam name="T"></typeparam>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector2(UnityEngine.Vector2,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the vector2 to the buffer from start index, length = 8.
             </summary>
             <param name="vect2">Vector2 value.</param>
             <param name="buffer">Buffer list.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector2(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the vector2 from buffer at start index, length = 8.
             </summary>
             <returns>The vector2.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector3(UnityEngine.Vector3,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the vector3 to the buffer from start index, length = 12.
             </summary>
             <param name="vect3">Vector3 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector3(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the vector3 from buffer at start index, length = 12
             </summary>
             <returns>The vector3.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector4(UnityEngine.Vector4,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the vector4 to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector4Int(RhinoXDebugger.pVector4Int,System.Byte[],System.Int32)">
             <summary>
             Writes the vector4int to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteVector4Int(RhinoXDebugger.pVector4Int,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the vector4int to the buffer from start index, length = 16.
             </summary>
             <param name="vect4">Vector4 value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
             <returns>buffer list's last element index.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector4Int(System.Byte[],System.Int32)">
             <summary>
             Read vector4 int from byte[] buffer.
             </summary>
             <param name="Buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector4Int(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read vector4 int from byte list.
             </summary>
             <param name="Buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteQuaternion(UnityEngine.Quaternion,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the quaternion to the buffer from start index, length = 16.
             </summary>
             <param name="q">Quaternion value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteMatrix4x4(UnityEngine.Matrix4x4,System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the matrix 4x4.
             </summary>
             <param name="mtx">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadMatrix4x4(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads matrix 4x4. The total read length = 4 * 16 = 64
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadVector4(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the vector4 from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadQuaternion(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the quaternion from buffer at start index, length = 16
             </summary>
             <returns>The vector4.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteInt(System.Int32,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the int to the buffer from start index, length = 4.
             Return interger indicates the returned buffer index = startIndex + 4
             </summary>
             <param name="intValue">Int value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadInt(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the int from buffer at start index, length = 4
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadDecimal(System.Byte[],System.Int32)">
             <summary>
             Read the specified decimal value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadUInt64(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads a ulong from buffer.
             </summary>
             <returns>The long.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadDouble(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the double from buffer at start index, length = 8
             </summary>
             <returns>The double.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteULong(System.UInt64,System.Collections.Generic.List{System.Byte})">
             <summary>
             Write the specified ulong value.
             </summary>
             <param name="value">Value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteByte(System.Byte,System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Write byte into buffer
             </summary>
             <param name="byteValue"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteDouble(System.Double,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the double.
             </summary>
             <param name="value">Value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteFloat(System.Single,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the float to the buffer from start index, length = 4.
             </summary>
             <param name="floatValue">Float value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFloat(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Reads the float from buffer at start index, length = 4.
             </summary>
             <returns>The float.</returns>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SnapPosition(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Space)">
             <summary>
             Snap the transform's position at X,Y,Z axis.
             Set X,Y,Z of snap length to zero to ignore snapping at the axe.
             The value should be GT 0.
             Return true if the transform's position is changed.
             </summary>
             <param name="transform"></param>
             <param name="SnapLength">Set X,Y,Z of snap length to zero to ignore snapping at the axe.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.SnapPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Snap the position at X,Y,Z axis.
             Set X,Y,Z of snap length to zero to ignore snapping at the axe.
             The value should be GT 0.
             </summary>
             <param name="position"></param>
             <param name="SnapLength">Set X,Y,Z of snap length to zero to ignore snapping at the axe.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.GetChannelTexture(UnityEngine.Texture2D,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{UnityEngine.TextureFormat})">
             <summary>
             Gets a new texture , only taking the target channel of the original texture.
             </summary>
             <param name="texture2D"></param>
             <param name="R"></param>
             <param name="G"></param>
             <param name="B"></param>
             <param name="A"></param>
             <param name="format">If not null, use the format, else, use original texture format</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteString(System.String,System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes a text into buffer, starts at startIndex.
             Encoded in UTF8.
             Return the end index.
             </summary>
             <param name="text"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteShort(System.Int16,System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the short to the buffer from start index, length = 2
             Return interger indicates the returned buffer index = startIndex + 2
             </summary>
             <param name="shortValue">Short value.</param>
             <param name="buffer">Buffer.</param>
             <param name="startIndex">Start index.</param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadIntList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the int32 arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadIntList(System.Byte[],System.Int32)">
             <summary>
             Read the int32 arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteIntList(System.Int32[],System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the int32 arr to the buffer from start index, length = 4 + length * 4, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteIntList(System.Int32[],System.Byte[],System.Int32)">
             <summary>
             Writes the int32 arr to the buffer from start index, length = 4 + length * 4, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFloatList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the float arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFloatList(System.Byte[],System.Int32)">
             <summary>
             Read the float arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteFloatList(System.Single[],System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the float arr to the buffer from start index, length = 4 + length * 4, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteFloatList(System.Single[],System.Byte[],System.Int32)">
             <summary>
             Writes the float arr to the buffer from start index, length = 4 + length * 4, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadShortList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the short arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadShortList(System.Byte[],System.Int32)">
             <summary>
             Read the short arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteShortList(System.Int16[],System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the short arr to the buffer from start index, length = 4 + length * 2, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteShortList(System.Int16[],System.Byte[],System.Int32)">
             <summary>
             Writes the long arr to the buffer from start index, length = 4 + length * 2, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadULongList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the float arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadULongList(System.Byte[],System.Int32)">
             <summary>
             Read the long arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteULongList(System.UInt64[],System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the long arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteULongList(System.UInt64[],System.Byte[],System.Int32)">
             <summary>
             Writes the long arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadDoubleList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the double arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadDoubleList(System.Byte[],System.Int32)">
             <summary>
             Read the double arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteDoubleList(System.Double[],System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Writes the double arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteDoubleList(System.Double[],System.Byte[],System.Int32)">
             <summary>
             Writes the double arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadStringList(System.Collections.Generic.List{System.Byte},System.Int32)">
             <summary>
             Read the string arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadStringList(System.Byte[],System.Int32)">
             <summary>
             Read the string arr from buffer at startIndex, start at arr length, then every arr element
             </summary>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteStringList(System.String[],System.Collections.Generic.List{System.Byte})">
             <summary>
             Writes the string arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.WriteStringList(System.String[],System.Byte[],System.Int32)">
             <summary>
             Writes the string arr to the buffer from start index, length = 4 + length * 8, first byte will save the length of the arr then every arr element
             </summary>
             <param name="array"></param>
             <param name="buffer"></param>
             <param name="startIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Capture(UnityEngine.RenderTexture,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
             <summary>
             Convert a render texture into a pixel 2D texture。
             </summary>
             <param name="renderTexture"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Capture(UnityEngine.Camera,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
             <summary>
             对 Camera 进行截图。
             </summary>
             <param name="camera"></param>
             <param name="format"></param>
             <param name="mipChain"></param>
             <param name="linear"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.Capture(UnityEngine.Camera,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
             <summary>
             使用自定义的 Pixel Width 和 Pixel Height, 对 Camera 进行截图。
             </summary>
             <param name="camera"></param>
             <param name="PixelWidth"></param>
             <param name="PixelHeight"></param>
             <param name="format"></param>
             <param name="mipChain"></param>
             <param name="linear"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFromStreamingAssets(System.String,System.Collections.Generic.List{System.Byte})">
             <summary>
             read bytes from streaming assets, at the relative path to streaming assets.
             The method handle platform specifically.
             </summary>
             <param name="relativePathToStreamingAsset"></param>
             <param name="bytes"></param>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadFromStreamingAssets(System.String)">
             <summary>
             Read UTF-8 text from streaming assets path.
             </summary>
             <param name="relativePathToStreamingAsset"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadBytesFromStreamingAssets(System.String)">
             <summary>
             Read bytes from streaming folder file
             </summary>
             <param name="relativePathToStreamingAsset"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadTexture2DFromStreamingAssets(System.String)">
             <summary>
             Read texture2d from streaming folder file
             </summary>
             <param name="relativePathToStreamingAsset"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadTexture2DFromLocalPath(System.String)">
             <summary>
             Read texture2d from local file path
             </summary>
             <param name="localPath">Such as C:\\Image\Logo.png</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEUtils.ReadTexture2DFromUrl(System.String)">
             <summary>
             Read texture2d from URL
             </summary>
             <param name="url">Such as C:\\Image\Logo.png</param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetMessageCallbackAttribute">
             <summary>
             标记一个TiNet 网络回调方法。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.LANConnector">
             <summary>
             LAN connector : auto connects udp client to udp server, by broadcaster content.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.LANConnector.RestartTargetIP">
             <summary>
             Restart target IP.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.RestartTargetIP.Random">
             <summary>
             Use random IP when reconnection
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.RestartTargetIP.WaitForPreviousIP">
             <summary>
             Wait for the previous connected IP for [WaitIPTargetTime]
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.RestartTargetIP.SkipPreiousIP">
             <summary>
             Skip the previous connected IP for [WaitIPTargetTime]
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.RestartTargetIP.WaitForSpecificIP">
             <summary>
             Wait for the specific IP for [WaitIPTargetTime]
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.client">
             <summary>
             The net client to auto connect.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.SuppressReconnect">
             <summary>
             if true, suppress reconnection.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.AutoReconnect">
             <summary>
             if true, auto reconnect when disconnected.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.LANConnector.ReconnectIPConfig">
             <summary>
             Config which IP to choose when reconnect
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.LANConnector.WaitIPTargetTime">
             <summary>
             Wait for target IP time when reconnection.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.isConnecting">
             <summary>
             Is the connector connecting to server ?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.previousConnectIP">
             <summary>
             The previous connected IP.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.specificIP">
             <summary>
             The specific IP.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANConnector.startsConnectionTime">
             <summary>
             Start connection time.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.LANConnector.StartAutoConnection">
             <summary>
             Starts the auto connection.
             调用此方法启动自动连接功能.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.LANConnector.Stop(System.Boolean)">
             <summary>
             Stops connector 。
             停止自动连接尝试.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.LANConnector.ParseRecvBuffer(System.Byte[],System.Int32@)">
             <summary>
             Parse the received broadcaster buffer content.
             Output broadcast Port
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.LANConnector.Restart">
             <summary>
             Restarts the whole connection process.
             重新开启连接， 可以在参数中指定重新连接的条件。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.InspectFunctionAttribute">
             <summary>
             Attribute to indicate inspector drawer to draw a quick invoke button.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.Asyncoroutine.WaitEndOfFrame">
             <summary>
             Wait for end of frame
             </summary>
            </member>
        <member name="T:RhinoXDebugger.Asyncoroutine.WaitFixedUpdate">
             <summary>
             Waits for fixed update.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.Asyncoroutine.UnityAwaiterWaitMode">
             <summary>
             unity awaiter wait mode
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiterWaitMode.WaitForJobHandle">
             <summary>
             Waits for job handle to complete 
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiterWaitMode.WaitForJobHandleInMaxFrame">
             <summary>
             Waits for job handle to complete in max frame.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiterWaitMode.WaitForJobHandleInMaxTime">
             <summary>
             Waits for job handle to complete in max time
             </summary>
            </member>
        <member name="T:RhinoXDebugger.Asyncoroutine.UnityAwaiter">
             <summary>
             Unity awaiter .
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiter.waitMode">
             <summary>
             The wait mode
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiter.Time">
             <summary>
             Target time.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.UnityAwaiter.jobHandle">
             <summary>
             The job handle.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.PEMathf">
             <summary>
             Polyengine mathf methods library.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.IsBetween(System.Int32,System.Int32,System.Int32)">
             <summary>
             is the value between [<paramref name="from" />] and [<paramref name="to" />]
             </summary>
             <returns>The <see cref="T:System.Single" />.</returns>
             <param name="value">Value.</param>
             <param name="between1">Between1.</param>
             <param name="between2">Between2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.IsBetween(System.Single,System.Single,System.Single)">
             <summary>
             is the value between [<paramref name="from" />] and [<paramref name="to" />]
             </summary>
             <returns>The <see cref="T:System.Single" />.</returns>
             <param name="value">Value.</param>
             <param name="from">Between1.</param>
             <param name="to">Between2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.IsBetween(UnityEngine.Vector2Int,UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
             <summary>
             Is the value between between1 and between2 ?
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.IsBetween(UnityEngine.Vector3Int,UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
             <summary>
             Is the value between between1 and between2 ?
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approximately(System.Single,System.Single)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approximately(UnityEngine.Vector4,UnityEngine.Vector4)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Approximately the specified a and b.
             </summary>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PrettyAngle(System.Single)">
             <summary>
             Makes the angle a pretty value between [-180 ... 180]
             </summary>
             <returns>The angle.</returns>
             <param name="angle">Angle.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PrettyAngle(UnityEngine.Vector3)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
             <param name="euler">Euler.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PrettyAngle(UnityEngine.Quaternion)">
             <summary>
             Makes the euler a pretty value between [-180 ... 180]
             </summary>
             <returns>The euler.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Rotate2DPoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
             <summary>
             Rotate an 2D point around an 2D center point, in angle.
             </summary>
             <param name="Point2D"></param>
             <param name="PointerCenter"></param>
             <param name="Angle"></param>
             <returns>The rotated point.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ConvertToCircleAngle(System.Single)">
             <summary>
             Clamps an angle to circle range : [0 ~ 360].
             将任意角度转换到 [0 ~ 360] 之间。
             </summary>
             <param name="angle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FlattenXZ(UnityEngine.Quaternion@)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FlattenXZ(UnityEngine.Quaternion)">
             <summary>
             把 rotation 的X和Z轴旋转角度设置为0。
             Flatten 之后的方向只有水平旋转角度。
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.DistanceXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ d of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="pos1">pos1.</param>
             <param name="pos2">pos2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.DotXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ DOT of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ signed angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngleXY(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the signed angle of dir1 and dir2 (on XY axis)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngleZY(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the signed angle of dir1 and dir2 (on ZY axis)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FloorStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not bigger than input.
             For example, input value = 0.7, step = 0.5, return = 0.5. Input vlaue = 1.2. step = 0.5, return = 1
             </summary>
             <param name="input">input value.</param>
             <param name="step">step.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FindClosestFloat(System.Single[],System.Single,System.Int32@)">
             <summary>
             从 floats 找出距离 value 最近的那个值， 返回值并输出索引。
             </summary>
             <param name="floats"></param>
             <param name="value"></param>
             <param name="closestIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FindClosestFloat(System.Collections.Generic.List{System.Single},System.Single,System.Int32@)">
             <summary>
             从 floats 找出距离 value 最近的那个值， 返回值并输出索引。
             </summary>
             <param name="floats"></param>
             <param name="value"></param>
             <param name="closestIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FindClosestInt(System.Int32[],System.Int32,System.Int32@)">
             <summary>
             从 floats 找出距离 value 最近的那个值， 返回值并输出索引。
             </summary>
             <param name="ints"></param>
             <param name="value"></param>
             <param name="closestIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.FindClosestInt(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32@)">
             <summary>
             从 floats 找出距离 value 最近的那个值， 返回值并输出索引。
             </summary>
             <param name="ints"></param>
             <param name="value"></param>
             <param name="closestIndex"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.GetFractional(System.Single)">
             <summary>
             Gets the fractional part of a float.
             E.g. - 10.252 -&gt; 0.252 is return.
             </summary>
             <param name="floatVal"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.GetArrayIndex(System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Boolean)">
             <summary>
             自动进行裁切操作， 获取index的下一个/上一个数组索引。
             </summary>
             <param name="index">索引</param>
             <param name="arrayLength">数组长度</param>
             <param name="next">下一个或上一个索引</param>
             <param name="isIndexClamped">新的索引是否触及了 0 或者最后值。</param>
             <param name="loopHeadTrail">是否允许索引交替轮回.</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.GetFractional(System.Double)">
             <summary>
             Gets the fractional part of a double.
             E.g. - 10.252 -&gt; 0.252 is return.
             </summary>
             <param name="doubleVal"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.GetPointOnCircle(System.Single,System.Single)">
             <summary>
             获取一个点，位于Radius圆半径上，与Vector2.Forward的夹角为Angle.
             </summary>
             <param name="Radius"></param>
             <param name="Angle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.CeilStep(System.Single,System.Single)">
             <summary>
             Steps the input, return a float that is multiple step to stepValue, and not smaller than input.
             For example, input value = 0.7, step = 0.5, return = 1. Input value = 1.2, step = 0.5, return = 1.5
             </summary>
             <returns>The step.</returns>
             <param name="input">Input.</param>
             <param name="step">Step.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.AngleXZ(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Get the XZ angle of dir1 and dir2 (on XZ surface)
             </summary>
             <returns>The X.</returns>
             <param name="dir1">Dir1.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RoundSingle(System.Single,System.Int32)">
             <summary>
             Rounds the float.
             </summary>
             <returns>The float.</returns>
             <param name="f">F.</param>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RoundVector2(UnityEngine.Vector2,System.Int32)">
             <summary>
             Rounds the vector2.
             </summary>
             <returns>The float.</returns>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RoundVector3(UnityEngine.Vector3,System.Int32)">
             <summary>
             Rounds the vector3.
             </summary>
             <returns>The float.</returns>
             <param name="digit">Digit.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RoundVector4(UnityEngine.Vector4,System.Int32)">
             <summary>
             Rounds the vector4.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SnapSingle(System.Single,System.Single)">
             <summary>
             将 Single 按照 SnapLength 长度取整. 所得到的结果是 SnapLength 的整形倍数。
             例如: 
             single = 4.2 , SnapLength = 2, 返回 = 4;
             single = 4.0 , SnapLength = 1.5, 返回 = 4.5;
             </summary>
             <param name="single"></param>
             <param name="SnapLength">Set X,Y,Z of snap length to zero to ignore snapping at the axe.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngle(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Gets the signed angle of baseDir and dir2
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngle(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             Signed angle betweeen two quaternion.
             </summary>
             <param name="qBase"></param>
             <param name="qDir"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SignedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             返回 dir2 到 baseDir 的带符号角度。
             如果在dir2在baseDir右边，返回1.
             否则返回-1.
             如果方向相同，返回0
             </summary>
             <returns>The angle.</returns>
             <param name="baseDir">Base dir.</param>
             <param name="dir2">Dir2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SmoothPoints(System.Collections.Generic.List{UnityEngine.Vector3},System.Single,System.Single)">
             <summary>
             Smooth points by segment .
             This method is NOT thread safe, make sure to handle thread safety in your way.
             平滑点线路径。
             </summary>
             <param name="points"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Dice(System.Single)">
             <summary>
             投骰子。
             Possibility 代表命中率， 在 0..1之间。
             越高代表命中率越高。
             例如, 0.3 代表 30%的命中率。
             </summary>
             <param name="possiblity"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Dice(System.Int32,System.Int32,System.Int32)">
             <summary>
             投骰子。
             Possibility 代表命中率， 在 min..max之间。
             越高代表命中率越高。
             例如, 0.3 代表 30%的命中率。
             </summary>
             <param name="possiblity"></param>
             <param name="min"></param>
             <param name="max"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Distance(System.Single,System.Single)">
             <summary>
             计算两个 float 的距离
             </summary>
             <returns>The diff.</returns>
             <param name="a">The alpha component.</param>
             <param name="b">The blue component.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.DivideSegmentByDistance(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Collections.Generic.List{UnityEngine.Vector3})">
             <summary>
             对Point1,Point2组成的线段按距离，细分成若干个点。
             返回[Point1 ... Point2]之间的细分点的个数。
             注意: 不会输出 Point1, Point2 到Points列表， 只会输出生成的细分插入点。
             </summary>
             <param name="Point1"></param>
             <param name="Point2"></param>
             <param name="SegmentDistance"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Minimum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Min(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
             <summary>
             Select the minimum part of the vector3s
             </summary>
             <param name="vector3s"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Max(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
             <summary>
             Select the maximum part of the vector3s
             </summary>
             <param name="vector3s"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ConcateInts(System.Int32,System.Int32)">
             <summary>
             将两个整形数， 按位做位移操作， 整合为一个Long.
             第一个整形数在低4字节 : 0-3， 第二个整形数在高8个字节: 4-7
             </summary>
             <param name="A"></param>
             <param name="B"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SplitLong(System.Int64,System.Int32@,System.Int32@)">
             <summary>
             将一个long数拆分成两个整形数.
             A : 0 - 3 位
             B : 4 - 7 位
             </summary>
             <param name="A"></param>
             <param name="B"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ConcateShorts(System.Int16,System.Int16)">
             <summary>
             将两个short， 按位做位移操作， 整合为一个 Int.
             第一个整形数在低4字节 : 0-1， 第二个整形数在高8个字节: 2-3
             </summary>
             <param name="A"></param>
             <param name="B"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SplitInt(System.Int32,System.Int16@,System.Int16@)">
             <summary>
             将一个 int 数拆分成两个 short .
             A : 0 - 1 位
             B : 2 - 3 位
             </summary>
             <param name="A"></param>
             <param name="B"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ConcateBytes(System.Byte,System.Byte)">
             <summary>
             将两个 byte， 按位做位移操作， 整合为一个 short.
             第一个byte在低1字节 : 0， 第二个byte在高1个字节: 1
             </summary>
             <param name="A"></param>
             <param name="B"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SplitShort(System.Int16,System.Byte@,System.Byte@)">
             <summary>
             将一个 short 数拆分成两个 byte .
             A : 0  位
             B : 1  位
             </summary>
             <param name="A"></param>
             <param name="B"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Clamp01(UnityEngine.Vector3)">
             <summary>
             把 vect.x,y,z 的值  Clamp 在 [0..1]
             </summary>
             <param name="vect">Vect.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Max(UnityEngine.Color,UnityEngine.Color)">
             <summary>
             Maximum of two colors
             </summary>
             <param name="c1">Color1.</param>
             <param name="c2">Color2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Max(UnityEngine.Color32,UnityEngine.Color32)">
             <summary>
             Maximum of two color32 
             </summary>
             <param name="c1">Color1.</param>
             <param name="c2">Color2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Maximum of two vectors
             </summary>
             <param name="v1">V1.</param>
             <param name="v2">V2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.YawByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做Yaw(水平旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PitchByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             对 rotation 做 Pitch (以X为轴旋转 N个角度)
             </summary>
             <param name="rotation">Rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RollByAngle(UnityEngine.Quaternion,System.Single)">
             <summary>
             Rolls by angle.
             </summary>
             <returns>The by angle.</returns>
             <param name="rotation">Rotation.</param>
             <param name="roll">Roll.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ClampVector2(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Clamps the vector2.
             </summary>
             <returns>The vector2.</returns>
             <param name="v2">V2.</param>
             <param name="minV2">Minimum v2.</param>
             <param name="maxV2">Max v2.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ConeDrift(UnityEngine.Vector3,System.Single,System.Single)">
             <summary>
             以 direction 的指向为方向，做一次桶形偏转。
             </summary>
             <param name="direction"></param>
             <param name="torgueAngle">垂直偏角。</param>
             <param name="driftAngle">抬起角度。</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approach(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             给出原数值 single, 和目标值 target, 速度 speed, 令 single 以speed的速度逼近 target。
             </summary>
             <param name="single">Single.</param>
             <param name="target">Target.</param>
             <param name="speed">Speed.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ApproachAlpha(UnityEngine.Color,System.Single,System.Single,System.Single)">
             <summary>
             Color's alpha approch to target value at the speed
             </summary>
             <param name="color"></param>
             <param name="targetAlpha"></param>
             <param name="speed"></param>
             <param name="deltaTime"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Approach(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
             <summary>
             Color approch to target value at the speed
             </summary>
             <param name="color"></param>
             <param name="targetColor"></param>
             <param name="speed"></param>
             <param name="deltaTime"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.DampTo(System.Int32,System.Int32,System.UInt32,System.Single,System.Action{System.Int32},System.Action{System.Int32},System.Threading.CancellationToken,System.Action{System.Int32})">
             <summary>
             Damp the int value to target value in speed, then return the final value.
             </summary>
             <param name="intVal"></param>
             <param name="targetValue"></param>
             <param name="speed"></param>
             <param name="deltaTime"></param>
             <param name="onUpdate">On damp value update callback.</param>
             <param name="onComplete">On damp value complete damping callback.</param>
             <param name="cancellationToken">Cancellation token</param>
             <param name="onCancel">On cancel callback , with parameter when cancellation is requested. </param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.DampTo(System.Single,System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single},System.Threading.CancellationToken,System.Action{System.Single})">
             <summary>
             Damp the float value to target value in speed, then return the final value.
             </summary>
             <param name="floatVal"></param>
             <param name="targetValue"></param>
             <param name="speed"></param>
             <param name="deltaTime"></param>
             <param name="onUpdate">On damp value update callback.</param>
             <param name="onComplete">On damp value complete damping callback.</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.IsEven(System.Int32)">
             <summary>
             Is the intValue Even (return true) or Odd (return false) ? 
             </summary>
             <returns><c>true</c>, if odd was ised, <c>false</c> otherwise.</returns>
             <param name="intValue">Int value.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Int2FractionalFloat(System.Int32)">
             <summary>
             转换整形数字为小数点后的浮点值： 12345 --&gt; 0.12345
             </summary>
             <returns>The fractional float.</returns>
             <param name="Int">Int.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.ThreePlaneIntersection(UnityEngine.Plane,UnityEngine.Plane,UnityEngine.Plane)">
             <summary>
             Calculate three plane's intersection position.
             </summary>
             <returns>The plane intersection.</returns>
             <param name="p1">P1.</param>
             <param name="p2">P2.</param>
             <param name="p3">P3.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.LineIntersectWithSquad(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2@)">
             <summary>
             给出以 SquadCenter 为中心， 边长 = Edge 的正方形, 计算 Point -&gt; SquadCenter 的线段和此Cube的交点。
             如果 P1 在 Cube 内， 则没有交点，返回 false.
             </summary>
             <param name="SquadCenter">正方形中心</param>
             <param name="Edge">边长</param>
             <param name="Point"></param>
             <param name="IntersectPoint">相交点</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PointDistanceToLine2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Calculate 2D Point's distance to a 2D line from start to end.
             </summary>
             <param name="Point2D"></param>
             <param name="LineStart"></param>
             <param name="LineEnd"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PointSignedDistanceToLine2D(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Calculate 2D Point's distance to a 2D line from start to end.
             如果点在线段方向的左边，返回负值。否则返回正值。
             </summary>
             <param name="Point2D"></param>
             <param name="LineStart"></param>
             <param name="LineEnd"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Calculate two line segment's intersection point.
             Do not calculate the intersection point, faster than another version. 
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.LineIntersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@)">
             <summary>
             Calculate two line segment's intersection point : [P1, P2] Intersect with [P3, P4].
             </summary>
             <returns><c>true</c>, if intersection was lined, <c>false</c> otherwise.</returns>
             <param name="p1">P1 - Line 1 start point</param>
             <param name="p2">P2 - Line 1 end point</param>
             <param name="p3">P3 - Line 2 start point</param>
             <param name="p4">P4 - Line 2 end point</param>
             <param name="intersection">Intersection.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.PitchNYaw(UnityEngine.Quaternion)">
             <summary>
             Remove roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Pitch(UnityEngine.Quaternion)">
             <summary>
             Remove yaw and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Yaw(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and roll from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.RandomSigned">
             <summary>
             返回一个随机的符号 ，1, 或者 -1.
             </summary>
             <returns>The signed.</returns>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.Roll(UnityEngine.Quaternion)">
             <summary>
             Remove pitch and yaw from euler angle.
             </summary>
             <returns>The roll.</returns>
             <param name="quaternion">Quaternion.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.QDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             Calculate quaternion diff = lhs - rhs
             </summary>
             <returns>The iff.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.QSum(UnityEngine.Quaternion,UnityEngine.Quaternion[])">
             <summary>
             Calculate quaternion sum : lhs + rhs[0] + rhs[1] + rhs[2] ...
             </summary>
             <returns>The plus.</returns>
             <param name="lhs">Lhs.</param>
             <param name="rhs">Rhs.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.YawDiff(UnityEngine.Quaternion,UnityEngine.Quaternion)">
             <summary>
             yaw angle diff : lhs.yaw - rhs.yaw
             </summary>
             <returns>The diff.</returns>
             <param name="lhs">lhs.</param>
             <param name="rhs">rhs.</param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SetPitch(UnityEngine.Quaternion,System.Single)">
             <summary>
             设置四元数的 Pitch (俯仰角)
             </summary>
             <param name="lhs"></param>
             <param name="Pitch"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SetYaw(UnityEngine.Quaternion,System.Single)">
             <summary>
             设置四元数的 Yaw (航向)
             </summary>
             <param name="lhs"></param>
             <param name="Yaw"></param>
            </member>
        <member name="M:RhinoXDebugger.PEMathf.SetRoll(UnityEngine.Quaternion,System.Single)">
             <summary>
             设置四元数的 Roll (航向)
             </summary>
             <param name="lhs"></param>
             <param name="Yaw"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.SyncEyeBufferMessage">
             <summary>
             Sync eye buffer from editor to RhinoX message.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.SyncEyeBufferMessage.leftEyeBuffer">
             <summary>
             5 Kb buffer for syncing left eye buffer.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.SyncEyeBufferMessage.rightEyeBuffer">
             <summary>
             5 Kb buffer for syncing left eye buffer.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.SyncEyeBufferMessage.width">
             <summary>
             Width and height of the left and right eye texture.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.LANDiscovery">
             <summary>
             LAN discovery : broadcasting UDP server's port inside LAN
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.LANDiscovery.PrepareBroadcasterBuffer">
             <summary>
             Sets the broadcaster's buffer.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.kMessageCode.SyncARRigObjectsPose">
             <summary>
             同步 AR rig 对象的pose.
             包括: ARCamera,  左右手控制器的姿态。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TcpSocketWrapper">
             <summary>
             TcpSocketWrapper_Receiver.cs - handle receive looping 
             </summary>
             <summary>
             TcpSocketWrapper_Send.cs - handle send outgoing packet.
             </summary>
             <summary>
             Tcp socket wrapper for operating on socket stream.
             </summary>
             <summary>
             TcpSocketWrapper_Daemon.cs
             SocketWrapper的守护线程.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.AsyncRecvState">
             <summary>
             内部类：用于标记接收状态。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.AsyncRecvState.exception">
             <summary>
             异常信息
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.AsyncRecvState.shouldDisconnect">
             <summary>
             在出现了异常的情况下，是否要考虑断连
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.AsyncRecvState.BytesReceived">
             <summary>
             收到的字节数
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.kDefaultIncomingBufferSize">
             <summary>
             默认的1级缓存数据池长度.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.IncomingBuffer">
             <summary>
             数据临时池，每次socket收到的数据先存在这个池中。
             这是socket 通信的1级缓存.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.IncomingBytesList">
             <summary>
             2级缓存， 1级缓存收到的数据存放在这里.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.kDefaultReceiveTimeout">
             <summary>
             默认的接收超时， 3秒
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ReceiveTimeout">
             <summary>
             接收超时.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ReceivedMessage">
             <summary>
             收到的Byte[]数据缓存列表.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.FlushRawRecvData(System.Collections.Generic.List{System.Byte[]})">
             <summary>
             一次性写出所有的数据
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.mutex_recv_buffer">
             <summary>
             Mutex : access recv buffer.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.LastRecvTime">
             <summary>
             记录上一次接收信息的时间.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.RecvMessageCount">
             <summary>
             收到的消息计数.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.InitRecv(System.Int32,System.Single)">
             <summary>
             初始化读取部分。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ReceiveLoop">
             <summary>
             循环读取.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ParseData(System.Collections.Generic.List{System.Byte},System.Byte[]@)">
             <summary>
             对收到的 raw buffer data 数据做一次扫描。如果获取了有效数据, 则
             </summary>
             <param name="ByteList"></param>
             <param name="data"></param>
             <returns></returns>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.SendTimeOut">
             <summary>
             Send timeout in seconds.
             Default : 3 seconds.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.oPackets">
             <summary>
             Queue for caching outgoing packets.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.oPacketTemp">
             <summary>
             Queue for pushing outgoing packets into oPackets queue ,for thread safety.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.oTiNetworkPackets">
             <summary>
             Queue for outgoing network packets.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.lastSentMsgTime">
             <summary>
             The previous send msg time.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.outgoingMutex">
             <summary>
             Mutex locker for outgoing.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.BufferSize_Outgoing">
             <summary>
             The outgoing buffer size.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.MessageMaxSize_Outgoing">
             <summary>
             Outgoing message's max length.
             能容纳的最大消息长度。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.cancel_outgoing">
             <summary>
             发送端 cancellation token source.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.task_Outgoing">
             <summary>
             循环发送的Task.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.socketSentException">
             <summary>
             the socket senting exception.
             Refer to socketError_Sent for detail code.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.socketError_Sent">
             <summary>
             The outgoing socket error.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.socketOutgoingException">
             <summary>
             The outgoing socket exception.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.InitOutgoing(System.Int32,System.Single)">
             <summary>
             初始化发送部分字段。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.GetOutgoingTaskStatus">
             <summary>
             Gets outgoing task status.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.PushOutgoingMessage(System.String)">
             <summary>
             推入外发消息队列 (Text).
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.PushOutgoingMessage(System.Byte[])">
             <summary>
             将 Buffer 数组通过socket发送。
             此方法允许 Buffer 为空， 如果 buffer 为空代表Ping消息，最终会发送一段 MessageHeader + [DataLength] 长度的消息.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.PushOutgoingMessage(System.Byte[],System.Int32,System.Int32)">
             <summary>
             推入外发消息队列.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.PushOutgoingTinetPacket(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             推入 Tinet Data Packet 到消息队列。
             </summary>
             <param name="tinetpacket"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ProcessOutgoingLoop">
             <summary>
             处理外发队列缓冲数据的方法， 循环处理直到被停止。
             此方法在独立线程中调用.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.SendPacket(RhinoXDebugger.UnityNetworking.TcpDataPacket,System.Net.Sockets.SocketError@)">
             <summary>
             同步发送数据, 返回发送的字节数.
             </summary>
             <param name="packet"></param>
             <returns></returns>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ID">
             <summary>
             ID
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.Client">
             <summary>
             Gets the wrapped tcp client.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.RemoteAddress">
             <summary>
             TcpClient 的远端地址
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.RemotePort">
             <summary>
             tcp client 的远端端口.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ConnectionTime">
             <summary>
             建立连接的Unity时间
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.kMessageHeader">
             <summary>
             通信包的消息头.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.DropConnectionTimeout">
             <summary>
             超时断连时间 - 默认6秒。
             在这个时间内，如没有收到任何信息， 则连接自动断开.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.UnityObject">
             <summary>
             a unity engine object as a context to engine operation, like log, coroutine, etc.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.UsingRawSocket">
             <summary>
             使用原始 Socket 通信， 不会附加 MessageHeader， 不会使用结构化的通信方式。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.#ctor(System.Net.Sockets.TcpClient,System.Int32,System.Single,UnityEngine.Object)">
             <summary>
             Constructor - make sure the client is connected when you construct it !
             Default outgoing buffer sizee = 500kB
             </summary>
             <param name="client"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.#ctor(System.Net.Sockets.TcpClient,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,UnityEngine.Object)">
             <summary>
             Constructor - make sure the client is connected when you construct it !
             Customize outgoing buffer sizee 
             </summary>
             <param name="client"></param>
             <param name="OutgoingBufferSize"></param>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.kPingMessageInterval">
             <summary>
             发送ping消息（空消息串)的时间间隔.
             默认1s.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.lastAutoPingTime">
             <summary>
             记录最后一次auto ping的时间.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.timeoutException">
             <summary>
             如果为 true, 代表已经超时.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TcpSocketWrapper.ConnectionDaemon">
             <summary>
             连接状态检查线程.
             在超时之后标记 timeException 字段.
             确定在 socket 建立了连接之后再调用此方法.
             </summary>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UdpListener">
             <summary>
             Udp listener.
             A simple class to receive and event up received data.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpListener.Port">
             <summary>
             The listener port.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpListener.AutoStart">
             <summary>
             if true, Start listener at Start().
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UdpListener.BoundLocalAddress">
             <summary>
             The bound local address;
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpListener.StartListener">
             <summary>
             Starts udp listener.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpListener.StopListener">
             <summary>
             Stops listener
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.SimpleTextMessage">
             <summary>
             Simple text message.
             Use this message for lightweight text message transmission.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UDPServer">
             <summary>
             UDP server.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPServer.BufferKB">
             <summary>
             The buffer size in KB.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPServer.PersistPort">
             <summary>
             The persist port flag.
             If persist port = false, will auto increase the server port number until it's available.
             Turn this option on if you want the udp server to be started in anyway.
             Turn this option off if the udp server port does matter, and requires the UDP Server to be started exactly at the port.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.WaitForSentMessage">
             <summary>
             If true, wait for all of the sent message to be sent at end of frame.
             </summary>
             <value><c>true</c> if force flush all message; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.IsServerRunning">
             <summary>
             Gets a value indicating whether this <see cref="T:UDPManager" /> is server running.
             </summary>
             <value><c>true</c> if is server running; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.AcceptNewClient">
             <summary>
             is the server accepting new client.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.dontDestroyOnLoad">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:UDPServer" /> dont destroy on load1.
             </summary>
             <value><c>true</c> if dont destroy on load1; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.peerConnections">
             <summary>
             The peer connections.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.UDPServer.onConnected">
             <summary>
             Event : on server receives connection. Parameter specify the remote IP endpoint.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPServer.ClientHeartBeatInterval">
             <summary>
             The heart beat interval.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPServer.LostConnectionRetryTime">
             <summary>
             Lost connection re-try time. 
             The connection lost heart beat more than [LostConnectionRetryTime] X [ClientHeartBeatInterval] will be dropped.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPServer.ConnectionCount">
             <summary>
             Gets the how many live connection to this udp server.
             </summary>
             <value>The connection count.</value>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPServer.AsyncSendOps">
             <summary>
             The async-send ops.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.Broadcast(System.String)">
             <summary>
             Broadcast a text message to all peer clients.
             This is synchronous call.
             </summary>
             <param name="UTF8Text">Text.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.Broadcast(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcast the buffer.
             This is synchronous call.
             </summary>
             <param name="buffer">Buffer.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.BroadcastAsync(System.String)">
             <summary>
             Broadcasts the buffer in asynchronous mode.
             </summary>
             <param name="utf8Text">Text.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.BroadcastAsync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcasts the buffer in asynchronous mode.
             </summary>
             <param name="Message">Buffer.</param>
             <param name="length">Length.</param>
             <param name="offset">Offset.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.SendTo(RhinoXDebugger.UnityNetworking.I_Connection,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends the buffer to the connection synchronously.
             </summary>
             <param name="connection">Connection.</param>
             <param name="Message">Message.</param>
             <param name="Offset">Offset.</param>
             <param name="Length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.SendToAsync(RhinoXDebugger.UnityNetworking.I_Connection,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends buffer to target endpoint asynchronously.
             </summary>
             <param name="connection">Connection.</param>
             <param name="Message">Message.</param>
             <param name="Offset">Offset.</param>
             <param name="Length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPServer.Daemon">
             <summary>
             Daemon : server coroutine.
             </summary>
             <returns>The daemon.</returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage">
             <summary>
             LAN discovery message.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.NodeName">
             <summary>
             TiNet 中 ，Node Name == SystemInfo.deviceUniqueIdentifier
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.NodeID">
             <summary>
             Guid.NewGuid()
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.ReliablePort">
             <summary>
             TCP server 的接口
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.UnreliablePort">
             <summary>
             UDP listener 的接口.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.MyRole">
             <summary>
             Preserved
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.Keyword">
             <summary>
             广播身份关键字。
             TiNet.FilterWord.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.CustomTag">
             <summary>
             Custom tag of the TiNet node.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.LANDiscoveryMessage.NodeStartTime">
             <summary>
             The time ticks when the TiNode is started.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.EyeBufferSync">
             <summary>
             Class to sync eye texture out of editor.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EyeBufferSync.editorLeftEye">
             <summary>
             The left and right eye camera at editor.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EyeBufferSync.scaleLeft">
             <summary>
             Texture scaler
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EyeBufferSync.texuretBufferLeft">
             <summary>
             The texture 2D to capture eye buffer.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EyeBufferSync.texuretBufferLeft_Downsample">
             <summary>
             The downsampled texture buffer.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferSync.InitializeForEditorDebugger">
             <summary>
             Initialize at editor debugger.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferSync.PrepareFrame">
             <summary>
             提交 eye buffer frame 到 frameQueue 队列.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferSync.OnCompressJPEGCompletedCallback(System.Byte[],System.Int32)">
             <summary>
             压缩JPEG之后的回调。
             </summary>
             <param name="bytes"></param>
             <param name="id"></param>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferSync.ZipBytes(System.Byte[],System.IO.Compression.CompressionLevel)">
             <summary>
             使用C#内置库, 压缩字节.
             </summary>
             <param name="data"></param>
             <param name="compressionLevel"></param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.EyeBufferFrame">
             <summary>
             代表一个 Eye Buffer Frame 数据包。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.EyeBufferFrame.serializationTime">
             <summary>
             此 Frame 的内容填充时间。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferFrame.GetFrame">
             <summary>
             Gets a frame instance from pool or instaniate one.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferFrame.ReturnFrame(RhinoXDebugger.EyeBufferFrame)">
             <summary>
             Return frames to pool.
             </summary>
             <param name="frameInstance"></param>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferFrame.Initialize">
             <summary>
             Initialize the pool list.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferFrame.Serialize(System.Int32,System.UInt16,System.UInt16,System.Byte[],System.Byte[])">
             <summary>
             序列化数据到 FrameDataBuffer 数组中。
             </summary>
             <param name="frameIndex"></param>
             <param name="textureWidth"></param>
             <param name="textureHeight"></param>
             <param name="leftEyeJpeg"></param>
             <param name="rightEyeJpeg"></param>
            </member>
        <member name="M:RhinoXDebugger.EyeBufferFrame.Deserialize(System.Collections.Generic.List{System.Byte},System.Int32@,System.Int32@,System.Int32@,UnityEngine.Texture2D,UnityEngine.Texture2D)">
             <summary>
             反序列化数据并输出参数.
             </summary>
             <param name="frameIndex"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="leftEyeTex"></param>
             <param name="rightEyeTex"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.SyncARCameraRigMessage">
             <summary>
             Sync AR CameraRig world pose to Editor Debugger.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNet">
             <summary>
             TiNet_OutgoingDaemon.cs
             </summary>
             <summary>
             Ti-Net.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.Broadcast(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             UDP broadcast message to LAN
             </summary>
             <param name="message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendToAllReliable(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends a reliable TiNetwork message by TCP/IP 
             </summary>
             <typeparam name="T"></typeparam>
             <param name="message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendReliableTo(RhinoXDebugger.UnityNetworking.I_TiNetNode,RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends a TiNetwork message by TCP/IP 
             </summary>
             <typeparam name="T"></typeparam>
             <param name="node">发送目标节点</param>
             <param name="message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendToAllUnreliable(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends a TiNetwork message by UDP
             </summary>
             <typeparam name="T"></typeparam>
             <param name="message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendUnreliableTo(RhinoXDebugger.UnityNetworking.I_TiNetNode,RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends a TiNetwork message by UDP
             </summary>
             <typeparam name="T"></typeparam>
             <param name="message"></param>
             <param name="message"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendTextMessageToAll_Reliable(System.String)">
             <summary>
             Sends a text message to all node, in reliable channel.
             </summary>
             <param name="text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendTextMessageToNode_Reliable(System.String,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends a text message to target node, in reliable channel.
             </summary>
             <param name="text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendTextMessageToAll_Unreliable(System.String)">
             <summary>
             Sends a text message to all node, in unreliable channel.
             </summary>
             <param name="text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendTextMessageToNode_Unreliable(System.String,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends a text message to target node, in unreliable channel.
             </summary>
             <param name="text"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendDataMessageToAll_Reliable(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends a byte[] message to all node, in reliable channel.
             </summary>
             <param name="buffer">Maximum 1KB</param>
             <param name="startIndex"></param>
             <param name="length">Maximum 1KB</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendDataMessageToAll_Unreliable(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends a byte[] message to all node, in reliable channel.
             </summary>
             <param name="buffer">Maximum 1KB</param>
             <param name="startIndex"></param>
             <param name="length">Maximum 5KB</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendDataMessageToNode_Reliable(System.Byte[],System.Int32,System.Int32,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends a text message to target node, in reliable channel.
             </summary>
             <param name="buffer">Maximum 1KB</param>
             <param name="startIndex"></param>
             <param name="length">Maximum 1KB</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendDataMessageToNode_Unreliable(System.Byte[],System.Int32,System.Int32,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends a text message to target node, in reliable channel.
             </summary>
             <param name="buffer">Maximum 1KB</param>
             <param name="startIndex"></param>
             <param name="length">Maximum 1KB</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendFile(System.String,RhinoXDebugger.UnityNetworking.I_TiNetNode,System.String)">
             <summary>
             以流的形式发送文件到 Node 节点。
             </summary>
             <param name="FilePath"></param>
             <param name="node">接受点。</param>
             <param name="FileAlias">文件的自定义名，如果为空，则使用File的本名。FileAlias 可以包含扩展名, 例如 : file_exp.txt</param>
             <returns>Sent result.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.SendBulkData(System.Byte[],System.Int32,System.Int32,RhinoXDebugger.UnityNetworking.I_TiNetNode,System.String,System.Boolean)">
             <summary>
             和 SendFile 相近，直接发送byte[]数组。
             </summary>
             <param name="buffer">数据缓存</param>
             <param name="offset">数据起点</param>
             <param name="length">数据总长</param>
             <param name="node"></param>
             <param name="name">数据的名字</param>
             <param name="UsingUnreiableChannel">是否使用udp</param>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.AutoStart">
             <summary>
             If auto start == true, the TiNet node will automatically starts networking.
             If false, call "StartNetwork" to start TiNet.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.CustomTag">
             <summary>
             Custom tag of the ti node.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.PortBroadcast">
             <summary>
             Port for network broadcasting discovery.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.PortReliable">
             <summary>
             Port for reliable (TCP) message
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.PortUnreliable">
             <summary>
             Port for unreliable (UDP) message
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.DebugMode">
             <summary>
             Verbose debug mode.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.DetachNetworkOnAppPaused">
             <summary>
             If true, detach tinet from network when application paused is invoked.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.ConnectionFilterMode.NoFilter">
             <summary>
             没有过滤器。只要有接受到广播就自动连接。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.ConnectionFilterMode.UseFilterWord">
             <summary>
             使用过滤器， 只有接受到对应广播关键字的节点才建立连接。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.FilterMode">
             <summary>
             过滤机制。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.FilterWord">
             <summary>
             过滤关键字。
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.BroadcastDiscovery">
             <summary>
             是否广播局域网探索信息。
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.AutoJointNetwork">
             <summary>
             是否自动根据监听加入网络。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.broadcastListener">
             <summary>
             UDP 广播监听器。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.broadcastSender">
             <summary>
             UDP 广播器。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.udpSender">
             <summary>
             UDP 发送器。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.udpListener">
             <summary>
             Unreliable message UDP 监听器。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.tcpServer">
             <summary>
             The local tcp server.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.PacketListCache">
             <summary>
             Received packet for caching.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.TiMessageHandlers01">
             <summary>
             Ti-Net message handlers 01.
             Key = message code.
             Value = Message handler action.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.TiMessageHandlers02">
             <summary>
             Ti-Net message handlers 02.
             Key = message code.
             Value = Message handler action.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.MachineName">
             <summary>
             The machine name of the net node.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.MyGUID">
             <summary>
             TiNet node's GUID
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.GUIDPart1">
             <summary>
             GUID part 1, part 2.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.TiNetIDNodeID">
             <summary>
             Ti-Net node ID.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.TiNetIDNodeName">
             <summary>
             The TiNet ID of the current machine node.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.m_nodes">
             <summary>
             和这个 TiNet 相连的网络节点
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.nodeMap">
             <summary>
             NodeName - TiNetNode 节点字典。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.TcpClients">
             <summary>
             Tcp clients to all connected Ti-Net nodes.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.TcpNodeClientMap">
             <summary>
             Tcp clients to all connected Ti-Net nodes.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNet.ReceiveFileInfos">
             <summary>
             此列表字段是Tinet收到的远端文件数据的封装器.
             每次收到一个 packet index == 0 的 Transfer DataMessage , 此列表中就会插入一个数据对象。
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.IsNetworkStarted">
             <summary>
             Is the TiNet ready?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.ThisNode">
             <summary>
             Gets the current tinet node .
             If network is not started, the node is null.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnTryToAddNode">
             <summary>
             在尝试添加一个 tinet node 之前的筛选委托， 供上层应用使用。
             param 2 = 对方tinet node 的 custom tag.
             param 3 = 对方IP.
             return : 如果为false, 则tinet在收到对方的身份信息的时候， 不会添加此节点。
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnNodeConnected">
             <summary>
             Event : On TiNet node is connected.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnNodeDisconnected">
             <summary>
             Event : on TiNet node is disconnected.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnTiNetStart">
             <summary>
             Event : on TiNet is start.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnTiNetStop">
             <summary>
             Event : on TiNet is stop.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnTextMessage">
             <summary>
             Event : on text message.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnDataMessage">
             <summary>
             Event : on data message.
             Parameter 1 = data buffer.
             Parameter 2 = data length. Maximum 5KB
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnQueryAckMessage">
             <summary>
             Event : on query info message (ack) , 来自远端的回复
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnReceiveFile">
             <summary>
             Event : on tinet receives a file from remote peer node.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.TiNet.OnNodeDiscovered">
             <summary>
             Event : on a remote node is discovered by receiving its broadcasting info.
            
             Param 1 = remote node's ip;
            
             Param 2 = remote node's custom tag
            
             Param 3 = remote node's ID
             
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.NetworkStartTime">
             <summary>
             Real start time of the TiNet instance.
             If the TiNet is not start, this value is null.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.TcpServer_OnFlushData(System.Collections.Generic.IEnumerable{RhinoXDebugger.UnityNetworking.NetworkDataPacket})">
             <summary>
             On tcp server flush data packet list.
             </summary>
             <param name="packets"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.TcpServer_OnServerDisconnect(RhinoXDebugger.UnityNetworking.I_Connection)">
             <summary>
             Tcp server disconnect callback.
             </summary>
             <param name="connection"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.OnApplicationPause(System.Boolean)">
             <summary>
             Stop networking when app is paused.
             restart networking when app is startup.
             </summary>
             <param name="pause"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.StartNetworking">
             <summary>
             Starts TiNet networking .
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.StopNetworking">
             <summary>
             Stops TiNet netwokring .
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.OnUDPPacket(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             Callback : On UDP packet.
             </summary>
             <param name="DataPacket"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.TryConnectsTo(System.String,System.Int32,System.Boolean)">
             <summary>
             尝试与一个 Address : UDP port 的主机通讯， 并建立连接。
             </summary>
             <param name="IPAddres"></param>
             <param name="DiscoveryPort">对方Tinet的网络发现节点。</param>
             <param name="wantsMutualConnection">如果为true, 则建立相互连接。</param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.TryAddNode(RhinoXDebugger.UnityNetworking.TiNetNode)">
             <summary>
             Trys to add a Ti-Network node.
             添加一个 TiNetwork 节点。
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.BroadcastDiscoveryMessage">
             <summary>
             广播局域网发现信息。
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.GetTiNetNode(System.String,RhinoXDebugger.UnityNetworking.I_TiNetNode@)">
             <summary>
             Gets TiNet node.
             </summary>
             <param name="NodeName"></param>
             <param name="Node"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.GetTiNetNode(System.Net.IPAddress,RhinoXDebugger.UnityNetworking.I_TiNetNode@)">
             <summary>
             Gets TiNet node.
             </summary>
             <param name="address"></param>
             <param name="Node"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.GetAllNodes(System.Collections.Generic.List{RhinoXDebugger.UnityNetworking.I_TiNetNode})">
             <summary>
             Gets all net nodes.
             </summary>
             <param name="Nodes"></param>
             <returns></returns>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNet.NodeCount">
             <summary>
             Gets node count.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNet.TiNetMessageReceiver.OnSendFileMessage(RhinoXDebugger.UnityNetworking.TiNetMessage,System.Net.IPEndPoint)">
             <summary>
             收到了来自远端的文件传输信息。
             </summary>
             <param name="message"></param>
             <param name="endPoint"></param>
            </member>
        <member name="T:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer">
             <summary>
             核心异步 Coroutine 容器.
             支持自更模式和代理更新模式。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.Pooled_Unity_Awaiter">
             <summary>
             缓存的 UnityAwaiter.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.Active_Unity_Awaiter">
             <summary>
             激活的 UnityAwaiter.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.UpdateByExternalCall">
             <summary>
             如果 UpdateByExternalCall == true, 则 AwaiterCoroutineer 自身不会在Update()中更新
             WaitForNextFrame | WaitForGameTime | WaitForRealTime 的等待器，外部脚本需要显式调用
             UpdateJob() 代码来更新等待器列表。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.LateUpdateByExternalCall">
             <summary>
             如果 LateUpdateByExternalCall == true, 则 AwaiterCoroutineer 自身不会在 LateUpdate()中更新
             WaitForLateUpdate 的等待器，外部脚本需要显式调用
             LateUpdateJob() 代码来更新信息。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.FixedUpdateByExternalCall">
             <summary>
             如果 FixedUpdateByExternalCall == true, 则 AwaiterCoroutineer 自身不会在 FixedUpdate()中更新
             WaitForFixedUpdate 的等待器，外部脚本需要显式调用 FixedUpdateJob() 方法来更新等待器列表。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.EndOfFrameUpdateByExternalCall">
             <summary>
             如果 EndOfFrameUpdateByExternalCall == true, 则 AwaiterCoroutineer 自身不会在 WaitForEndOfFrame()中更新
             WaitForEndOfFrame 的等待器，外部脚本需要显式调用 EndOfFrameUpdateJob() 方法来更新等待器列表。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitForNextFrameAwaiter">
             <summary>
             Gets wait for next frame awaiter .
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitEndOfFrameAwaiter">
             <summary>
             Gets wait for end of frame awaiter .
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitForFixedUpdateAwaiter">
             <summary>
             Gets wait for fixed update 
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitForLateUpdateAwaiter">
             <summary>
             Gets wait for late update 
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitForGameTimeAwaiter(System.Single,System.Boolean)">
             <summary>
             Gets awaiter for game time.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.GetWaitForJobHandle(Unity.Jobs.JobHandle,System.Nullable{System.Int32},System.Nullable{System.Single})">
             <summary>
             Gets wait for job handle
             </summary>
             <param name="jobHandle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.UpdateJob">
             <summary>
             Update()
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.LateUpdateJob">
             <summary>
             LateUpdate()
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.FixedUpdateJob">
             <summary>
             Fixed Update
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineer.EndOfFrameUpdateJob">
             <summary>
             Call this method in external class, to invoke end of frame update .
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper">
             <summary>
             UdpSocketSenderWrapper.cs
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.UnityObject">
             <summary>
             a unity engine object as a context to engine operation, like log, coroutine, etc.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.mutex">
             <summary>
             Threading mutex.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.PendingPackets">
             <summary>
             The outgoing pending packets.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.OutgoingPackets">
             <summary>
             The in-outgoing progress packets.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.#ctor(UnityEngine.Object)">
             <summary>
             创建一个通用的 Socket wrapper.
             </summary>
             <param name="context"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.#ctor(UnityEngine.Object,System.Int32)">
             <summary>
             创建一个通用的 Socket wrapper.
             </summary>
             <param name="context"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.Send(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends a message.
             The method puts a outging message in the outgoing queue.
             The new message will be put to last item at the queue.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.Send(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             Sends a message.
             The method puts a outging message in the outgoing queue.
             The new message will be put to last item at the queue.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UdpSocketSenderWrapper.Broadcast(RhinoXDebugger.UnityNetworking.TiNetworkPacket)">
             <summary>
             Broadcast bytes to all LAN devices.
             </summary>
             <param name="packet"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.PENetworkUtils">
             <summary>
             Network utils.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.PENetworkUtils.SetSocketKeepAlive(System.Net.Sockets.Socket,System.Boolean,System.Single,System.Single)">
             <summary>
             Sets socket I/O control.
             </summary>
             <param name="socket"></param>
             <param name="onOff"></param>
             <param name="keepAliveTime"></param>
             <param name="retryInterval"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.PENetworkUtils.SetSocketKeepAlive(System.Net.Sockets.TcpClient,System.Boolean,System.Single,System.Single)">
             <summary>
             Sets socket I/O control.
             </summary>
             <param name="tcpClient"></param>
             <param name="onOff"></param>
             <param name="keepAliveTime"></param>
             <param name="retryInterval"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.PENetworkUtils.SetSocketKeepAlive(System.Net.Sockets.TcpListener,System.Boolean,System.Single,System.Single)">
             <summary>
             Sets socket I/O control.
             </summary>
             <param name="listener"></param>
             <param name="onOff"></param>
             <param name="keepAliveTime"></param>
             <param name="retryInterval"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.PENetworkUtils.GetLocalIP(System.Net.IPAddress@)">
             <summary>
             Get local IP address
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.PENetworkUtils.GetSubnetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress@)">
             <summary>
             Get subnet broadcasting IP address.
             </summary>
             <param name="localIP"></param>
             <param name="subnetBroadcastIP"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.Broadcaster">
             <summary>
             UDP LAN Broadcaster.
             broadcast message inside LAN.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.Port">
             <summary>
             Gets or sets the port.
             </summary>
             <value>The port.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.Buffer">
             <summary>
             Gets or sets the buffer.
             </summary>
             <value>The buffer.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.BuffetOffset">
             <summary>
             Gets or sets the buffet offset.
             </summary>
             <value>The buffet offset.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.BufferLength">
             <summary>
             Gets or sets the length of the buffer.
             If Null, buffer.Length is used.
             </summary>
             <value>The length of the buffer.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.AutoStart">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:RhinoXDebugger.UnityNetworking.Broadcaster" /> auto start.
             </summary>
             <value><c>true</c> if auto start; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.Looping">
             <summary>
             If looping  = true, will keep broadcast the message in every interval second.
             Change this value runtime to false to stop broadcasting loop.
             </summary>
             <value><c>true</c> if looping; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.Interval">
             <summary>
             Gets or sets the interval.
             </summary>
             <value>The interval.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.Broadcaster.IsBroadcasting">
             <summary>
             Is the broadcaster currently keeping broadcasting ?
             </summary>
             <value><c>true</c> if is loop broadcasting; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.Broadcaster.StartBroadcasting">
             <summary>
             Starts broadcasting. If loop = true, will keep broadcasting after calling this method.
             If loop = false, broadcast one message then return.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.Broadcaster.BroadcastOnce(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcast one message to the LAN, ignore the setting on the component.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.NetServer">
             <summary>
             Net server.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetServer.OnServerDisconnect">
             <summary>
             When a connection is disconnected.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.NetServer.OnServerConnected">
             <summary>
             When a new connection is connected.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.ServerAddress">
             <summary>
             Server address
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.ServerPort">
             <summary>
             Server port
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.MaxConnection">
             <summary>
             Max connection
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.ConnectionCount">
             <summary>
             Gets the alive connection count.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.IsServerRunning">
             <summary>
             Is server running?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.AcceptNewClient">
             <summary>
             is the server accepting new client.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.NetServer.AutoStart">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:UPDServer" /> auto start UDP server.
             </summary>
             <value><c>true</c> if auto start; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.StartServer">
             <summary>
             Starts server
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.StopServer">
             <summary>
             Stops server.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.SendTo(RhinoXDebugger.UnityNetworking.I_Connection,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends message to connection, starts from offset , in length.
             </summary>
             <param name="connection"></param>
             <param name="Message"></param>
             <param name="Offset"></param>
             <param name="Length"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.BroadcastAsync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcast message to all connected clients.
             </summary>
             <param name="Message"></param>
             <param name="length"></param>
             <param name="offset"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.InvokeOnServerConnected(RhinoXDebugger.UnityNetworking.I_Connection)">
             <summary>
             Invoke on server connected by new client
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.NetServer.InvokeOnServerDisconnect(RhinoXDebugger.UnityNetworking.I_Connection)">
             <summary>
             Invoke on server disconnect  client
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.BroadcastListener">
             <summary>
             LAN broadcasting listener receives broadcast message inside LAN.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.BroadcastListener.AutoStart">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:RhinoXDebugger.UnityNetworking.BroadcastListener" />
             auto start.
             </summary>
             <value><c>true</c> if auto start; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.BroadcastListener.StartDelay">
             <summary>
             Start delay time.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.BroadcastListener.Port">
             <summary>
             Gets or sets the port.
             </summary>
             <value>The port.</value>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.BroadcastListener.m_BufferKB">
             <summary>
             The buffer size in KB.
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.BroadcastListener.OnListenMessage">
             <summary>
             Event : listen broadcast message.
             1st parameter : the ip address of the broadcaster
             2nd parameter : the byte[] buffer holds the received message.
             3rd parameter : the length of the actual message.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.BroadcastListener.IsListening">
             <summary>
             Gets a value indicating whether this <see cref="T:RhinoXDebugger.UnityNetworking.BroadcastListener" /> is listening.
             </summary>
             <value><c>true</c> if is listening; otherwise, <c>false</c>.</value>
            </member>
        <member name="T:RhinoXDebugger.RhinoXDebuggerProxy">
             <summary>
             RhinoX Debugger Proxy.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.RhinoXDebuggerProxy.OnGroundPlaneSyncMessage(RhinoXDebugger.UnityNetworking.TiNetMessage,System.Net.IPEndPoint)">
             <summary>
             收到了groundplane同步属性的消息
             </summary>
             <param name="message"></param>
             <param name="endPoint"></param>
            </member>
        <member name="M:RhinoXDebugger.RhinoXDebuggerProxy.InitializeEyeTexturesRenderer(UnityEngine.Camera)">
             <summary>
             Adds a eye texture drawer to RhinoX debugger's ARCamera.
             </summary>
             <param name="eyeCamera">The eye camera.</param>
            </member>
        <member name="M:RhinoXDebugger.RhinoXDebuggerProxy.ClearEyeBufferTexture">
             <summary>
             Clear both eye textures to pure black.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TransferDataMessage">
             <summary>
             Bulk data transfer message.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TransferDataMessage.name">
             <summary>
             文件/对象的名字。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TransferDataMessage.packetIndex">
             <summary>
             包的序列id
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TransferDataMessage.packetTotalCount">
             <summary>
             包总数
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TransferDataMessage.length">
             <summary>
             The data buffer length;
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TcpDataPacket">
             <summary>
             Internal data structure for tcp data wrapper.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UDPClient">
             <summary>
             UDP client.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPClient.BufferKB">
             <summary>
             The buffer size in KB.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPClient.dontDestroyOnLoad">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:UDPServer" /> dont destroy on load1.
             </summary>
             <value><c>true</c> if dont destroy on load1; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPClient.ClientState">
             <summary>
             Gets client state.
             </summary>
             <value>The state of the client.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPClient.IsClientConnected">
             <summary>
             Is the client currently connected ?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPClient.IsClientConnecting">
             <summary>
             Is the client connecting?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPClient.IsClientDisconnected">
             <summary>
             Is the connect disconnected ?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPClient.m_HeartBeatInterval">
             <summary>
             The heart beat interval.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.StartClient">
             <summary>
             Starts the UDP client.
             Client state turns to Connecting.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.ClientSocket_OnClientIsConnected">
             <summary>
             On client socket connected.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.StopClient">
             <summary>
             Stops the udp client, shutdown the udp socket and dispose it.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.Daemon">
             <summary>
             Daemon coroutine : monitor client running state.
             </summary>
             <returns>The running.</returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.Send(System.String)">
             <summary>
             Sends text over the UDP client.
             Note : this is synchronous operation.
             </summary>
             <param name="text">Text.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.Send(System.Byte[])">
             <summary>
             Send the specified buffer over the UDP client.
             </summary>
             <param name="Message">Buffer.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.Send(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Send the specified buffer over the UDP client.
             </summary>
             <param name="buffer">Buffer.</param>
             <param name="StartOffset">Start offset.</param>
             <param name="Length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.SendAsync(System.String)">
             <summary>
             Sends text over the UDP client.
             Note : this is asynchronous operation.
             </summary>
             <param name="text">Text.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.SendAsync(System.Byte[])">
             <summary>
             Send the specified buffer over the UDP client.
             </summary>
             <param name="buffer">Buffer.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Send the specified buffer over the UDP client.
             </summary>
             <param name="buffer">Buffer.</param>
            </member>
        <member name="F:RhinoXDebugger.TextureScale.newColors">
             <summary>
             The rescaled new colors.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.TextureScale.destTexture">
             <summary>
             新的图像的目标。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.SyncGroundPlaneMessage">
             <summary>
             Sync ground plane message.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.SyncGroundPlaneMessage.isDeleted">
             <summary>
             如果为true, 代表要删除此ground plane 对象。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TcpHeartBeatStatus">
             <summary>
             UDP connection status.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitForNextFrame)">
             <summary>
             Gets awaiter : wait for next frame.
             </summary>
             <param name="waitForNextFrame"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitEndOfFrame)">
             <summary>
             Gets awaiter : end of frame.
             </summary>
             <param name="waitEndOfFrame"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitForLateUpdate)">
             <summary>
             Gets awaiter : late update
             </summary>
             <param name="waitLateUpdate"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitForGameTime)">
             <summary>
             Gets awaiter : game time
             </summary>
             <param name="waitForGameTime"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(Unity.Jobs.JobHandle)">
             <summary>
             Gets awaiter to wait for job handle to complete.
             </summary>
             <param name="JobHandle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(Unity.Jobs.JobHandle,System.Single)">
             <summary>
             Gets awaiter to wait for job handle to complete.
             Waits for maximum time.
             </summary>
             <param name="JobHandle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(Unity.Jobs.JobHandle,System.Int32)">
             <summary>
             Gets awaiter to wait for job handle to complete.
             Waits for maximum frame.
             </summary>
             <param name="JobHandle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.UnityAwaiter)">
             <summary>
             Gets awaiter 
             </summary>
             <param name="JobHandle"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitForRealTime)">
             <summary>
             Gets awaiter : game realtime 
             </summary>
             <param name="waitForRealTime"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.Asyncoroutine.AwaiterCoroutineExtension.GetAwaiter(RhinoXDebugger.Asyncoroutine.WaitFixedUpdate)">
             <summary>
             Gets awaiter for fixed update.
             </summary>
             <param name="waitForFixedUpdate"></param>
             <returns></returns>
            </member>
        <member name="F:RhinoXDebugger.PeerDeviceItemNode.isConnected">
             <summary>
             Is the debugger currently connected to this node?
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TCPServer">
             <summary>
             Tcp server wrapper.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPServer.DropTimeout">
             <summary>
             Drop timeout.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.m_UsingRawSocket">
             <summary>
             使用原始 Socket 通信， 不会附加 MessageHeader， 不会使用结构化的通信方式。
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPServer.UsingRawSocket">
             <summary>
             使用原始 Socket 通信， 不会附加 MessageHeader， 不会使用结构化的通信方式。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.KeepAlive">
             <summary>
             Sets the socket option to keep it alive ?
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TCPServer.ServerState">
             <summary>
             服务器状态.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.kAcceptTimeout">
             <summary>
             监听超时
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.mutexAcceptClients">
             <summary>
             For thread safety access to AcceptedClients
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.AcceptedClients">
             <summary>
             All of the accept clients.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.RecvDataPackets">
             <summary>
             所有收到的数据包.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPServer.IsServerRunning">
             <summary>
             is server running?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TCPServer.AcceptNewClient">
             <summary>
             is server running?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.CancelAccept">
             <summary>
             If true, server's accept action will be cancelled
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.newSetupConnections_thread_safe">
             <summary>
             新建立的连接 (for thread safe acceess)
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TCPServer.UnityTime">
             <summary>
             Unity time for multi-thread access
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.StartServer">
             <summary>
             Starts server.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.StopServer">
             <summary>
             Stops listener and drops all accepted connection.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.StartListening">
             <summary>
             Start listening - 开启监听器。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.StopListening">
             <summary>
             Stop listening - 停止监听器。但是保留已经建立了的连接。
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.AcceptClientLoop">
             <summary>
             循环接收新的连接.
             </summary>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.SendTextToClient(System.String,System.Int32)">
             <summary>
             Send text to connected tcp client.
             </summary>
             <param name="text"></param>
             <param name="ClientID"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.BroadcastAsync(System.String)">
             <summary>
             Broadcasts the buffer to all connected tcp clients in asynchronous mode.
             </summary>
             <param name="text">Text.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.SendTo(RhinoXDebugger.UnityNetworking.I_Connection,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends message to connection, starts from offset , in length.
             </summary>
             <param name="connection"></param>
             <param name="Message"></param>
             <param name="Offset"></param>
             <param name="Length"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.BroadcastAsync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcasts the buffer in asynchronous mode.
             </summary>
             <param name="Message">Message to broadcast.</param>
             <param name="length">Length.</param>
             <param name="offset">Offset.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.Ping">
             <summary>
             Broadcast a ping message to every connected clients.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TCPServer.GetClient(System.Int32)">
             <summary>
             Get socket client by client ID.
             </summary>
             <param name="ClientID"></param>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.Ack_TransformDataMessage">
             <summary>
             针对 TransferDataMessage 的应答.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.Ack_TransformDataMessage.name">
             <summary>
             相应的文件名。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.Ack_TransformDataMessage.packetIndex">
             <summary>
             响应的 package index.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.DebuggerGlobalSetting">
             <summary>
             Debugger global setting.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.JPEGQuality">
             <summary>
             做为 jpeg 传输的质量
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.defaultIPD">
             <summary>
             The default IPD
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.defaultVIOShift">
             <summary>
             The default VIO shift.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.eyeRenderTextureSize">
             <summary>
             The default eye render texture size.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.eyeTextureBufferDownSampleRate">
             <summary>
             双目渲染图的传输前的压缩率。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.compressionLevel">
             <summary>
             Compression level.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.SyncCameraPoseInterval">
             <summary>
             Sync AR camera pose interval time.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.DebuggerGlobalSetting.SyncCameraTextureFPS">
             <summary>
             FPS of syncing camera eye texture from editor to RhinoX.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.ConnectionState">
             <summary>
             Connection state
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.SyncControllerButtonEventMessage">
             <summary>
             Message to sync controller button event from RhinoX Debugger to Editor Debugger. 
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetNode">
             <summary>
             The Ti-Network node.
             代表一个 TiNet 中的网络节点。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.isLocalNode">
             <summary>
             是否本地网络节点?
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.IsLocalNode">
             <summary>
             是否本地网络节点?
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.nodeName">
             <summary>
             The Node Name
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.NodeName">
             <summary>
             Gets the node id.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.nodeID">
             <summary>
             The Node ID
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.NodeID">
             <summary>
             Gets the node id.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.address">
             <summary>
             The node's address.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.Address">
             <summary>
             The node's address.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.CustomTag">
             <summary>
             The node's custom tag.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.reliablePort">
             <summary>
             The node's reliable port.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.unreliablePort">
             <summary>
             The node's unreliable port.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetNode.nodeStartTime">
             <summary>
             The time ticks when the ti-node starts.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.NodeStartTime">
             <summary>
             The node starts time.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.TiNetNode.UserData">
             <summary>
             The user data allows application script to extent TiNetNode instance.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.MessageChannel.Broadcast">
             <summary>
             Unreliable message by UDP broadcasting 
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.MessageChannel.Reliable">
             <summary>
             Reliable TCP message
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.MessageChannel.Unreliable">
             <summary>
             Unreliable UDP message
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetworkPacket">
             <summary>
             TiNetwork data packet.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetworkPacket.endPoint">
             <summary>
             This field is internal used only.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.TiNetworkPacket.isProcessed">
             <summary>
             标记此network packet是否已经被处理完毕?
             如果 isProcessed == true, 代表此packet内的数据已经被发送。
             </summary>
            </member>
        <member name="T:RhinoXDebugger.RectTransformAnchor">
             <summary>
             Rect transform's 5 corner position.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.TransformExtension">
             <summary>
             Transform extension : extension method for UnityEngine.Transform
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.GetAllChildrenGameObjects(UnityEngine.Transform,System.Boolean)">
             <summary>
             Returns all children game object.
             </summary>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.GetPathToParent(UnityEngine.Transform,UnityEngine.Transform,System.String@,System.Int32@)">
             <summary>
             获取 Child 到 Parent 的路径, 和层级数。
             </summary>
             <param name="child"></param>
             <param name="Parent"></param>
             <param name="Path"></param>
             <param name="Hierarchy"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.GetAllChildrenTransforms(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform},System.Boolean)">
             <summary>
             Returns all children game object.
             </summary>
             <param name="gameObject"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.GetOrCreateChild(UnityEngine.Transform,System.String)">
             <summary>
             Gets the or create child transform of name.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.InverseTransformQuaternion(UnityEngine.Transform,UnityEngine.Quaternion)">
             <summary>
             Inverses the quaternion to transform's local rotation
             </summary>
             <param name="transform">Transform.</param>
             <param name="worldRotation">World rotation.</param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DeleteAllChildren(UnityEngine.Transform,System.Single)">
             <summary>
             Deletes all children from self.
             </summary>
             <param name="transform">Transform.</param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DeleteAllChildren(UnityEngine.GameObject,System.Single)">
             <summary>
             Deletes all children from self.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DeleteAllChildrenImmediately(UnityEngine.GameObject)">
             <summary>
             Deletes (immediately) all children from self.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DeleteAllChildrenImmediately(UnityEngine.Transform)">
             <summary>
             Deletes (immediately) all children from self.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DestroyChildrenByName(UnityEngine.Transform,System.String,System.Single,System.Boolean,System.StringComparison,System.Boolean)">
             <summary>
             从 GameObject 下删除名字叫 [childrenName] 的子对象。
             这个方法不会遍历深层级对象，只会遍历第一层级。
             </summary>
             <param name="transform"></param>
             <param name="childrenName">名字</param>
             <param name="destroyAll">是否删除全部叫做这个名字的Children</param>
             <param name="stringComparison">名字比较模式</param>
             <param name="delay">延迟</param>
             <param name="allowDestroyAsset">是否允许删除资源对象</param>
             <returns>被删除的个数</returns>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.DeleteChild(UnityEngine.GameObject,System.Int32,System.Single)">
             <summary>
             Delete a child gameobject of the index, if it exists.
             Return true if the game object exists and deleted.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.LookAtXZ(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             Looks at world position but only rotate in yaw, rotate axis = Vector3.up
             </summary>
             <param name="WorldPosition">World position.</param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.ResetButChildrenStays(UnityEngine.Transform,RhinoXDebugger.TransformExtension.ResetMask)">
             <summary>
             Resets the transform local matrix but its children remain unchange.
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.ResetWorldButChildrenStays(UnityEngine.Transform,RhinoXDebugger.TransformExtension.ResetMask)">
             <summary>
             Resets the transform world matrix but its children remain unchange.
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.ScaleAround(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Scale transfrom around pivot.
             </summary>
             <param name="transform"></param>
             <param name="pivot"></param>
             <param name="newScale"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionAndForwardDirection(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Sets the position and forward direction.
             </summary>
             <param name="transform">Transform.</param>
             <param name="WorldPosition">World position.</param>
             <param name="Forward">Forward.</param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetParenAtIdentityPosition(UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             Transform sets parent transform, and set local position and local rotation to zero point.
             </summary>
             <param name="transform">Transform.</param>
             <param name="parent">Parent.</param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionY(UnityEngine.Transform,System.Single)">
             <summary>
             Set world position Y, keep X and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionY(UnityEngine.Transform,System.Single)">
             <summary>
             Set local position Y, keep X and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddPositionY(UnityEngine.Transform,System.Single)">
             <summary>
             Add world position Y, keep X and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddLocalPositionY(UnityEngine.Transform,System.Single)">
             <summary>
             Add local position Y, keep X and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionX(UnityEngine.Transform,System.Single)">
             <summary>
             Set world position X, keep Y and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionX(UnityEngine.Transform,System.Single)">
             <summary>
             Set local position X, keep Y and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionXZ(UnityEngine.Transform,System.Single,System.Single)">
             <summary>
             Set world position X and Z, keep Y.
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionXZ(UnityEngine.Transform,System.Single,System.Single)">
             <summary>
             Set local position X and Z, keep Y.
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddPositionX(UnityEngine.Transform,System.Single)">
             <summary>
             Add world position X, keep Y and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddLocalPositionX(UnityEngine.Transform,System.Single)">
             <summary>
             Add local position X, keep Y and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionZ(UnityEngine.Transform,System.Single)">
             <summary>
             Set world position Z, keep Y and X
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionZ(UnityEngine.Transform,System.Single)">
             <summary>
             Set local position Z, keep Y and Z
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddPositionZ(UnityEngine.Transform,System.Single)">
             <summary>
             Add world position Z, keep X and Y
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.AddLocalPositionZ(UnityEngine.Transform,System.Single)">
             <summary>
             Add local position Z, keep X and Y
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetPositionButChildrenStays(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             Sets world position without children transform changed
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionButChildrenStays(UnityEngine.Transform,UnityEngine.Vector3)">
             <summary>
             Sets world position without children transform changed
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetRotationButChildrenStays(UnityEngine.Transform,UnityEngine.Quaternion)">
             <summary>
             Sets world rotation without children transform changed
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalRotationButChildrenStays(UnityEngine.Transform,UnityEngine.Quaternion)">
             <summary>
             Sets world rotation without children transform changed
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.SetLocalPositionAndRotation(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
             <summary>
             Sets local position and local rotation
             </summary>
             <param name="transform"></param>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.InverseSpace(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform)">
             <summary>
             给出 Anchor 做为世界坐标空间。Parent 和 Child 做为相对关系的一对空间对象。 获取一个新的世界空间的 Pose， Pose相对于 Anchor 的关系， 和 Child 相对于 Parent 的关系一致。
             此方法的典型应用场景是 XimSDK 的Ground 矫正头部的应用 : Anchor 是Ground Plane, Parent 是头部（Vpu, 相对于 Marker不动), Child 是 Dynamic Marker (相对于 Vpu 运动)
             </summary>
             <param name="Anchor"></param>
             <param name="Parent"></param>
             <param name="Child"></param>
             <returns></returns>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.MoveChildrensToOtherTransform(UnityEngine.Transform,UnityEngine.Transform,System.Int32,System.Boolean,System.Int32@)">
             <summary>
             将 ThisTransform 下面的最多 [Maximum] 个子对象移动到 Another 节点下。
             如果移动的对象等于 【Maximum】,返回true ，否则返回false。
             【MoveCount】: 输出一共移动多少个对象。
            
             此方法一般用于池对象的管理 ， 用于将对象移动/移除到一个代表池的根节点下。
             </summary>
             <param name="thisTransform"></param>
             <param name="Another"></param>
             <param name="ExpectMoveCount">预期的移动子对象数量。</param>
             <param name="StayWorldPosition">SetParent的第二个参数</param>
             <param name="MoveCount">输出的移动的子对象的个数。</param>
             <returns>移动个数是否等于[Maximum]</returns>
            </member>
        <member name="M:RhinoXDebugger.TransformExtension.MoveAllChildrensToOtherTransform(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,System.Boolean)">
             <summary>
             将 ThisTransform 下面的全部子对象移动到 Another 节点下。
             </summary>
             <param name="thisTransform"></param>
             <param name="Another"></param>
             <param name="StayWorldPosition"></param>
             <param name="Sequential">是否正序？如果false，则从尾巴开始.</param>
             <returns>移动的数量</returns>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetUtility">
             <summary>
             Ti-Net utility.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.Broadcast(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Broadcast unreliable UDP msg to LAN
             </summary>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.SendToAllReliable(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends reliable message to all nodes in reliable channel
             </summary>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.SendToReliable(RhinoXDebugger.UnityNetworking.TiNetMessage,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends reliable message to the node in reliable channel
             </summary>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.SendToUnreliable(RhinoXDebugger.UnityNetworking.TiNetMessage,RhinoXDebugger.UnityNetworking.I_TiNetNode)">
             <summary>
             Sends reliable message to the node in reliable channel
             </summary>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.SendToAllUnreliable(RhinoXDebugger.UnityNetworking.TiNetMessage)">
             <summary>
             Sends reliable message to all nodes in reliable channel
             </summary>
             <param name="msg"></param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.TiNetUtility.GetMessage``1">
             <summary>
             Gets a pooled TiNetMessage instance.
             </summary>
             <typeparam name="T"></typeparam>
             <returns></returns>
            </member>
        <member name="T:RhinoXDebugger.MinValueAttribute">
             <summary>
             Attach this Minimum max vector attribute to a vector2 property
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.NetworkDataPacket">
             <summary>
             Network data packet.
             网络数据包
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.NetworkDataPacket.endPoint">
             <summary>
             This field is internal used only.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UDPConnectionStatus">
             <summary>
             UDP connection status.
             </summary>
            </member>
        <!--FIXME: Invalid documentation markup was found for member T:RhinoXDebugger.UnityNetworking.UDPSocket-->
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.isClientConnected">
             <summary>
             Is this UDP socket connected to a remote end point ?
             </summary>
             <value><c>true</c> if is client connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.isServerRunning">
             <summary>
             Is the UDP server running ?
             </summary>
             <value><c>true</c> if is server running; otherwise, <c>false</c>.</value>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.m_Timeout">
             <summary>
             Default timeout : 1s
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.HeartBeatConnectionTimeOut">
             <summary>
             Heart beat connection timeout.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.HeartBeatInterval">
             <summary>
             The heart beat interval.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.HasClientException">
             <summary>
             Gets a value indicating whether this <see cref="T:RhinoXDebugger.UnityNetworking.UDPSocket" /> has caught client exception.
             </summary>
             <value><c>true</c> if has client exception; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.HasServerException">
             <summary>
             Gets a value indicating whether this <see cref="T:RhinoXDebugger.UnityNetworking.UDPSocket" /> has caught server exception.
             </summary>
             <value><c>true</c> if is server exception; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.clientSocketException">
             <summary>
             Client socket exception.
             </summary>
             <value>The client socket exception.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.serverSocketException">
             <summary>
             Gets the server socket exception.
             </summary>
             <value>The server socket exception.</value>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.UDPSocket.OnClientIsConnected">
             <summary>
             Event : on client is connected. 
             </summary>
            </member>
        <member name="E:RhinoXDebugger.UnityNetworking.UDPSocket.OnClientConnectionFailed">
             <summary>
             Event : on client connection failed.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.recvPackets">
             <summary>
             The received data packets.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.allPeerConnections">
             <summary>
             All peers' connection, in server only.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.newConnections">
             <summary>
             The new accept connections.
             Only available in server socket.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.ConnectionStatusMap">
             <summary>
             The connection status map.
             Key = udp IP endpoint 
             Value = udp connection status
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.OnAsyncCompleteAction">
             <summary>
             Action on socket's async operation complete.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.LastUpdateHeartbeatTime">
             <summary>
             Gets the last update heartbeat time.
             </summary>
             <value>The last update heartbeat time.</value>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.UDPSocket.ClientUDPSocketState">
             <summary>
             Client UDP socket state.
             </summary>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.clientSocketState">
             <summary>
             Gets the state of the client socket.
             </summary>
             <value>The state of the client socket.</value>
            </member>
        <member name="P:RhinoXDebugger.UnityNetworking.UDPSocket.timeout">
             <summary>
             Gets or sets the timeout of the UDP socket (default = 1s) .
             </summary>
             <value>The timeout.</value>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.UnityTime">
             <summary>
             The unity time.
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.UDPSocket.UnityRealTime">
             <summary>
             The unity real time.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.StartServer(System.Net.IPAddress,System.Int32@,System.Boolean,System.Single,System.Single,System.Boolean)">
             <summary>
             Starts the server.
             If the original port is occupied, and persist port == false, will auto increase the port number until the server start successfully.
             Return true if the server's been started.
             </summary>
             <param name="address">Address.</param>
             <param name="port">Port.</param>
             <param name="heartBeat">If set to <c>true</c> heart beat.</param>
             <param name="heartBeatTimeout">Heart beat timeout.</param>
             <param name="heartBeatInterval">Heart beat interval.</param>
             <param name="persistPort">If set to <c>true</c> persist port.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.StopServer">
             <summary>
             Stops the server.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.Client(System.String,System.Int32)">
             <summary>
             Use this UDP socket as a client sender.
             </summary>
             <returns>The client.</returns>
             <param name="address">Address.</param>
             <param name="port">Port.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendAsync(System.Byte[])">
             <summary>
             Sends the buffer async
             </summary>
             <param name="data">Data.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendAsync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends the buffer async
             </summary>
             <param name="data">Data.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendSync(System.Byte[])">
             <summary>
             Sends the data in sync mode.
             </summary>
             <param name="data">Data.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendSync(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends the data in sync.
             </summary>
             <param name="data">Data.</param>
             <param name="offset">Offset.</param>
             <param name="length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendSync(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends the buffer synchronously to the IP end point.
             </summary>
             <param name="endPoint">End point.</param>
             <param name="data">Data.</param>
             <param name="offset">Offset.</param>
             <param name="length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.SendAsync(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends the buffer asynchronously to the IP end point.
             Return async result.
             </summary>
             <param name="endPoint">End point.</param>
             <param name="data">Data.</param>
             <param name="offset">Offset.</param>
             <param name="length">Length.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.IsHandShakeFromClientPacket(System.Byte[])">
             <summary>
             Is the packet from client to server.
             </summary>
             <returns><c>true</c>, if hand shake from client packet was ised, <c>false</c> otherwise.</returns>
             <param name="packet">Packet.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.GetConnectionStatus(System.Net.IPEndPoint)">
             <summary>
             Gets the connection status by IP endpoint.
             </summary>
             <returns>The connection status.</returns>
             <param name="endPoint">End point.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.IsHeartBeatPacket(System.Byte[])">
             <summary>
             IS this heart beat packet ?
             </summary>
             <returns><c>true</c>, if heart beat packet was ised, <c>false</c> otherwise.</returns>
             <param name="packet">Packet.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.IsServerHandShakePacket(System.Byte[],System.Int32,System.Boolean@,System.Single@)">
             <summary>
             Is the packet indicating this is a server hand shake packet ? 
             If true, output the heart beat flag and the interval.
             </summary>
             <returns><c>true</c>, if server hand shake packet was ised, <c>false</c> otherwise.</returns>
             <param name="buffer">Packet.</param>
             <param name="HeartBeat">If set to <c>true</c> heart beat.</param>
             <param name="HeartBeatInterval">Heart beat interval.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.BroadcastToAllPeers(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Broadcasts text message to all peers.
             Called in server udp only.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.BroadcastAsync(System.Byte[],System.Int32,System.Int32,System.Collections.Generic.List{System.IAsyncResult})">
             <summary>
             Broadcasts the message asynchronously.
             </summary>
             <param name="message">Message.</param>
             <param name="count">Count.</param>
             <param name="offset">Offset.</param>
            </member>
        <member name="M:RhinoXDebugger.UnityNetworking.UDPSocket.UpdateHeartBeat">
             <summary>
             Updates the heart beat : for server, drop lost connection. 
             For Client : sends heart beat bytes.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.TextureExtension">
             <summary>
             Texture extension util scripts.
             </summary>
            </member>
        <member name="M:RhinoXDebugger.TextureExtension.Rescale(UnityEngine.Texture2D,System.Int32,System.Int32,RhinoXDebugger.TextureExtension.RescaleMode)">
             <summary>
             Rescale the texture by mode.
             </summary>
             <param name="texture"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="mode"></param>
            </member>
        <member name="M:RhinoXDebugger.TextureExtension.RescaleAsync(UnityEngine.Texture2D,System.Int32,System.Int32,RhinoXDebugger.TextureExtension.RescaleMode)">
             <summary>
             Rescale the texture by mode.
             </summary>
             <param name="texture"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="mode"></param>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.TiNetMessageHandler">
             <summary>
             TiNetwork message handler.
             Use attribute: [TiNetMessageCallback] to mark network callback static method.
             </summary>
            </member>
        <member name="T:RhinoXDebugger.UnityNetworking.QueryNodeInfoMessage">
             <summary>
             此消息用于问询 tinet node 的节点信息。
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.QueryNodeInfoMessage.MessageFlag.Ask">
             <summary>
             问询包
             </summary>
            </member>
        <member name="F:RhinoXDebugger.UnityNetworking.QueryNodeInfoMessage.MessageFlag.Ack">
             <summary>
             回复包
             </summary>
            </member>
    </members>
</doc>
